class ChessFunctions
!!!665602.java!!!	findpieceType(inout p : Q, inout pr : Predicate<Q>) : P
		if (pr.test(p))
			return (P) p;
		return null;
!!!665730.java!!!	filterMove(inout l : List<T>, inout p : P, inout pr : Predicate<P>) : List<T>
		List<T> result = new ArrayList<>();
		for (T e: l) {
			if (pr.test(p)) {
				result.add(e);
			}
		}
	
		return result;
!!!665858.java!!!	filterPiece(inout list : List<T>, inout pr : Predicate<T>) : List<T>
		List<T> result = new ArrayList<>();
		for (T e: list) {	
			if (pr.test(e)) {
				result.add(e);
			}
		}
	
		return result;
!!!665986.java!!!	processChessgame(inout p : P, inout q : Q, inout processor : ChessProcessor) : R
		return (R) processor.processChessObject(p, q);
!!!666114.java!!!	createType(inout p : P, inout a : A, inout f : BiFunction<P,A,M>) : M
		
		M m = f.apply(p, a);
		return m;
		
!!!666242.java!!!	moveRule(inout t : T, inout r : MoveRule) : XYLocation
		return (List<XYLocation>) r.calculateRule(t);
!!!666370.java!!!	moveCalculation(inout t : T, inout pr : Predicate<T>, inout r : MoveCalculator) : List<P>
		return (List<P>) r.calculatePositions(t,pr);
!!!666498.java!!!	calculateMoves(inout p : P, inout pr : Predicate<P>) : List<T>
		List<T> result = new ArrayList<>();
		
		if (pr.test(p)) {
			
		}
		return null;
