class StandardizeApart
!!!268546.java!!!	StandardizeApart()
		variableCollector = new VariableCollector();
		substVisitor = new SubstVisitor();
!!!268674.java!!!	StandardizeApart(inout variableCollector : VariableCollector, inout substVisitor : SubstVisitor)
		this.variableCollector = variableCollector;
		this.substVisitor = substVisitor;
!!!268802.java!!!	standardizeApart(inout sentence : Sentence, inout standardizeApartIndexical : StandardizeApartIndexical) : StandardizeApartResult
		Set<Variable> toRename = variableCollector
				.collectAllVariables(sentence);
		Map<Variable, Term> renameSubstitution = new HashMap<Variable, Term>();
		Map<Variable, Term> reverseSubstitution = new HashMap<Variable, Term>();

		for (Variable var : toRename) {
			Variable v = null;
			do {
				v = new Variable(standardizeApartIndexical.getPrefix()
						+ standardizeApartIndexical.getNextIndex());
				// Ensure the new variable name is not already
				// accidentally used in the sentence
			} while (toRename.contains(v));

			renameSubstitution.put(var, v);
			reverseSubstitution.put(v, var);
		}

		Sentence standardized = substVisitor.subst(renameSubstitution,
				sentence);

		return new StandardizeApartResult(sentence, standardized,
				renameSubstitution, reverseSubstitution);
!!!268930.java!!!	standardizeApart(inout clause : Clause, inout standardizeApartIndexical : StandardizeApartIndexical) : Clause

		Set<Variable> toRename = variableCollector.collectAllVariables(clause);
		Map<Variable, Term> renameSubstitution = new HashMap<Variable, Term>();

		for (Variable var : toRename) {
			Variable v = null;
			do {
				v = new Variable(standardizeApartIndexical.getPrefix()
						+ standardizeApartIndexical.getNextIndex());
				// Ensure the new variable name is not already
				// accidentally used in the sentence
			} while (toRename.contains(v));

			renameSubstitution.put(var, v);
		}

		if (renameSubstitution.size() > 0) {
			List<Literal> literals = new ArrayList<Literal>();

			for (Literal l : clause.getLiterals()) {
				literals.add(substVisitor.subst(renameSubstitution, l));
			}
			Clause renamed = new Clause(literals);
			renamed.setProofStep(new ProofStepRenaming(renamed, clause
					.getProofStep()));
			return renamed;
		}

		return clause;
!!!269058.java!!!	standardizeApart(inout chain : Chain, inout standardizeApartIndexical : StandardizeApartIndexical) : Chain

		Set<Variable> toRename = variableCollector.collectAllVariables(chain);
		Map<Variable, Term> renameSubstitution = new HashMap<Variable, Term>();

		for (Variable var : toRename) {
			Variable v = null;
			do {
				v = new Variable(standardizeApartIndexical.getPrefix()
						+ standardizeApartIndexical.getNextIndex());
				// Ensure the new variable name is not already
				// accidentally used in the sentence
			} while (toRename.contains(v));

			renameSubstitution.put(var, v);
		}

		if (renameSubstitution.size() > 0) {
			List<Literal> lits = new ArrayList<Literal>();

			for (Literal l : chain.getLiterals()) {
				AtomicSentence atom = (AtomicSentence) substVisitor.subst(
						renameSubstitution, l.getAtomicSentence());
				lits.add(l.newInstance(atom));
			}

			Chain renamed = new Chain(lits);

			renamed.setProofStep(new ProofStepRenaming(renamed, chain
					.getProofStep()));

			return renamed;
		}

		return chain;
!!!269186.java!!!	standardizeApart(inout l1Literals : List<Literal>, inout l2Literals : List<Literal>, inout standardizeApartIndexical : StandardizeApartIndexical) : Variable
		Set<Variable> toRename = new HashSet<Variable>();

		for (Literal pl : l1Literals) {
			toRename.addAll(variableCollector.collectAllVariables(pl
					.getAtomicSentence()));
		}
		for (Literal nl : l2Literals) {
			toRename.addAll(variableCollector.collectAllVariables(nl
					.getAtomicSentence()));
		}

		Map<Variable, Term> renameSubstitution = new HashMap<Variable, Term>();

		for (Variable var : toRename) {
			Variable v = null;
			do {
				v = new Variable(standardizeApartIndexical.getPrefix()
						+ standardizeApartIndexical.getNextIndex());
				// Ensure the new variable name is not already
				// accidentally used in the sentence
			} while (toRename.contains(v));

			renameSubstitution.put(var, v);
		}

		List<Literal> posLits = new ArrayList<Literal>();
		List<Literal> negLits = new ArrayList<Literal>();

		for (Literal pl : l1Literals) {
			posLits.add(substVisitor.subst(renameSubstitution, pl));
		}
		for (Literal nl : l2Literals) {
			negLits.add(substVisitor.subst(renameSubstitution, nl));
		}

		l1Literals.clear();
		l1Literals.addAll(posLits);
		l2Literals.clear();
		l2Literals.addAll(negLits);

		return renameSubstitution;
