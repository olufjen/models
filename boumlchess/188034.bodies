class MonteCarloLocalization
!!!437250.java!!!	MonteCarloLocalization(inout map : IMclMap, inout randomizer : Randomizer)
		this.map = map;
		this.randomizer = randomizer;
!!!437378.java!!!	setWeightCutOff(in cutOff : double) : void
		this.weightCutOff = cutOff;
!!!437506.java!!!	applyMove(inout samples : Set<P>, inout move : M) : Set<P>
		Set<P> newSamples = new LinkedHashSet<P>();
		for(P sample: samples) {
			newSamples.add(sample.applyMovement(move.generateNoise()));
		}
		return newSamples;
!!!437634.java!!!	weightSamples(inout samples : Set<P>, inout rangeReadings : R [[]]) : double
		Iterator<P> samplesIterator = samples.iterator();
		double[] w = new double[samples.size()];
		for(int j=0;j<samples.size();j++) {
			P sample = samplesIterator.next();
			if(map.isPoseValid(sample)) {
				w[j] = 1.0d;
				for(int i=0;i<rangeReadings.length;i++) {
					w[j] = w[j] * rangeReadings[i].calculateWeight(map.rayCast(sample.addAngle(rangeReadings[i].getAngle())));
				}
			} else {
				w[j] = 0.0d;
			}
		}
		return w;
!!!437762.java!!!	extendedWeightedSampleWithReplacement(inout samples : Set<P>, inout w : double [[]]) : Set<P>
		int i = 0;
		for(;i<samples.size();i++) {
			if(w[i] > weightCutOff) break;
		}
		if(i >= samples.size()) return generateCloud(samples.size()); /*If all particleCloud are below weightCutOff, generate a new set of samples, as we are lost.*/
		/*WEIGHTED-SAMPLE-WITH-REPLACEMENT:*/
		double[] normalizedW = Util.normalize(w);
		Set<P> newSamples = new LinkedHashSet<P>();
		Object[] array = samples.toArray(new Object[0]);
		for(i=0; i < samples.size(); i++) {
			final int selectedSample = (Integer) ProbUtil.sample(randomizer.nextDouble(),sampleIndexes,normalizedW);
			newSamples.add(((P) array[selectedSample]).clone());
		}
		return newSamples;
!!!437890.java!!!	generateCloud(in N : int) : Set<P>
		Set<P>samples = new LinkedHashSet<P>();
		Integer[] indexes = new Integer[N];
		for(int i=0;i<N;i++) {
			samples.add(map.randomPose());
			indexes[i] = i;
		}
		sampleIndexes = new RandVar(SAMPLE_INDEXES_NAME, new FiniteIntegerDomain(indexes));
		return samples;
!!!438018.java!!!	localize(inout samples : Set<P>, inout move : M, inout rangeReadings : R [[]]) : Set<P>
		if(samples == null) return null;/*initialization phase = call generateCloud*/
		Set<P> newSamples = applyMove(samples, move);/*motion model*/
		double[] w = weightSamples(newSamples, rangeReadings);/*range sensor noise model*/
		newSamples = extendedWeightedSampleWithReplacement(newSamples, w);
		return newSamples;
