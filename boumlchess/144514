format 223
"minimax" // no::games::minimax
  revision 1
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\no/games/minimax/"
  java_package "no.games.minimax"
  classview 142338 "minimax"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 226946 "BasicMinimax"
      abstract visibility public 
      nformals 1
      formal name "M" type "" explicit_default_value ""
        explicit_extends "Move"
      nactuals 1
      actual class class_ref 227074 // Minimax
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract class implementing minimax and derivated decision rules for two-person  
<a href=\"http://en.wikipedia.org/wiki/Zero-sum_game\">zero-sum</a> games of perfect information. 
Extend this class to implement IA for several games, such as : 
<ul> 
<li>Chess</li> 
<li>Reversi</li> 
<li>Checkers</li> 
<li>Go</li> 
<li>Connect Four</li> 
<li>Tic Tac Toe</li> 
<li>...</li> 
</ul> 
 
@author antoine vianey 

@param <M> Implementation of the Move interface to use 
"
      classrelation 282370 // <realization>
	relation 282370 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 282370 // <realization>
	  b parent class_ref 227074 // Minimax
      end

      classrelation 282498 // algo (<unidirectional association>)
	relation 282498 --->
	  a role_name "algo" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 282498 // algo (<unidirectional association>)
	  b parent class_ref 227202 // Algorithm
      end

      attribute 268930 "step"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 227330 "MoveWrapper"
	visibility package 
	nformals 1
	formal name "M" type "" explicit_default_value ""
	  explicit_extends "Move"
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 269058 "move"
	  public explicit_type "M"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 673538 "BasicMinimax"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new IA using the {@link Algorithm#NEGAMAX} algorithm<br/> 
{@link Algorithm#NEGASCOUT} performs slowly in case of a weak move ordering... 
"
      end

      operation 673666 "BasicMinimax"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "algo" type class_ref 227202 // Algorithm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new IA using the provided algorithm 
@param algo The decision rule to use 
@see Algorithm 
"
      end

      operation 673794 "getBestMove"
	cpp_inline public explicit_return_type "M"
	nparams 1
	  param in name "depth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 673922 "minimax"
	cpp_inline private explicit_return_type "double"
	nparams 3
	  param in name "wrapper" type class_ref 227330 // MoveWrapper
	  param in name "depth" explicit_type "int"
	  param in name "who" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<M> ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Minimax algorithm implementation : 
<pre> 
function minimax(node, depth, maximizingPlayer) 
    if depth = 0 or node is a terminal node 
        return the heuristic value of node 
    if maximizingPlayer 
        bestValue := -8 
        for each child of node 
            val := minimax(child, depth - 1, FALSE) 
            bestValue := max(bestValue, val) 
        return bestValue 
    else 
        bestValue := +8 
        for each child of node 
            val := minimax(child, depth - 1, TRUE) 
            bestValue := min(bestValue, val) 
        return bestValue 
</pre> 
 
Initial call for maximizing player 
<pre>minimax(origin, depth, TRUE)</pre> 
 
@param wrapper 
@param depth 
@param who : Value first call = 1 
@return 
"
      end

      operation 674050 "minimaxScore"
	cpp_inline protected explicit_return_type "double"
	nparams 2
	  param in name "depth" explicit_type "int"
	  param in name "who" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 674178 "alphabeta"
	cpp_inline private explicit_return_type "double"
	nparams 5
	  param in name "wrapper" type class_ref 227330 // MoveWrapper
	  param in name "depth" explicit_type "int"
	  param in name "who" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "beta" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<M> ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Minimax with alpha beta algorithm : 
<pre> 
function alphabeta(node, depth, a, �, maximizingPlayer) 
    if depth = 0 or node is a terminal node 
        return the heuristic value of node 
    if maximizingPlayer 
        for each child of node 
            a := max(a, alphabeta(child, depth - 1, a, �, FALSE)) 
            if � <= a 
                break (* � cut-off *) 
        return a 
    else 
        for each child of node 
            � := min(�, alphabeta(child, depth - 1, a, �, TRUE)) 
            if � <= a 
                break (* a cut-off *) 
        return � 
</pre> 
Initial call for maximizing player 
<pre>alphabeta(origin, depth, -8, +8, TRUE)</pre> 
 
@param wrapper 
@param depth 
@param who 
@param alpha 
@param beta 
@return 
"
      end

      operation 674306 "alphabetaScore"
	cpp_inline protected explicit_return_type "double"
	nparams 4
	  param in name "depth" explicit_type "int"
	  param in name "who" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "beta" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 674434 "negamax"
	cpp_inline private explicit_return_type "double"
	nparams 4
	  param in name "wrapper" type class_ref 227330 // MoveWrapper
	  param in name "depth" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "beta" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<M> ${p0}, final ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Negamax algorithm : 
<pre> 
function negamax(node, depth, color) 
    if depth = 0 or node is a terminal node 
        return color * the heuristic value of node 
    bestValue := -8 
    foreach child of node 
        val := -negamax(child, depth - 1, -color) 
        bestValue := max( bestValue, val ) 
    return bestValue 
</pre> 
 
Initial call for Player A's root node 
<pre> 
rootNegamaxValue := negamax( rootNode, depth, 1) 
rootMinimaxValue := rootNegamaxValue 
</pre> 
 
Initial call for Player B's root node 
<pre> 
rootNegamaxValue := negamax( rootNode, depth, -1) 
rootMinimaxValue := -rootNegamaxValue 
</pre> 
 
This implementation use alpha-beta cut-offs. 
 
@param wrapper 
@param depth 
@param alpha 
@param beta 
@return 
"
      end

      operation 674562 "negamaxScore"
	cpp_inline protected explicit_return_type "double"
	nparams 3
	  param in name "depth" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "beta" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 674690 "negascout"
	cpp_inline private explicit_return_type "double"
	nparams 4
	  param in name "wrapper" type class_ref 227330 // MoveWrapper
	  param in name "depth" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "beta" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<M> ${p0}, final ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Negascout PVS algorithm : 
<pre> 
function pvs(node, depth, a, �, color) 
    if node is a terminal node or depth = 0 
        return color x the heuristic value of node 
    for each child of node 
        if child is not first child 
            score := -pvs(child, depth-1, -a-1, -a, -color)       (* search with a null window *) 
            if a < score < �                                      (* if it failed high, 
                score := -pvs(child, depth-1, -�, -score, -color)         do a full re-search *) 
        else 
            score := -pvs(child, depth-1, -�, -a, -color) 
        a := max(a, score) 
        if a >= � 
            break                                            (* beta cut-off *) 
    return a 
</pre> 
 
@param wrapper 
@param depth 
@param alpha 
@param beta 
@return 
"
      end

      operation 674818 "negascoutScore"
	cpp_inline protected explicit_return_type "double"
	nparams 5
	  param in name "first" explicit_type "boolean"
	  param in name "depth" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "beta" explicit_type "double"
	  param in name "b" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}, final ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 674946 "getAlgorithm"
	cpp_inline public return_type class_ref 227202 // Algorithm
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the implementation used for tree search. 
@return the {@link Algorithm} used. 
"
      end
    end

    class 227074 "Minimax"
      visibility public stereotype "interface"
      nformals 1
      formal name "M" type "" explicit_default_value ""
        explicit_extends "Move"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract class implementing minimax and derivated decision rules for two-person  
<a href=\"http://en.wikipedia.org/wiki/Zero-sum_game\">zero-sum</a> games of perfect information. 
Extend this class to implement IA for several games, such as : 
<ul> 
<li>Chess</li> 
<li>Reversi</li> 
<li>Checkers</li> 
<li>Go</li> 
<li>Connect Four</li> 
<li>Tic Tac Toe</li> 
<li>...</li> 
</ul> 
 
@author antoine vianey 

@param <M> Implementation of the Move interface to use 
"
      class 227202 "Algorithm"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 268418 "MINIMAX"
	  public type class_ref 227202 // Algorithm
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Minimax algorithm (slowest)  
@see http://en.wikipedia.org/wiki/Minimax 

"
	end

	attribute 268546 "ALPHA_BETA"
	  public type class_ref 227202 // Algorithm
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Mininma algorithm with alpha-beta pruning  
@see http://en.wikipedia.org/wiki/Alpha-beta_pruning 

"
	end

	attribute 268674 "NEGAMAX"
	  public type class_ref 227202 // Algorithm
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Negamax algorithm with alpha-beta pruning 
@see http://en.wikipedia.org/wiki/Negamax 

"
	end

	attribute 268802 "NEGASCOUT"
	  public type class_ref 227202 // Algorithm
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Negascout algorithm (fastest when strong move ordering is provided)<br/> 
Also called Principal Variation Search... 
@see Minimax#getPossibleMoves() 
@see http://en.wikipedia.org/wiki/Negascout 
"
	end
      end

      operation 672386 "getBestMove"
	cpp_inline public explicit_return_type "M"
	nparams 1
	  param in name "depth" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the best {@link Move} for the given search depth<br/> 
This methods iterates over {@link #getPossibleMoves()} to find the best one. 
If two or more {@link Move} lead to the same best evaluation, the first one is returned. 
@param depth The search depth (must be > 0) 
@return the best possible move for the {@link #evaluate()} function 
"
      end

      operation 672514 "isOver"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell weather or not the game is over. 
@return 
        True if the game is over 
"
      end

      operation 672642 "makeMove"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "move" explicit_type "M"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Play the given move and modify the state of the game.<br/> 
This function <strong>MUST</strong> set correctly the turn of the next player 
... by calling the next() method for example. 
@param move 
            The move to play 
@see #next() 
"
      end

      operation 672770 "unmakeMove"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "move" explicit_type "M"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Undo the given move and restore the state of the game.<br/> 
This function <strong>MUST</strong> restore correctly the turn of the previous player 
... by calling the previous() method for example. 
@param move 
            The move to cancel 
@see #previous() 
"
      end

      operation 672898 "getPossibleMoves"
	cpp_inline public explicit_return_type "List<M>"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "List every valid moves for the current player.<br><br> 
<i>\"Improvement (of the alpha beta pruning) can be achieved without  
sacrificing accuracy, by using ordering heuristics to search parts  
of the tree that are likely to force alpha-beta cutoffs early.\"</i> 
<br>- <a href=\"http://en.wikipedia.org/wiki/Alpha-beta_pruning#Heuristic_improvements\">Alpha-beta pruning on Wikipedia</a> 
@return 
        The list of the current player possible moves 
"
      end

      operation 673026 "evaluate"
	cpp_inline public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Evaluate the state of the game <strong>for the current player</strong> after a move. 
The greatest the value is, the better the position of the current player is. 
@return 
        The evaluation of the position for the current player 
@see #maxEvaluateValue() 
"
      end

      operation 673154 "maxEvaluateValue"
	cpp_inline public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The absolute maximal value for the evaluate function. 
This value must not be equal to a possible return value of the evaluation function. 
@return 
        The <strong>non inclusive</strong> maximal value 
@see #evaluate() 
"
      end

      operation 673282 "next"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Change current turn to the next player. 
This method must not be used in conjunction with the makeMove() method. 
Use it to implement a <strong>pass</strong> functionality. 
@see #makeMove(Move) 
"
      end

      operation 673410 "previous"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Change current turn to the previous player. 
This method must not be used in conjunction with the unmakeMove() method. 
Use it to implement an <strong>undo</strong> functionality. 
@see #unmakeMove(Move) 
"
      end
    end

    class 227458 "ParallelMinimax"
      abstract visibility public 
      nformals 1
      formal name "M" type "" explicit_default_value ""
        explicit_extends "Move"
      nactuals 1
      actual class class_ref 226946 // BasicMinimax
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link Minimax} implementation that distribute the tree exploration across processors.<br/> 
 
@param <M> 
@author antoine vianey 
"
      classrelation 282626 // <realization>
	relation 282626 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 282626 // <realization>
	  b parent class_ref 226946 // BasicMinimax
      end

      classrelation 282754 // <realization>
	relation 282754 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 282754 // <realization>
	  b parent class_ref 134274 // Cloneable
      end

      attribute 269186 "pool"
	private explicit_type "ForkJoinPool"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 675074 "ParallelMinimax"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new IA using the {@link Algorithm#NEGAMAX} algorithm<br/> 
{@link Algorithm#NEGASCOUT} performs slowly in case of a weak move ordering... 
"
      end

      operation 675202 "ParallelMinimax"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "parallelism" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new IA using the {@link Algorithm#NEGAMAX} algorithm and the given parallelism. 
@param parallelism 
"
      end

      operation 675330 "ParallelMinimax"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "algo" type class_ref 227202 // Algorithm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new IA using the provided algorithm and {@link Runtime#availableProcessors()} for parallelism. 
@param algo The decision rule to use 
@see Algorithm 
"
      end

      operation 675458 "ParallelMinimax"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "algo" type class_ref 227202 // Algorithm
	  param in name "parallelism" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new IA using the provided algorithm and the given parallelism. 
@param algo 
@param parallelism 
"
      end

      operation 675586 "ParallelMinimax"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "from" type class_ref 227458 // ParallelMinimax
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<M> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new IA with the same {@link Algorithm} as the given instance.<br/> 
This constructor SHOULD be used when creating clones as it skip {@link ForkJoinPool} configuration. 
@param from 
"
      end

      operation 675714 "ParallelMinimax"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "negamax" explicit_type "fr.pixelprose.minimax4j.IA.Algorithm"
	  param in name "availableProcessors" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 675842 "getBestMove"
	cpp_inline public explicit_return_type "M"
	nparams 1
	  param in name "depth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the best {@link Move} for the given search depth<br/> 
This method SHOULD be called from one thread at the time. 
@param depth The search depth (must be > 0) 
@return The best possible move 
@throws ExecutionException  
@throws InterruptedException  
"
      end

      operation 675970 "clone"
	abstract cpp_inline public return_type class_ref 227458 // ParallelMinimax
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<M> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 227586 "NegamaxAction"
	visibility private 
	nformals 1
	formal name "M" type "" explicit_default_value ""
	  explicit_extends "Move"
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 282882 // <realization>
	  relation 282882 -_-|>
	    a public
	      java "${type}<Double>"
	      classrelation_ref 282882 // <realization>
	    b parent class_ref 227714 // RecursiveTask
	end

	attribute 269314 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 1L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 283010 // wrapper (<unidirectional association>)
	  relation 283010 --->
	    a role_name "wrapper" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<M> ${name}${value};
"
	      classrelation_ref 283010 // wrapper (<unidirectional association>)
	    b parent class_ref 227330 // MoveWrapper
	end

	classrelation 283138 // minimax (<unidirectional association>)
	  relation 283138 --->
	    a role_name "minimax" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<M> ${name}${value};
"
	      classrelation_ref 283138 // minimax (<unidirectional association>)
	    b parent class_ref 227458 // ParallelMinimax
	end

	attribute 269442 "depth"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 269570 "move"
	  const_attribute private explicit_type "M"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 269698 "alpha"
	  const_attribute private explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 269826 "beta"
	  const_attribute private explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 676098 "NegamaxAction"
	  cpp_inline public explicit_return_type ""
	  nparams 6
	    param inout name "minimax" type class_ref 227458 // ParallelMinimax
	    param inout name "wrapper" type class_ref 227330 // MoveWrapper
	    param inout name "move" explicit_type "M"
	    param in name "depth" explicit_type "int"
	    param in name "alpha" explicit_type "double"
	    param in name "beta" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<M> ${p0}, ${t1}<M> ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 676226 "compute"
	  cpp_inline protected explicit_return_type "Double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 676354 "negamax"
	  cpp_inline private explicit_return_type "double"
	  nparams 4
	    param in name "wrapper" type class_ref 227330 // MoveWrapper
	    param in name "depth" explicit_type "int"
	    param in name "alpha" explicit_type "double"
	    param in name "beta" explicit_type "double"
	  nexceptions 2
	    explicit_exception "InterruptedException"
	    explicit_exception "ExecutionException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<M> ${p0}, final ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 227842 "TranspositionMinimax"
      abstract visibility public 
      nformals 3
      formal name "M" type "" explicit_default_value ""
        explicit_extends "Move"
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "G" type "" explicit_default_value ""
        explicit_extends "Comparable<G>"
      nactuals 1
      actual class class_ref 226946 // BasicMinimax
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@link Minimax} backed by a <a href=\"http://en.wikipedia.org/wiki/Transposition_table\">transposition table</a> 
to speed up the search of the game tree.<br/> 
The transposition table will not be serialized with this instance. 
 
@author antoine vianey 

@param <M> the {@link Move} implementation 
@param <T> the transposition table key 
@param <G> the transposition group implementation or {@link Void} if grouping is not necessary.  
"
      classrelation 283266 // <realization>
	relation 283266 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 283266 // <realization>
	  b parent class_ref 226946 // BasicMinimax
      end

      class 227970 "TranspositionTableFactory"
	visibility public stereotype "interface"
	nformals 1
	formal name "X" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 676482 "newTransposition"
	  cpp_inline public explicit_return_type "Map<X, Double>"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 269954 "transpositionTableMap"
	const_attribute private explicit_type "G, Map<T, Double>"
	stereotype "TreeMap"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 283394 // transpositionTableFactory (<unidirectional association>)
	relation 283394 --->
	  a role_name "transpositionTableFactory" const_relation private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 283394 // transpositionTableFactory (<unidirectional association>)
	  b parent class_ref 227970 // TranspositionTableFactory
      end

      operation 676610 "TranspositionMinimax"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 676738 "TranspositionMinimax"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "transpositionTableFactory" type class_ref 227970 // TranspositionTableFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 676866 "TranspositionMinimax"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "algo" type class_ref 227202 // Algorithm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 676994 "TranspositionMinimax"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "algo" type class_ref 227202 // Algorithm
	  param inout name "transpositionTableFactory" type class_ref 227970 // TranspositionTableFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 677122 "TranspositionMinimax"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "algo" type class_ref 227202 // Algorithm
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 677250 "TranspositionMinimax"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param inout name "algo" type class_ref 227202 // Algorithm
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 677378 "initTranspositionTableMap"
	cpp_inline private explicit_return_type "TreeMap<G, Map<T, Double>>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Initialize the map of transposition table classified by groups.  
@return 
  A {@link TreeMap} storing transposition tables by group 
"
      end

      operation 677506 "getTranspositionTableMap"
	cpp_inline public explicit_return_type "TreeMap<G, Map<T, Double>>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 677634 "getBestMove"
	cpp_inline public explicit_return_type "M"
	nparams 1
	  param in name "depth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 677762 "useTranspositionTable"
	cpp_inline protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set it to false to stop the use of the transposition table<br/> 
Default is true. 
@return 
"
      end

      operation 677890 "clearGroups"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "currentGroup" explicit_type "G"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 678018 "clearGroupsBeforeSearch"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether or not the remove useless transposition before the tree exploration.<br/> 
Default to false. 
@return 
"
      end

      operation 678146 "clearGroupsAfterSearch"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether or not the remove useless transposition after the tree exploration.<br/> 
Default to false. 
@return 
"
      end

      operation 678274 "clearTranspositionTable"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the content of the transposition table. 
The preferred way to free memory is to use the grouping functionality. 
 
@see #getGroup() 
"
      end

      operation 678402 "getTransposition"
	abstract cpp_inline public explicit_return_type "T"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Represent the current configuration by an int value. 
<ul> 
<li><a href=\"http://en.wikipedia.org/wiki/Zobrist_hashing\">Zobrist hashing</a></li> 
</ul> 
The current player MUST be taken in account in the transposition's {@link Object#equals(Object)} function 
otherwise the stored value for the transposition may reflect the strength of the other player... 
@return 
     the hash for the current configuration 
"
      end

      operation 678530 "getSymetricTranspositions"
	cpp_inline public explicit_return_type "Collection<T>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the transpositions representing the current game configuration. 
@return 
     a {@link Collection} of transpositions 
"
      end

      operation 678658 "getGroup"
	abstract cpp_inline public explicit_return_type "G"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Represent the group in which the current transposition belong.<br/> 
Groups can be use to lower the number of transposition stored in memory : 
<dl> 
<dt>Reversi</dt> 
<dd>Transpositions can be grouped by number of discs on board</dd> 
<dt>Chess</dt> 
<dd>Transpositions can be grouped by number of left pieces of each color on the board</dd> 
<dt>Connect Four</dt> 
<dd>Transpositions can be grouped by number of dropped discs</dd> 
<dt>...</dt> 
</dl> 
Groups <b>MUST</b> be ordered such as when the current configuration hash belong to group 
G1, transpositions that belongs to groups G < G1 can be forgiven... If you don't want to  
handle groups, let G be {@link Void} and return null groups. 

@return 
     the group for the current position 
"
      end

      operation 678786 "saveTransposition"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "transpositionTable" explicit_type "Map<T, Double>"
	  param in name "score" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 678914 "minimaxScore"
	cpp_inline protected explicit_return_type "double"
	nparams 2
	  param in name "depth" explicit_type "int"
	  param in name "who" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "=================*
IMPLEMENTATIONS * 
================="
      end

      operation 679042 "alphabetaScore"
	cpp_inline protected explicit_return_type "double"
	nparams 4
	  param in name "depth" explicit_type "int"
	  param in name "who" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "beta" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 679170 "negamaxScore"
	cpp_inline protected explicit_return_type "double"
	nparams 3
	  param in name "depth" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "beta" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 679298 "negascoutScore"
	cpp_inline protected explicit_return_type "double"
	nparams 5
	  param inout name "first" explicit_type "boolean"
	  param in name "depth" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "beta" explicit_type "double"
	  param in name "b" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end
  end

  deploymentview 142082 "minimax"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 208642 "Minimax"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.List;
import fr.pixelprose.minimax4j.Move;
${definition}"
      associated_elems
	class_ref 227074 // Minimax
      end
      comment "This file is part of minimax4j. 
<https://github.com/avianey/minimax4j> 
  
The MIT License (MIT) 

Copyright (c) 2015 Antoine Vianey 

Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the \"Software\"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is 
furnished to do so, subject to the following conditions: 

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software. 

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE. 
"
    end

    artifact 208770 "BasicMinimax"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.List;
import fr.pixelprose.minimax4j.Move;
${definition}"
      associated_elems
	class_ref 226946 // BasicMinimax
      end
      comment "This file is part of minimax4j. 
<https://github.com/avianey/minimax4j> 
  
The MIT License (MIT) 

Copyright (c) 2015 Antoine Vianey 

Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the \"Software\"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is 
furnished to do so, subject to the following conditions: 

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software. 

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE. 
"
    end

    artifact 208898 "ParallelMinimax"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;
import fr.pixelprose.minimax4j.Move;
import static fr.pixelprose.minimax4j.IA.Algorithm.NEGAMAX;
import static java.lang.Runtime.getRuntime;
${definition}"
      associated_elems
	class_ref 227458 // ParallelMinimax
      end
      comment "This file is part of minimax4j. 
<https://github.com/avianey/minimax4j> 
  
The MIT License (MIT) 

Copyright (c) 2015 Antoine Vianey 

Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the \"Software\"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is 
furnished to do so, subject to the following conditions: 

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software. 

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE. 
"
    end

    artifact 209026 "TranspositionMinimax"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import fr.pixelprose.minimax4j.Move;
${definition}"
      associated_elems
	class_ref 227842 // TranspositionMinimax
      end
      comment "This file is part of minimax4j. 
<https://github.com/avianey/minimax4j> 
  
The MIT License (MIT) 

Copyright (c) 2015 Antoine Vianey 

Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the \"Software\"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is 
furnished to do so, subject to the following conditions: 

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software. 

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE. 
"
    end
  end
end
