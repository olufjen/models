format 223
"nondeterministic" // aima::core::search::nondeterministic
  revision 2
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\aima/core/search/nondeterministic/"
  java_package "aima.core.search.nondeterministic"
  classview 130562 "nondeterministic"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 142338 "ResultsFunction"
      visibility public stereotype "interface"
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page 136.<br>
<br>
Closely related to ResultFunction, but for non-deterministic problems; in
these problems, the outcome of an action will be a set of results, not a
single result. This class implements the functionality of RESULTS(s, a), page
136, returning the states resulting from doing action a in state s.

@author Andrew Brown
@author Ruediger Lunde
"
      operation 188290 "results"
	cpp_inline public explicit_return_type "List<S>"
	nparams 2
	  param inout name "state" explicit_type "S"
	  param inout name "action" explicit_type "A"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the states that result from doing action a in state s

@param state
           a particular state.
@param action
           an action to be performed in state s.
@return the states that result from doing action a in state s.
"
      end
    end

    class 190338 "NondeterministicProblem"
      visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Non-deterministic problems may have multiple results for a given state and
action; this class handles these results by mimicking Problem and replacing
ResultFunction (one result) with ResultsFunction (a set of results).

@author Andrew Brown
@author Ruediger Lunde
"
      attribute 196738 "initialState"
	protected explicit_type "S"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 238466 // actionsFn (<unidirectional association>)
	relation 238466 --->
	  a role_name "actionsFn" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<S, A> ${name}${value};
"
	    classrelation_ref 238466 // actionsFn (<unidirectional association>)
	  b parent class_ref 135298 // ActionsFunction
      end

      classrelation 238594 // goalTest (<unidirectional association>)
	relation 238594 --->
	  a role_name "goalTest" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<S> ${name}${value};
"
	    classrelation_ref 238594 // goalTest (<unidirectional association>)
	  b parent class_ref 135554 // GoalTest
      end

      classrelation 238722 // stepCostFn (<unidirectional association>)
	relation 238722 --->
	  a role_name "stepCostFn" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<S, A> ${name}${value};
"
	    classrelation_ref 238722 // stepCostFn (<unidirectional association>)
	  b parent class_ref 135682 // StepCostFunction
      end

      classrelation 238850 // resultsFn (<unidirectional association>)
	relation 238850 --->
	  a role_name "resultsFn" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<S, A> ${name}${value};
"
	    classrelation_ref 238850 // resultsFn (<unidirectional association>)
	  b parent class_ref 142338 // ResultsFunction
      end

      operation 486402 "NondeterministicProblem"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param inout name "initialState" explicit_type "S"
	  param inout name "actionsFn" type class_ref 135298 // ActionsFunction
	  param inout name "resultsFn" type class_ref 142338 // ResultsFunction
	  param inout name "goalTest" type class_ref 135554 // GoalTest
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<S, A> ${p1}, ${t2}<S, A> ${p2}, ${t3}<S> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor
"
      end

      operation 486530 "NondeterministicProblem"
	cpp_inline public explicit_return_type ""
	nparams 5
	  param inout name "initialState" explicit_type "S"
	  param inout name "actionsFn" type class_ref 135298 // ActionsFunction
	  param inout name "resultsFn" type class_ref 142338 // ResultsFunction
	  param inout name "goalTest" type class_ref 135554 // GoalTest
	  param inout name "stepCostFn" type class_ref 135682 // StepCostFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<S, A> ${p1}, ${t2}<S, A> ${p2}, ${t3}<S> ${p3}, ${t4}<S, A> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor
"
      end

      operation 486658 "getInitialState"
	cpp_inline public explicit_return_type "S"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the initial state of the agent.

@return the initial state of the agent.
"
      end

      operation 486786 "testGoal"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "state" explicit_type "S"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the given state is a goal state.

@return <code>true</code> if the given state is a goal state.
"
      end

      operation 486914 "getActions"
	cpp_inline package explicit_return_type "List<A>"
	nparams 1
	  param inout name "state" explicit_type "S"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the description of the possible actions available to the agent.
"
      end

      operation 487042 "getResults"
	cpp_inline public explicit_return_type "List<S>"
	nparams 2
	  param inout name "state" explicit_type "S"
	  param inout name "action" explicit_type "A"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the description of what each action does.

@return the description of what each action does.
"
      end

      operation 487170 "getStepCosts"
	cpp_inline package explicit_return_type "double"
	nparams 3
	  param inout name "state" explicit_type "S"
	  param inout name "action" explicit_type "A"
	  param inout name "stateDelta" explicit_type "S"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <b>step cost</b> of taking action <code>action</code> in state <code>state</code> to reach state
<code>stateDelta</code> denoted by c(s, a, s').
"
      end
    end

    class 190466 "Plan"
      visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a solution plan for an AND-OR search; according to page 135
AIMA3e, the plan must be \"a subtree that (1) has a goal node at every leaf,
(2) specifies one action at each of its OR nodes, and (3) includes every
outcome branch at each of its AND nodes.\" As demonstrated on page 136, this
plan can be implemented as a sequence of two steps where the first
is an action (corresponding to one OR node) and the second is a list
of if-state-then-plan statements (corresponding to an AND node). Here, we use a
list of action steps instead of just one action. This allows to simplify conditioned
steps with just one if-statement and supports a clean representation of empty plans.

@author Ruediger Lunde
@author Andrew Brown
"
      attribute 196866 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 196994 "actionSteps"
	private explicit_type "A"
	init_value " new LinkedList<>()"
	stereotype "List"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 239106 // ifStatements (<unidirectional association>)
	relation 239106 --->
	  stereotype "List"
	  a role_name "ifStatements" init_value " new LinkedList<>()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}<S, A>> ${name}${value};
"
	    classrelation_ref 239106 // ifStatements (<unidirectional association>)
	  b parent class_ref 198658 // IfStatement
      end

      operation 487554 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 487682 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of steps of this plan. "
      end

      operation 487810 "isActionStep"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param in name "step" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the specified step (between 0 and size()-1) is an action step or
a conditional step.
"
      end

      operation 487938 "getAction"
	cpp_inline public explicit_return_type "A"
	nparams 1
	  param in name "step" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the corresponding action for the given action step. "
      end

      operation 488066 "getPlan"
	cpp_inline public return_type class_ref 190466 // Plan
	nparams 2
	  param in name "step" explicit_type "int"
	  param inout name "state" explicit_type "S"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S, A> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Evaluates the specified conditional step and returns a plan of the first if-statement which matches
the given state.
@param step A conditional step (last step in the plan).
@param state The state to be matched.
@return A plan or null if no match was found.
"
      end

      operation 488194 "prepend"
	cpp_inline public return_type class_ref 190466 // Plan
	nparams 1
	  param inout name "action" explicit_type "A"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S, A> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prepend an action to the plan and return itself.

@param action
           the action to be prepended to this plan.
@return this plan with action prepended to it.
"
      end

      operation 488322 "addIfStatement"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "state" explicit_type "S"
	  param inout name "plan" type class_ref 190466 // Plan
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<S, A> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds an if-state-then-plan statement at the end of the plan. "
      end

      operation 488450 "toString"
	cpp_inline public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of this plan.

@return A string representation of this plan.
"
      end

      class 198658 "IfStatement"
	visibility private 
	nformals 2
	formal name "S" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "A" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 197122 "state"
	  package explicit_type "S"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 239234 // plan (<unidirectional association>)
	  relation 239234 --->
	    a role_name "plan" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<S, A> ${name}${value};
"
	      classrelation_ref 239234 // plan (<unidirectional association>)
	    b parent class_ref 190466 // Plan
	end

	operation 488578 "IfStatement"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "state" explicit_type "S"
	    param inout name "plan" type class_ref 190466 // Plan
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<S, A> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 488706 "testCondition"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 1
	    param inout name "state" explicit_type "S"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 488834 "getPlan"
	  cpp_inline package return_type class_ref 190466 // Plan
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S, A> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 488962 "toString"
	  cpp_inline public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Return string representation of this if-state-then-plan statement.

@return A string representation of this if-state-then-plan statement.
"
	end
      end
    end

    class 198402 "AndOrSearch"
      visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): Figure 4.11, page
136.<br>
<br>

<pre>
<code>
function AND-OR-GRAPH-SEARCH(problem) returns a conditional plan, or failure
  OR-SEARCH(problem.INITIAL-STATE, problem, [])

---------------------------------------------------------------------------------

function OR-SEARCH(state, problem, path) returns a conditional plan, or failure
  if problem.GOAL-TEST(state) then return the empty plan
  if state is on path then return failure
  for each action in problem.ACTIONS(state) do
      plan <- AND-SEARCH(RESULTS(state, action), problem, [state | path])
      if plan != failure then return [action | plan]
  return failure

---------------------------------------------------------------------------------

function AND-SEARCH(states, problem, path) returns a conditional plan, or failure
  for each s<sub>i</sub> in states do
     plan<sub>i</sub> <- OR-SEARCH(s<sub>i</sub>, problem, path)
     if plan<sub>i</sub> = failure then return failure
  return [if s<sub>1</sub> then plan<sub>1</sub>
          else if s<sub>2</sub> then plan<sub>2</sub> ...
          else if s<sub>n-1</sub> then plan<sub>n-1</sub>
          else plan<sub>n</sub>]
</code>
</pre>

Figure 4.11 An algorithm for searching AND-OR graphs generated by
nondeterministic environments. It returns a conditional plan that reaches a
goal state in all circumstances. (The notation [x | l] refers to the list
formed by adding object x to the front of the list l.)<br>
<br>
Note: Unfortunately, this class cannot implement the interface SearchForActions
(core.search.framework.SearchForActions) because SearchForActions.search() returns a list of
Actions to perform, whereas a nondeterministic search must return a Plan.

@author Andrew Brown
@author Ruediger Lunde
"
      attribute 196610 "expandedNodes"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 485890 "search"
	cpp_inline public return_type class_ref 190466 // Plan
	nparams 1
	  param inout name "problem" type class_ref 190338 // NondeterministicProblem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Optional<${type}<S, A>> ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches through state space and returns a conditional plan for the given
problem. The conditional plan is a list of either an action or an if-then
construct (consisting of a list of states and consequent actions). The
final product, when printed, resembles the contingency plan on page 134.

This function is equivalent to the following on page 136:

<pre>
<code>
function AND-OR-GRAPH-SEARCH(problem) returns a conditional plan, or failure
  OR-SEARCH(problem.INITIAL-STATE, problem, [])
</code>
</pre>

@return a conditional plan or empty on failure
"
      end

      operation 486018 "orSearch"
	cpp_inline public return_type class_ref 190466 // Plan
	nparams 3
	  param inout name "state" explicit_type "S"
	  param inout name "problem" type class_ref 190338 // NondeterministicProblem
	  param inout name "path" type class_ref 198530 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S, A> ${name}${(}${t0} ${p0}, ${t1}<S, A> ${p1}, ${t2}<S> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a conditional plan or null on failure; this function is
equivalent to the following on page 136:

<pre>
<code>
function OR-SEARCH(state, problem, path) returns a conditional plan, or failure
  if problem.GOAL-TEST(state) then return the empty plan
  if state is on path then return failure
  for each action in problem.ACTIONS(state) do
      plan <- AND-SEARCH(RESULTS(state, action), problem, [state | path])
      if plan != failure then return [action | plan]
  return failure
</code>
</pre>

@return a conditional plan or null on failure
"
      end

      operation 486146 "andSearch"
	cpp_inline public return_type class_ref 190466 // Plan
	nparams 3
	  param inout name "states" explicit_type "List<S>"
	  param inout name "problem" type class_ref 190338 // NondeterministicProblem
	  param inout name "path" type class_ref 198530 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S, A> ${name}${(}${t0} ${p0}, ${t1}<S, A> ${p1}, ${t2}<S> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a conditional plan or null on failure; this function is
equivalent to the following on page 136:

<pre>
<code>
function AND-SEARCH(states, problem, path) returns a conditional plan, or failure
  for each s<sub>i</sub> in states do
     plan<sub>i</sub> <- OR-SEARCH(s<sub>i</sub>, problem, path)
     if plan<sub>i</sub> = failure then return failure
  return [if s<sub>1</sub> then plan<sub>1</sub>
          else if s<sub>2</sub> then plan<sub>2</sub> ...
          else if s<sub>n-1</sub> then plan<sub>n-1</sub>
          else plan<sub>n</sub>]
</code>
</pre>

@param states
@param problem
@param path
@return a conditional plan or null on failure
"
      end

      operation 486274 "getMetrics"
	cpp_inline public return_type class_ref 133634 // Metrics
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the metrics of the node expander.

@return all the metrics of the node expander.
"
      end
    end

    class 198530 "Path"
      visibility public 
      nformals 1
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents the path the agent travels through the AND-OR tree (see figure
4.10, page 135, AIMA3e).

@author Andrew Brown
@author Ruediger Lunde
"
      classrelation 238978 // <realization>
	relation 238978 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}<S>"
	    classrelation_ref 238978 // <realization>
	  b parent class_ref 195074 // LinkedList
      end

      operation 487298 "append"
	cpp_inline public return_type class_ref 198530 // Path
	nparams 1
	  param inout name "state" explicit_type "S"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new path containing this path's current states followed by the provided additional state.

@param state
           the state to be prepended.
@return a new Path that contains the passed in state along with this
        path's current states.
"
      end

      operation 487426 "prepend"
	cpp_inline public return_type class_ref 198530 // Path
	nparams 1
	  param inout name "state" explicit_type "S"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new path containing the provided additional state followed by this path's current states.

@param state
           the state to be prepended.
@return a new Path that contains the passed in state along with this
        path's current states.
"
      end
    end
  end

  deploymentview 129922 "nondeterministic"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 138626 "ResultsFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 142338 // ResultsFunction
      end
    end

    artifact 186626 "AndOrSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.Metrics;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
${definition}"
      associated_elems
	class_ref 198402 // AndOrSearch
      end
    end

    artifact 186754 "NondeterministicProblem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.problem.ActionsFunction;
import aima.core.search.framework.problem.GoalTest;
import aima.core.search.framework.problem.StepCostFunction;
import java.util.List;
${definition}"
      associated_elems
	class_ref 190338 // NondeterministicProblem
      end
    end

    artifact 186882 "Path"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.LinkedList;
${definition}"
      associated_elems
	class_ref 198530 // Path
      end
    end

    artifact 187010 "Plan"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.LinkedList;
import java.util.List;
${definition}"
      associated_elems
	class_ref 190466 // Plan
      end
    end
  end
end
