class ConnectFourState
!!!152066.java!!!	ConnectFourState(in rows : int, in cols : int)
		utility = -1;
		this.cols = cols;
		board = new byte[rows * cols];
!!!152194.java!!!	getRows() : int
		return board.length / cols;
!!!152322.java!!!	getCols() : int
		return cols;
!!!152450.java!!!	getUtility() : double
		return utility;
!!!152578.java!!!	getPlayerNum(in row : int, in col : int) : int
		return board[row * cols + col] & 3;
!!!152706.java!!!	getPlayerToMove() : int
		return moveCount % 2 + 1;
!!!152834.java!!!	getMoves() : int
		return moveCount;
!!!152962.java!!!	dropDisk(in col : int) : void
		int playerNum = getPlayerToMove();
		int row = getFreeRow(col);
		if (row != -1) {
			moveCount++;
			if (moveCount == board.length)
				utility = 0.5;
			if (isWinPositionFor(row, col, 1)) {
				winPositions1--;
				if (playerNum == 1)
					utility = 1.0;
			}
			if (isWinPositionFor(row, col, 2)) {
				winPositions2--;
				if (playerNum == 2)
					utility = 0.0;
			}
			board[row * cols + col] = (byte) playerNum;
			if (utility == -1)
				analyzeWinPositions(row, col);
		}
!!!153090.java!!!	getFreeRow(in col : int) : int
		for (int row = getRows() - 1; row >= 0; row--)
			if (getPlayerNum(row, col) == 0)
				return row;
		return -1;
!!!153218.java!!!	isWinMoveFor(in col : int, in playerNum : int) : boolean
		return isWinPositionFor(getFreeRow(col), col, playerNum);
!!!153346.java!!!	isWinPositionFor(in row : int, in col : int, in playerNum : int) : boolean
		return (board[row * cols + col] & playerNum * 4) > 0;
!!!153474.java!!!	setWinPositionFor(in row : int, in col : int, in playerNum : int) : void
		if (playerNum == 1) {
			if (!isWinPositionFor(row, col, 1))
				winPositions1++;
		} else if (playerNum == 2) {
			if (!isWinPositionFor(row, col, 2))
				winPositions2++;
		} else {
			throw new IllegalArgumentException("Wrong player number.");
		}
		board[row * cols + col] |= playerNum * 4;
!!!153602.java!!!	analyzeWinPositions(in moveRow : int, in moveCol : int) : void
		final int[] rowIncr = new int[] { 1, 0, 1, 1 };
		final int[] colIncr = new int[] { 0, 1, -1, 1 };
		int playerNum = getPlayerNum(moveRow, moveCol);
		WinPositionInfo[] wInfo = new WinPositionInfo[] {
				new WinPositionInfo(), new WinPositionInfo() };
		for (int i = 0; i < 4; i++) {
			int rIncr = rowIncr[i];
			int cIncr = colIncr[i];
			int diskCount = 1;

			for (int j = 0; j < 2; j++) {
				WinPositionInfo wInf = wInfo[j];
				wInf.clear();
				int rBound = rIncr > 0 ? getRows() : -1;
				int cBound = cIncr > 0 ? getCols() : -1;

				int row = moveRow + rIncr;
				int col = moveCol + cIncr;
				while (row != rBound && col != cBound) {
					int plNum = getPlayerNum(row, col);
					if (plNum == playerNum) {
						if (wInf.hasData())
							wInf.diskCount++;
						else
							diskCount++;
					} else if (plNum == 0) {
						if (!wInf.hasData()) {
							wInf.row = row;
							wInf.col = col;
						} else {
							break;
						}
					} else {
						break;
					}
					row += rIncr;
					col += cIncr;
				}
				rIncr = -rIncr;
				cIncr = -cIncr;
			}
			for (int j = 0; j < 2; j++) {
				WinPositionInfo wInf = wInfo[j];
				if (wInf.hasData() && diskCount + wInf.diskCount >= 3) {
					setWinPositionFor(wInf.row, wInf.col, playerNum);
				}
			}
		}
!!!153730.java!!!	analyzePotentialWinPositions(inout action : Integer) : int
		final int[] rowIncr = new int[] { 1, 0, 1, 1 };
		final int[] colIncr = new int[] { 0, 1, -1, 1 };
		int moveCol = action;
		int moveRow = getFreeRow(moveCol);

		int playerNum = getPlayerToMove();
		int result = 0;
		for (int i = 0; i < 4; i++) {
			int rIncr = rowIncr[i];
			int cIncr = colIncr[i];
			int posCountSum = 0;

			for (int j = 0; j < 2; j++) {
				int rBound = rIncr > 0 ? getRows() : -1;
				int cBound = cIncr > 0 ? getCols() : -1;
				int posCount = 0;

				int row = moveRow + rIncr;
				int col = moveCol + cIncr;
				while (row != rBound && col != cBound && posCount < 3) {
					int plNum = getPlayerNum(row, col);
					if (plNum == 3 - playerNum)
						break;
					posCount++;
					row += rIncr;
					col += cIncr;
				}
				posCountSum += posCount;
				rIncr = -rIncr;
				cIncr = -cIncr;
			}
			if (posCountSum >= 3)
				result += posCountSum;
		}
		return result;
!!!153858.java!!!	clone() : ConnectFourState
		ConnectFourState result = null;
		try {
			result = (ConnectFourState) super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		result.board = board.clone();
		return result;
!!!153986.java!!!	hashCode() : int
		int result = 0;
		for (byte aBoard : board) result = result * 7 + aBoard + 1;
		return result;
!!!154114.java!!!	equals(inout obj : Object) : boolean
		if (obj != null && getClass() == obj.getClass()) {
			ConnectFourState s = (ConnectFourState) obj;
			for (int i = 0; i < board.length; i++)
				if (board[i] != s.board[i])
					return false;
			return true;
		}
		return false;
