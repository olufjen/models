format 223
"util" // aima::core::util
  revision 1
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\aima/core/util/"
  java_package "aima.core.util"
  package_ref 128770 // datastructure

  package_ref 130434 // math

  classview 133378 "util"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 154498 "FrequencyCounter"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A utility class for keeping counts of objects. Will return 0 for any object
for which it has not recorded a count against.

@author Ravi Mohan
@author Mike Stampone
"
      attribute 199682 "counter"
	private explicit_type "T, Integer"
	stereotype "Map"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 199810 "total"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 497282 "FrequencyCounter"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default Constructor.
"
      end

      operation 497410 "getCount"
	cpp_inline public explicit_return_type "Integer"
	nparams 1
	  param inout name "key" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the count to which the specified key is mapped in this frequency
counter, or 0 if the map contains no mapping for this key.

@param key
           the key whose associated count is to be returned.

@return the count to which this map maps the specified key, or 0 if the
        map contains no mapping for this key.
"
      end

      operation 497538 "incrementFor"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "key" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increments the count to which the specified key is mapped in this
frequency counter, or puts 1 if the map contains no mapping for this key.

@param key
           the key whose associated count is to be returned.
"
      end

      operation 497666 "probabilityOf"
	cpp_inline public explicit_return_type "double"
	nparams 1
	  param inout name "key" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the count to which the specified key is mapped in this frequency
counter, divided by the total of all counts.

@param key
           the key whose associated count is to be divided.

@return the count to which this map maps the specified key, divided by
        the total count.
"
      end

      operation 497794 "getStates"
	cpp_inline public explicit_return_type "Set<T>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return a set of objects for which frequency counts have been recorded.
"
      end

      operation 497922 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all the currently recorded frequency counts.
"
      end

      operation 498050 "toString"
	cpp_inline public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 155266 "Randomizer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "@author Ravi Mohan

"
      operation 498178 "nextDouble"
	public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return a double value, chosen (approximately) uniformly from the range
        [0.0d, 1.0d), i.e. 0.0d (inclusive) to 1.0d (exclusive).
"
      end
    end

    class 199810 "ArrayIterator"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Iterates efficiently through an array.

@author Ruediger Lunde
"
      classrelation 241922 // <realization>
	relation 241922 -_-|>
	  a public
	    java "${type}<T>"
	    classrelation_ref 241922 // <realization>
	  b parent class_ref 199938 // Iterator
      end

      attribute 198914 "values"
	package explicit_type "T"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 199042 "counter"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 494594 "ArrayIterator"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "values" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 494722 "hasNext"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 494850 "next"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 494978 "remove"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 200066 "CancellableThread"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Implements a thread with an additional flag indicating cancellation.

@author Ruediger Lunde
@author Mike Stampone
"
      classrelation 242050 // <generalisation>
	relation 242050 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 242050 // <generalisation>
	  b parent class_ref 200194 // Thread
      end

      operation 495106 "CancellableThread"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 495234 "CancellableThread"
	public explicit_return_type ""
	nparams 1
	  param inout name "runnable" explicit_type "Runnable"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 495362 "currIsCancelled"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the current thread is cancelled

@return <code>true</code> if the current thread is cancelled
"
      end

      attribute 199170 "isCancelled"
	volatile private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 495490 "isCancelled"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this thread is cancelled

@return <code>true</code> if this thread is cancelled
"
      end

      operation 495618 "cancel"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels this thread
"
      end
    end

    class 200322 "DisjointSets"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A basic implementation of a disjoint-set data structure for maintaining a
collection of disjoint dynamic sets. This is based on the algorithm
description in Chapter 21 of 'Introduction to Algorithm 2nd Edition' (by
Cormen, Leriserson, Rivest, and Stein) for Disjoint-sets taking into account
some of the heuristic ideas described. However, this implementation relies on
the constant time performance of the HashMap's get and put operations, and
HashSet's add, remove, contains and size operations as an alternative
implementation approach. This provides a cleaner separation between the
elements and the implementation (i.e. the idea of a representative for a
particular disjoint set is not used) and an easier to use API (i.e. direct
access to the disjoint set that an element belongs to and no need to
understand how the internals work with respect to a representative) but will
not perform as fast (proper analysis required but likely O(m + n lg n) as
detailed in Theorem 21.1 on page 504 of 'Introduction to Algorithm 2nd
Edition').

Note: the internal implementation of this class can likely be improved to use
all the techniques outlined in section 21.3 in order to get optimal
performance.

@author Ciaran O'Reilly

@param <E>
           the type of elements to be contained by the disjoint sets.
"
      attribute 199298 "elementToSet"
	private explicit_type "E, Set<E>"
	init_value " new LinkedHashMap<>()"
	stereotype "Map"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 199426 "disjointSets"
	private explicit_type "Set<E>"
	init_value " new LinkedHashSet<>()"
	stereotype "Set"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 495746 "DisjointSets"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default Constructor.
"
      end

      operation 495874 "DisjointSets"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "initialElements" explicit_type "Collection<E>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param initialElements
           a collection of elements, each of which will be assigned to
           their own disjoint set via makeSet().
"
      end

      operation 496002 "DisjointSets"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "E...elements"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param elements
           a collection of elements, each of which will be assigned to
           their own disjoint set via makeSet().
"
      end

      operation 496130 "makeSet"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a disjoint set for the element passed in. This method should be
called for all elements before any of the other API methods are called
(i.e. construct a disjoint set for each element first and then union them
together as appropriate).

@param element
           the element for which a new disjoint set should be
           constructed.
"
      end

      operation 496258 "union"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "element1" explicit_type "E"
	  param inout name "element2" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Union two disjoint sets together if the arguments currently belong to two
different sets.

@throws IllegalArgumentException
            if element1 or element 2 is not already associated with a
            disjoint set (i.e. makeSet() was not called for the argument
            beforehand).
"
      end

      operation 496386 "find"
	cpp_inline public explicit_return_type "Set<E>"
	nparams 1
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the disjoint set that an element belongs to.

@param element
           the element whose disjoint set is being sought.
@return the disjoint set for the element or null if makeSet(element) was
        not previously called.
"
      end

      operation 496514 "getElementToDisjointSet"
	cpp_inline public explicit_return_type "Map<E, Set<E>>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return a map for each element and the corresponding disjoint set that it
        belongs to.
"
      end

      operation 496642 "getDisjointSets"
	cpp_inline public explicit_return_type "Set<Set<E>>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return the set of disjoint sets being maintained.
"
      end

      operation 496770 "numberDisjointSets"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return the number of disjoint sets.
"
      end

      operation 496898 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all the disjoint sets.
"
      end

      class 200450 "IdentityHashSet"
	visibility private 
	nformals 1
	formal name "H" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 242178 // <realization>
	  relation 242178 -_-|>
	    a public
	      java "${type}<H>"
	      classrelation_ref 242178 // <realization>
	    b parent class_ref 200578 // HashSet
	end

	attribute 199554 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 1L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 497026 "hashCode"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 497154 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 200706 "JavaRandomizer"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Implementation of the Randomizer Interface using Java's java.util.Random
class.

@author Ravi Mohan

"
      classrelation 242306 // <realization>
	relation 242306 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 242306 // <realization>
	  b parent class_ref 155266 // Randomizer
      end

      attribute 199938 "_r"
	class_attribute private explicit_type "Random"
	init_value " new Random()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 200066 "r"
	private explicit_type "Random"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 498306 "JavaRandomizer"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 498434 "JavaRandomizer"
	public explicit_return_type ""
	nparams 1
	  param inout name "r" explicit_type "Random"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 498562 "nextDouble"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " START-Randomizer"
      end
    end

    class 200834 "MockRandomizer"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Mock implementation of the Randomizer interface so that the set of Random
numbers returned are in fact predefined.

@author Ravi Mohan

"
      classrelation 242434 // <realization>
	relation 242434 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 242434 // <realization>
	  b parent class_ref 155266 // Randomizer
      end

      attribute 200194 "values"
	private explicit_type "double"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 200322 "index"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 498690 "MockRandomizer"
	public explicit_return_type ""
	nparams 1
	  param inout name "values" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@param values
           the set of predetermined random values to loop over.
"
      end

      operation 498818 "nextDouble"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " START-Randomizer"
      end
    end

    class 200962 "PowersOf2"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Java has standard interface for implementing iterators. The \"foreach\"
construction makes it easy to loop over objects that provide the
java.lang.Iterable interface. However Java does not have generators built
into the language. This means that even a simple iterator has a lot of
boilerplate code.

@author Frederik Andersen
"
      classrelation 242562 // <realization>
	relation 242562 -_-|>
	  a public
	    java "${type}<Integer>"
	    classrelation_ref 242562 // <realization>
	  b parent class_ref 192770 // Iterable
      end

      operation 498946 "iterator"
	public explicit_return_type "Iterator<Integer>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 499074 "main"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "args" explicit_type "String"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 201090 "SetOps"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Note: This code is based on - <a href=
\"http://download.oracle.com/javase/tutorial/collections/interfaces/set.html\"
>Java Tutorial: The Set Interface</a> <br>

Using LinkedHashSet, even though slightly slower than HashSet, in order to
ensure order is always respected (i.e. if called with TreeSet or
LinkedHashSet implementations).

@author Ciaran O'Reilly
@author Ravi Mohan
"
      operation 499202 "union"
	class_operation public explicit_return_type "Set<T>"
	nparams 2
	  param inout name "s1" explicit_type "Set<T>"
	  param inout name "s2" explicit_type "Set<T>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@param <T>
@param s1
@param s2
@return the union of s1 and s2. (The union of two sets is the set
        containing all of the elements contained in either set.)
"
      end

      operation 499330 "intersection"
	class_operation public explicit_return_type "Set<T>"
	nparams 2
	  param inout name "s1" explicit_type "Set<T>"
	  param inout name "s2" explicit_type "Set<T>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@param <T>
@param s1
@param s2
@return the intersection of s1 and s2. (The intersection of two sets is
        the set containing only the elements common to both sets.)
"
      end

      operation 499458 "difference"
	class_operation public explicit_return_type "Set<T>"
	nparams 2
	  param inout name "s1" explicit_type "Set<T>"
	  param inout name "s2" explicit_type "Set<T>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@param <T>
@param s1
@param s2
@return the (asymmetric) set difference of s1 and s2. (For example, the
        set difference of s1 minus s2 is the set containing all of the
        elements found in s1 but not in s2.)
"
      end
    end

    class 201218 "Tasks"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Simple facade for cancellable task management.

@author Ruediger Lunde
"
      operation 499586 "executeInBackground"
	class_operation public explicit_return_type "Thread"
	nparams 1
	  param inout name "task" explicit_type "Runnable"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " simple API to execute cancellable tasks in background - functionality is provided by three functional
 attributes
 Executes a given task in background. "
      end

      operation 499714 "cancel"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "thread" explicit_type "Thread"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Cancels the task which is executed in the given thread. "
      end

      operation 499842 "currIsCancelled"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the current task has been cancelled. Calls of this method can be placed anywhere in the code.
They provide safe exits from time-consuming loops if the user is not interested in the result anymore. "
      end

      attribute 200450 "startThreadFn"
	class_attribute private explicit_type "Runnable, Thread"
	init_value "
            task -> {
                Thread result = new CancellableThread(task);
                result.setDaemon(true);
                result.start();
                return result;
            }"
	stereotype "Function"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the default implementation uses CancellableThread
"
      end

      attribute 200578 "cancelFn"
	class_attribute private explicit_type "Thread"
	init_value "
            thread -> {if (thread instanceof CancellableThread) ((CancellableThread) thread).cancel();}"
	stereotype "Consumer"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 200706 "isCancelledFn"
	class_attribute private explicit_type "Boolean"
	init_value " CancellableThread::currIsCancelled"
	stereotype "Supplier"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 499970 "setStartThreadFn"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "startThreadFn" explicit_type "Function<Runnable, Thread>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " functionality can be changed at runtime"
      end

      operation 500098 "setCancelFn"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "cancelFn" explicit_type "Consumer<Thread>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 500226 "setIsCancelledFn"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "isCancelledFn" explicit_type "Supplier<Boolean>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 201346 "Util"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "@author Ravi Mohan
@author Ruediger Lunde

"
      attribute 200834 "NO"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"No\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 200962 "YES"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"Yes\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 201090 "random"
	class_attribute private explicit_type "Random"
	init_value " new Random()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 201218 "EPSILON"
	class_attribute const_attribute private explicit_type "double"
	init_value " 0.000000000001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 500354 "first"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "l" explicit_type "List<T>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the first element from a list.

@param l
           the list the first element is to be extracted from.
@return the first element of the passed in list.
"
      end

      operation 500482 "rest"
	class_operation public explicit_return_type "List<T>"
	nparams 1
	  param inout name "l" explicit_type "List<T>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a sublist of all of the elements in the list except for first.

@param l
           the list the rest of the elements are to be extracted from.
@return a list of all of the elements in the passed in list except for
        the first element.
"
      end

      operation 500610 "create"
	class_operation public explicit_return_type "Map<K, V>"
	nparams 2
	  param inout name "keys" explicit_type "Collection<K>"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a Map<K, V> with the passed in keys having their values
initialized to the passed in value.

@param keys
           the keys for the newly constructed map.
@param value
           the value to be associated with each of the maps keys.
@return a map with the passed in keys initialized to value.
"
      end

      operation 500738 "createSet"
	class_operation public explicit_return_type "Set<V>"
	nparams 1
	  param inout name "" explicit_type "V...values"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Create a set for the provided values.
@param values
       the sets initial values.
@return a Set of the provided values.
"
      end

      operation 500866 "selectRandomlyFromList"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "l" explicit_type "List<T>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Randomly select an element from a list.

@param <T>
           the type of element to be returned from the list l.
@param l
           a list of type T from which an element is to be selected
           randomly.
@return a randomly selected element from l.
"
      end

      operation 500994 "selectRandomlyFromSet"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "set" explicit_type "Set<T>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 501122 "randomInt"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "bound" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 501250 "randomBoolean"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 501378 "normalize"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "probDist" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 501506 "normalize"
	class_operation public explicit_return_type "List<Double>"
	nparams 1
	  param inout name "values" explicit_type "List<Double>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 501634 "min"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "j" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 501762 "max"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "j" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 501890 "max"
	class_operation public explicit_return_type "int"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "j" explicit_type "int"
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502018 "min"
	class_operation public explicit_return_type "int"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "j" explicit_type "int"
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502146 "mode"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "l" explicit_type "List<T>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502274 "yesno"
	class_operation public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502402 "log2"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502530 "information"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "probabilities" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502658 "removeFrom"
	class_operation public explicit_return_type "List<T>"
	nparams 2
	  param inout name "list" explicit_type "List<T>"
	  param inout name "member" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502786 "sumOfSquares"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "list" explicit_type "List<T>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Number> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502914 "ntimes"
	class_operation public explicit_return_type "String"
	nparams 2
	  param in name "s" explicit_type "String"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503042 "checkForNanOrInfinity"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503170 "randomNumberBetween"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "j" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503298 "calculateMean"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "lst" explicit_type "List<Double>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503426 "calculateStDev"
	class_operation public explicit_return_type "double"
	nparams 2
	  param inout name "values" explicit_type "List<Double>"
	  param in name "mean" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503554 "normalizeFromMeanAndStdev"
	class_operation public explicit_return_type "List<Double>"
	nparams 3
	  param inout name "values" explicit_type "List<Double>"
	  param in name "mean" explicit_type "double"
	  param in name "stdev" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503682 "generateRandomDoubleBetween"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "lowerLimit" explicit_type "double"
	  param in name "upperLimit" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a random double between two limits. Both limits are inclusive.
@param lowerLimit the lower limit.
@param upperLimit the upper limit.
@return a random double bigger or equals {@code lowerLimit} and smaller or equals {@code upperLimit}.
"
      end

      operation 503810 "generateRandomFloatBetween"
	class_operation public explicit_return_type "float"
	nparams 2
	  param in name "lowerLimit" explicit_type "float"
	  param in name "upperLimit" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a random float between two limits. Both limits are inclusive.
@param lowerLimit the lower limit.
@param upperLimit the upper limit.
@return a random float bigger or equals {@code lowerLimit} and smaller or equals {@code upperLimit}.
"
      end

      operation 503938 "compareDoubles"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two doubles for equality.
@param a the first double.
@param b the second double.
@return true if both doubles contain the same value or the absolute deviation between them is below {@code EPSILON}.
"
      end

      operation 504066 "compareFloats"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "float"
	  param in name "b" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two floats for equality.
@param a the first floats.
@param b the second floats.
@return true if both floats contain the same value or the absolute deviation between them is below {@code EPSILON}.
"
      end
    end
  end

  deploymentview 138114 "util"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 188034 "ArrayIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
${definition}"
      associated_elems
	class_ref 199810 // ArrayIterator
      end
    end

    artifact 188162 "CancellableThread"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 200066 // CancellableThread
      end
    end

    artifact 188290 "DisjointSets"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 200322 // DisjointSets
      end
    end

    artifact 188418 "FrequencyCounter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 154498 // FrequencyCounter
      end
    end

    artifact 188546 "Randomizer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 155266 // Randomizer
      end
    end

    artifact 188674 "JavaRandomizer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Random;
${definition}"
      associated_elems
	class_ref 200706 // JavaRandomizer
      end
    end

    artifact 188802 "MockRandomizer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 200834 // MockRandomizer
      end
    end

    artifact 188930 "PowersOf2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
${definition}"
      associated_elems
	class_ref 200962 // PowersOf2
      end
    end

    artifact 189058 "SetOps"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.LinkedHashSet;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 201090 // SetOps
      end
    end

    artifact 189186 "Tasks"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 201218 // Tasks
      end
    end

    artifact 189314 "Util"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.util.stream.Collectors;
${definition}"
      associated_elems
	class_ref 201346 // Util
      end
    end
  end
end
