class ActionSchema
!!!348674.java!!!	ActionSchema(in name : String, inout variables : List<Term>, inout precondition : List<Literal>, inout effects : List<Literal>)
        if (variables == null)
            variables = new ArrayList<>();
        this.name = name;
        this.variables = variables;
        this.precondition = precondition;
        this.effects = effects;
        effectsNegativeLiterals = new ArrayList<>();
        effectsPositiveLiterals = new ArrayList<>();
        this.sortEffects();
!!!348802.java!!!	ActionSchema(in name : String, inout variables : List<Term>, in precondition : String, in effects : String)
        this(name, variables, Utils.parse(precondition), Utils.parse(effects));
!!!348930.java!!!	sortEffects() : void
        for (Literal effect :
                this.effects) {
            if (effect.isNegativeLiteral()) {
                effectsNegativeLiterals.add(effect);
            } else {
                effectsPositiveLiterals.add(effect);
            }

        }
!!!349058.java!!!	toString() : String
        String result = "Action(" + this.getName() + ")\n\tPRECOND:";
        for (Literal precond :
                getPrecondition()) {
            result = result + "^" + precond.toString();
        }
        result = result + "\n\tEFFECT:";
        for (Literal effect :
                getEffects()) {
            result = result + "^" + effect.toString();
        }
        return result;
!!!349186.java!!!	equals(inout obj : Object) : boolean
        if (this == obj)
            return true;
        if (!(obj instanceof ActionSchema))
            return false;
        return this.getName().equals(((ActionSchema) obj).getName()) &&
                this.getPrecondition().containsAll(((ActionSchema) obj).getPrecondition())
                && ((ActionSchema) obj).getPrecondition().containsAll(this.getPrecondition())
                && this.getEffects().containsAll(((ActionSchema) obj).getEffects())
                && ((ActionSchema) obj).getEffects().containsAll(this.getEffects());
!!!349314.java!!!	hashCode() : int
        int hashCode = 17;
        for (Literal preCo :
                this.getPrecondition()) {
            hashCode = 37 * hashCode + preCo.hashCode();
        }
        for (Literal effect :
                this.getEffects()) {
            hashCode = 37 * hashCode + effect.hashCode();
        }
        for (Term var :
                this.getVariables()) {
            hashCode = 37 * hashCode + var.hashCode();
        }
        return hashCode;
!!!349442.java!!!	getActionBySubstitution(inout constants : List<Constant>) : ActionSchema
        List<Literal> precondList = this.getPrecondition();
        List<Term> vars = this.getVariables();
        List<Literal> effectList = this.getEffects();
        List<Literal> newPrecond = new ArrayList<>();
        List<Literal> newEffects = new ArrayList<>();
        for (Literal precondition :
                precondList) {
            List<Term> newTerms = new ArrayList<>();
            for (Term variable :
                    precondition.getAtomicSentence().getArgs()) {
                if (variable instanceof Variable) {
                    newTerms.add(constants.get(vars.lastIndexOf(variable)));
                } else
                    newTerms.add(variable);
            }
            newPrecond.add(new Literal(new
                    Predicate(precondition.getAtomicSentence().getSymbolicName(),
                    newTerms), precondition.isNegativeLiteral()));
        }
        for (Literal effect :
                effectList) {
            List<Term> newTerms = new ArrayList<>();
            for (Term variable :
                    effect.getAtomicSentence().getArgs()) {
                if (variable instanceof Variable) {
                    newTerms.add(constants.get(vars.lastIndexOf(variable)));
                } else
                    newTerms.add(variable);
            }
            newEffects.add(new Literal(new
                    Predicate(effect.getAtomicSentence().getSymbolicName(),
                    newTerms), effect.isNegativeLiteral()));
        }
        return new ActionSchema(this.getName(), null, newPrecond, newEffects);
!!!349570.java!!!	getConstants() : Constant
        List<Constant> constants = new ArrayList<>();
        for (Constant constant :
                extractConstant(getPrecondition())) {
            if (!constants.contains(constant))
                constants.add(constant);
        }
        for (Constant constant :
                extractConstant(getEffects())) {
            if (!constants.contains(constant))
                constants.add(constant);
        }
        return constants;
!!!349698.java!!!	extractConstant(inout list : List<Literal>) : Constant
        List<Constant> result = new ArrayList<>();
        for (Literal literal :
                list) {
            for (Term term :
                    literal.getAtomicSentence().getArgs()) {
                if (term instanceof Constant && !list.contains(term))
                    result.add((Constant) term);
            }
        }
        return result;
!!!349826.java!!!	getName() : String
        return name;
!!!349954.java!!!	getVariables() : Term
        return variables;
!!!350082.java!!!	getPrecondition() : Literal
        return precondition;
!!!350210.java!!!	getEffects() : Literal
        return effects;
!!!350338.java!!!	getEffectsPositiveLiterals() : Literal
        return effectsPositiveLiterals;
!!!350466.java!!!	getEffectsNegativeLiterals() : Literal
        return effectsNegativeLiterals;
