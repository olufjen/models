class TaskExecutionPaneBuilder
!!!575362.java!!!	defineParameters(inout params : List<Parameter>) : void
		parameters.clear();
		parameters.addAll(params);
!!!575490.java!!!	defineStateView(inout stateView : Node) : void
		this.stateView = Optional.of(stateView);
!!!575618.java!!!	defineInitMethod(inout initMethod : Runnable) : void
		this.initMethod = Optional.of(initMethod);
!!!575746.java!!!	defineTaskMethod(inout taksMethod : Runnable) : void
		this.taskMethod = Optional.of(taksMethod);
!!!575874.java!!!	getResultFor(inout pane : BorderPane) : TaskExecutionPaneCtrl
		List<ComboBox<String>> combos = new ArrayList<>();
		parameters.add(createExecutionSpeedParam());
		for (Parameter param : parameters) {
			ComboBox<String> combo = new ComboBox<>();
			combo.setId(param.getName());
			combo.getItems().addAll(param.getValueNames());
			combo.getSelectionModel().select(param.getDefaultValueIndex());
			combos.add(combo);
		}

		Button executeBtn = new Button();

		Node[] tools = new Node[combos.size() + 2];
		for (int i = 0; i < combos.size() - 1; i++)
			tools[i] = combos.get(i);
		tools[combos.size() - 1] = new Separator();
		tools[combos.size() + 0] = combos.get(combos.size() - 1);
		tools[combos.size() + 1] = executeBtn;
		ToolBar toolBar = new ToolBar(tools);

		Label statusLabel = new Label();
		statusLabel.setMaxWidth(Double.MAX_VALUE);
		statusLabel.setAlignment(Pos.CENTER);
		statusLabel.setFont(Font.font(16));

		pane.setTop(toolBar);
		if (stateView.isPresent()) {
			if (stateView.get() instanceof Canvas) {
				// make canvas resizable
				Canvas canvas = (Canvas) stateView.get();
				Pane canvasPane = new Pane();
				canvasPane.getChildren().add(canvas);
				canvas.widthProperty().bind(canvasPane.widthProperty());
				canvas.heightProperty().bind(canvasPane.heightProperty());
				pane.setCenter(canvasPane);
				pane.setStyle("-fx-background-color: white");
			} else
				pane.setCenter(stateView.get());
		}

		pane.setBottom(statusLabel);

		if (!initMethod.isPresent())
			throw new IllegalStateException("No initialization method defined.");
		if (!taskMethod.isPresent())
			throw new IllegalStateException("No task method defined.");

		return new TaskExecutionPaneCtrl(parameters, combos, initMethod.get(), taskMethod.get(),
				executeBtn, statusLabel);
!!!576002.java!!!	createExecutionSpeedParam() : Parameter
		Parameter result = new Parameter
				(TaskExecutionPaneCtrl.PARAM_EXEC_SPEED, 20, 100, 400, 800, Integer.MAX_VALUE);
		result.setValueNames("VeryFast", "Fast", "Medium", "Slow", "StepMode");
		result.setDefaultValueIndex(2);
		return result;
