class MessageClassifier
!!!671746.java!!!	MessageClassifier()
    String nameOfDataset = "MessageClassificationProblem";

    // Create vector of attributes.
    ArrayList<Attribute> attributes = new ArrayList<Attribute>(2);

    // Add attribute for holding messages.
    attributes.add(new Attribute("Message", (ArrayList<String>) null));

    // Add class attribute.
    ArrayList<String> classValues = new ArrayList<String>(2);
    classValues.add("miss");
    classValues.add("hit");
    attributes.add(new Attribute("Class", classValues));

    // Create dataset with initial capacity of 100, and set index of class.
    m_Data = new Instances(nameOfDataset, attributes, 100);
    m_Data.setClassIndex(m_Data.numAttributes() - 1);
!!!671874.java!!!	updateData(in message : String, in classValue : String) : void
    // Make message into instance.
    Instance instance = makeInstance(message, m_Data);

    // Set class value for instance.
    instance.setClassValue(classValue);

    // Add instance to training data.
    m_Data.add(instance);

    m_UpToDate = false;
!!!672002.java!!!	classifyMessage(in message : String) : void
    // Check whether classifier has been built.
    if (m_Data.numInstances() == 0)
      throw new Exception("No classifier available.");

    // Check whether classifier and filter are up to date.
    if (!m_UpToDate) {
      // Initialize filter and tell it about the input format.
      m_Filter.setInputFormat(m_Data);

      // Generate word counts from the training data.
      Instances filteredData  = Filter.useFilter(m_Data, m_Filter);

      // Rebuild classifier.
      m_Classifier.buildClassifier(filteredData);

      m_UpToDate = true;
    }

    // Make separate little test set so that message
    // does not get added to string attribute in m_Data.
    Instances testset = m_Data.stringFreeStructure();

    // Make message into test instance.
    Instance instance = makeInstance(message, testset);

    // Filter instance.
    m_Filter.input(instance);
    Instance filteredInstance = m_Filter.output();

    // Get index of predicted class value.
    double predicted = m_Classifier.classifyInstance(filteredInstance);

    // Output class value.
    System.err.println("Message classified as : " +
		       m_Data.classAttribute().value((int) predicted));
!!!672130.java!!!	makeInstance(in text : String, inout data : Instances) : Instance
    // Create instance of length two.
    Instance instance = new DenseInstance(2);

    // Set value for message attribute
    Attribute messageAtt = data.attribute("Message");
    instance.setValue(messageAtt, messageAtt.addStringValue(text));

    // Give instance access to attribute information from the dataset.
    instance.setDataset(data);

    return instance;
!!!672258.java!!!	main(inout args : String [[]]) : void
    try {
      // Read message file into string.
      String messageName = Utils.getOption('m', args);
      if (messageName.length() == 0)
        throw new Exception("Must provide name of message file ('-m <file>').");
      FileReader m = new FileReader(messageName);
      StringBuffer message = new StringBuffer();
      int l;
      while ((l = m.read()) != -1)
	message.append((char) l);
      m.close();

      // Check if class value is given.
      String classValue = Utils.getOption('c', args);

      // If model file exists, read it, otherwise create new one.
      String modelName = Utils.getOption('t', args);
      if (modelName.length() == 0)
	throw new Exception("Must provide name of model file ('-t <file>').");
      MessageClassifier messageCl;
      try {
	messageCl = (MessageClassifier) SerializationHelper.read(modelName);
      }
      catch (FileNotFoundException e) {
	messageCl = new MessageClassifier();
      }

      // Check if there are any options left
      Utils.checkForRemainingOptions(args);

      // Process message.
      if (classValue.length() != 0)
        messageCl.updateData(message.toString(), classValue);
      else
        messageCl.classifyMessage(message.toString());

      // Save message classifier object only if it was updated.
      if (classValue.length() != 0)
	SerializationHelper.write(modelName, messageCl);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
