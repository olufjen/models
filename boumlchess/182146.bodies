class FullJointDistributionModel
!!!416002.java!!!	FullJointDistributionModel(inout values : double [[]], inout  : RandomVariable...vars)
		if (null == vars) {
			throw new IllegalArgumentException(
					"Random Variables describing the model's representation of the World need to be specified.");
		}

		distribution = new ProbabilityTable(values, vars);

		representation = new LinkedHashSet<RandomVariable>();
		for (int i = 0; i < vars.length; i++) {
			representation.add(vars[i]);
		}
		representation = Collections.unmodifiableSet(representation);
!!!416130.java!!!	isValid() : boolean
		// Handle rounding
		return Math.abs(1 - distribution.getSum()) <= ProbabilityModel.DEFAULT_ROUNDING_THRESHOLD;
!!!416258.java!!!	prior(inout  : Proposition...phi) : double
		return probabilityOf(ProbUtil.constructConjunction(phi));
!!!416386.java!!!	posterior(inout phi : Proposition, inout  : Proposition...evidence) : double

		Proposition conjEvidence = ProbUtil.constructConjunction(evidence);

		// P(A | B) = P(A AND B)/P(B) - (13.3 AIMA3e)
		Proposition aAndB = new ConjunctiveProposition(phi, conjEvidence);
		double probabilityOfEvidence = prior(conjEvidence);
		if (0 != probabilityOfEvidence) {
			return prior(aAndB) / probabilityOfEvidence;
		}

		return 0;
!!!416514.java!!!	getRepresentation() : RandomVariable
		return representation;
!!!416642.java!!!	priorDistribution(inout  : Proposition...phi) : CategoricalDistribution
		return jointDistribution(phi);
!!!416770.java!!!	posteriorDistribution(inout phi : Proposition, inout  : Proposition...evidence) : CategoricalDistribution

		Proposition conjEvidence = ProbUtil.constructConjunction(evidence);

		// P(A | B) = P(A AND B)/P(B) - (13.3 AIMA3e)
		CategoricalDistribution dAandB = jointDistribution(phi, conjEvidence);
		CategoricalDistribution dEvidence = jointDistribution(conjEvidence);

		return dAandB.divideBy(dEvidence);
!!!416898.java!!!	jointDistribution(inout  : Proposition...propositions) : CategoricalDistribution
		ProbabilityTable d = null;
		final Proposition conjProp = ProbUtil
				.constructConjunction(propositions);
		final LinkedHashSet<RandomVariable> vars = new LinkedHashSet<RandomVariable>(
				conjProp.getUnboundScope());

		if (vars.size() > 0) {
			RandomVariable[] distVars = new RandomVariable[vars.size()];
			vars.toArray(distVars);

			final ProbabilityTable ud = new ProbabilityTable(distVars);
			final Object[] values = new Object[vars.size()];

			ProbabilityTable.Iterator di = new ProbabilityTable.Iterator() {

				public void iterate(Map<RandomVariable, Object> possibleWorld,
						double probability) {
					if (conjProp.holds(possibleWorld)) {
						int i = 0;
						for (RandomVariable rv : vars) {
							values[i] = possibleWorld.get(rv);
							i++;
						}
						int dIdx = ud.getIndex(values);
						ud.setValue(dIdx, ud.getValues()[dIdx] + probability);
					}
				}
			};

			distribution.iterateOverTable(di);

			d = ud;
		} else {
			// No Unbound Variables, therefore just return
			// the singular probability related to the proposition.
			d = new ProbabilityTable();
			d.setValue(0, prior(propositions));
		}
		return d;
!!!417026.java!!!	probabilityOf(in phi : Proposition) : double
		final double[] probSum = new double[1];
		ProbabilityTable.Iterator di = new ProbabilityTable.Iterator() {
			public void iterate(Map<RandomVariable, Object> possibleWorld,
					double probability) {
				if (phi.holds(possibleWorld)) {
					probSum[0] += probability;
				}
			}
		};

		distribution.iterateOverTable(di);

		return probSum[0];
