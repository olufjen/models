class MinimalConsistentDet
!!!226946.java!!!	minimalConsistentDet(inout e : List<LogicalExample>, inout a : Set<String>) : Set<String>
        // for i = 0 to n do
        for (int i = 0; i < a.size(); i++) {
            // for each subset Ai of A of size i do
            for (List<String> subset :
                    CombinationGenerator.generateCombinations(new ArrayList<>(a), i)) {
                // if Consistent-Det?(Ai, E) then return Ai
                if (consistentDet(subset, e)) {
                    return new HashSet<>(subset);
                }
            }
        }
        return new HashSet<>();
!!!227074.java!!!	consistentDet(inout attributes : List<String>, inout examples : List<LogicalExample>) : boolean
        //  local variables: H, a hash table
        HashMap<List<String>, String> hashTable = new HashMap<>();
        // for each example e in E do
        for (LogicalExample e :
                examples) {
            List<String> attributeValues = new ArrayList<>();
            for (String attribute : attributes) {
                attributeValues.add(e.getAttributes().get(attribute));
            }
            // if some example in H has the same values as e for the attributes A
            if (hashTable.containsKey(attributeValues)) {
                // but a different classification then return false
                if (!hashTable.get(attributeValues).equals(e.getAttributes().get("Goal")))
                    return false;
            }
            // store the class of e in_H_, indexed by the values for
            // attributes A of the example e
            hashTable.put(attributeValues, e.getAttributes().get("Goal"));
        }
        //  return true
        return true;
