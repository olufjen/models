class GeneticMaximumFinderApp
!!!567042.java!!!	main(inout args : String [[]]) : void
		launch(args);
!!!567170.java!!!	getTitle() : String
		return "Genetic Maxium Finder App";
!!!567298.java!!!	createRootPane() : Pane
		BorderPane root = new BorderPane();

		Canvas canvas = new Canvas();
		funcPlotterCtrl = new FunctionPlotterCtrl(canvas);
		funcPlotterCtrl.setLimits(Functions.minX, Functions.maxX, Functions.minY, Functions.maxY);
		List<Parameter> params = createParameters();
		
		TaskExecutionPaneBuilder builder = new TaskExecutionPaneBuilder();
		builder.defineParameters(params);
		builder.defineStateView(canvas);
		builder.defineInitMethod(this::initialize);
		builder.defineTaskMethod(this::startExperiment);
		taskPaneCtrl = builder.getResultFor(root);
		
		return root;
!!!567426.java!!!	createParameters() : Parameter
		Parameter p1 = new Parameter(PARAM_FUNC_SELECT);
		p1.setValues(Functions.f1, Functions.f2, Functions.f3);
		p1.setValueNames("f1", "f2", "f3");
		Parameter p2 = new Parameter(PARAM_MUT_PROB, 0.0, 0.2, 0.5, 1.0);
		p2.setDefaultValueIndex(1);
		Parameter p3 = new Parameter(PARAM_POPULATION, 2, 10, 20, 100);
		p3.setDefaultValueIndex(2);
		Parameter p4 = new Parameter(PARAM_MAX_ITER, 100, 200, 400);
		p4.setDefaultValueIndex(0);
		return Arrays.asList(p1, p2, p3, p4);
!!!567554.java!!!	initialize() : void
		funcPlotterCtrl.setFunction((Function<Double, Double>) taskPaneCtrl.getParamValue(PARAM_FUNC_SELECT));
!!!567682.java!!!	cleanup() : void
		taskPaneCtrl.cancelExecution();
!!!567810.java!!!	startExperiment() : void
		experiment = new GeneticMaximumFinderDemo();
		experiment.setFunction((Function<Double, Double>) taskPaneCtrl.getParamValue(PARAM_FUNC_SELECT));
		experiment.setMutationProb(taskPaneCtrl.getParamAsDouble(PARAM_MUT_PROB));
		experiment.setPopulationSize(taskPaneCtrl.getParamAsInt(PARAM_POPULATION));
		experiment.setMaxIterations(taskPaneCtrl.getParamAsInt(PARAM_MAX_ITER));
		experiment.startExperiment(this::updateStateView);
!!!567938.java!!!	updateStateView(in itCount : int, inout gen : Collection<Individual<Double>>) : void
		Platform.runLater(() -> updateStateViewLater(itCount, gen));
		taskPaneCtrl.waitAfterStep();
!!!568066.java!!!	updateStateViewLater(in itCount : int, inout gen : Collection<Individual<Double>>) : void
		funcPlotterCtrl.update();
		if (gen != null) {
			for (Individual<Double> ind : gen) {
				Optional<Paint> fill;
				if (ind.getDescendants() > 0)
					fill = Optional.of(Color.rgb(Math.max(255 - ind.getDescendants() * 20, 0), 0, 0));
				else
					fill = Optional.of(Color.RED.brighter());
				double x = ind.getRepresentation().get(0);
				funcPlotterCtrl.setMarker(x, fill);
			}
			taskPaneCtrl.setStatus(experiment.getIterationInfo(itCount, gen));
		} else {
			taskPaneCtrl.setStatus("");
		}
