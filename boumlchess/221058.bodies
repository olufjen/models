class NQueensController
!!!633346.java!!!	clear() : void
			prepare(null);
!!!633474.java!!!	prepare(in changedSelector : String) : void
			AgentAppFrame.SelectionState selState = frame.getSelection();
			NQueensBoard board = null;
			switch (selState.getIndex(NQueensFrame.ENV_SEL)) {
			case 0: // 4 x 4 board
				board = new NQueensBoard(4);
				break;
			case 1: // 8 x 8 board
				board = new NQueensBoard(8);
				break;
			case 2: // 8 x 8 board
				board = new NQueensBoard(16);
				break;
			case 3: // 32 x 32 board
				board = new NQueensBoard(32);
				break;
			}
			env = new NQueensEnvironment(board);
			if (selState.getIndex(NQueensFrame.PROBLEM_SEL) == 1)
				for (int i = 0; i < board.getSize(); i++)
					board.addQueenAt(new XYLocation(i, 0));
			boardDirty = false;
			agent = null;
			frame.getEnvView().setEnvironment(env);
!!!633602.java!!!	addAgent() : void
			if (agent != null && agent.isDone()) {
				env.removeAgent(agent);
				agent = null;
			}
			if (agent == null) {
				int pSel = frame.getSelection().getIndex(NQueensFrame.PROBLEM_SEL);
				int sSel = frame.getSelection().getIndex(NQueensFrame.SEARCH_SEL);
				ActionsFunction<NQueensBoard, QueenAction> actionsFn;
				if (pSel == 0)
					actionsFn = NQueensFunctions::getIFActions;
				else
					actionsFn = NQueensFunctions::getCSFActions;
				Problem<NQueensBoard, QueenAction> problem = new GeneralProblem<>(env.getBoard(),
						actionsFn, NQueensFunctions::getResult, NQueensFunctions::testGoal);
				SearchForActions<NQueensBoard, QueenAction> search = SEARCH_ALGOS.get(sSel);
				agent = new SearchAgent<>(problem, search);
				env.addAgent(agent);
			}
!!!633730.java!!!	isPrepared() : boolean
			int problemSel = frame.getSelection().getIndex(NQueensFrame.PROBLEM_SEL);
			return problemSel == 1 || (agent == null || !agent.isDone())
					&& (!boardDirty || env.getBoard().getNumberOfQueensOnBoard() == 0);
!!!633858.java!!!	run(inout logger : MessageLogger) : void
			logger.log("<simulation-log>");
			try {
				addAgent();
				while (!agent.isDone() && !frame.simulationPaused()) {
					Thread.sleep(200);
					env.step();
				}
			} catch (InterruptedException e) {
				// nothing to do...
			} catch (Exception e) {
				e.printStackTrace(); // probably search has failed...
			}
			logger.log(getStatistics());
			logger.log("</simulation-log>\n");
!!!633986.java!!!	step(inout logger : MessageLogger) : void
			try {
				addAgent();
				env.step();
			} catch (Exception e) {
				e.printStackTrace(); // probably search has failed...
			}
!!!634114.java!!!	update(inout simulationThread : SimulationThread) : void
			if (simulationThread.isCancelled()) {
				frame.setStatus("Task canceled.");
			} else if (frame.simulationPaused()) {
				frame.setStatus("Task paused.");
			} else {
				frame.setStatus("Task completed.");
			}
!!!634242.java!!!	getStatistics() : String
			StringBuilder result = new StringBuilder();
			Properties properties = agent.getInstrumentation();
			for (Object o : properties.keySet()) {
				String key = (String) o;
				String property = properties.getProperty(key);
				result.append("\n").append(key).append(" : ").append(property);
			}
			return result.toString();
!!!634370.java!!!	modifySquare(inout loc : XYLocation) : void
			boardDirty = true;
			String atype;
			if (env.getBoard().queenExistsAt(loc))
				atype = QueenAction.REMOVE_QUEEN;
			else
				atype = QueenAction.PLACE_QUEEN;
			env.executeAction(null, new QueenAction(atype, loc));
			agent = null;
			frame.updateEnabledState();
