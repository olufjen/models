class NQueensDemo
!!!550146.java!!!	main(inout args : String [[]]) : void

		newNQueensDemo();
!!!550274.java!!!	newNQueensDemo() : void

		nQueensWithDepthFirstSearch();
		nQueensWithBreadthFirstSearch();
		nQueensWithRecursiveDLS();
		nQueensWithIterativeDeepeningSearch();
		nQueensSimulatedAnnealingSearch();
		nQueensHillClimbingSearch();
		nQueensGeneticAlgorithmSearch();
!!!550402.java!!!	nQueensWithRecursiveDLS() : void
		System.out.println("\nNQueensDemo recursive DLS -->");
		try {
			Problem<NQueensBoard, QueenAction> problem =
					NQueensFunctions.createIncrementalFormulationProblem(boardSize);
			SearchForActions<NQueensBoard, QueenAction> search = new DepthLimitedSearch<>(boardSize);
			SearchAgent<NQueensBoard, QueenAction> agent = new SearchAgent<>(problem, search);
			printActions(agent.getActions());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}

!!!550530.java!!!	nQueensWithBreadthFirstSearch() : void
		try {
			System.out.println("\nNQueensDemo BFS -->");
			Problem<NQueensBoard, QueenAction> problem =
					NQueensFunctions.createIncrementalFormulationProblem(boardSize);
			SearchForActions<NQueensBoard, QueenAction> search = new BreadthFirstSearch<>(new TreeSearch<>());
			SearchAgent<NQueensBoard, QueenAction> agent = new SearchAgent<>(problem, search);
			printActions(agent.getActions());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}
!!!550658.java!!!	nQueensWithDepthFirstSearch() : void
		System.out.println("\nNQueensDemo DFS -->");
		try {
			Problem<NQueensBoard, QueenAction> problem =
					NQueensFunctions.createIncrementalFormulationProblem(boardSize);
			SearchForActions<NQueensBoard, QueenAction> search = new DepthFirstSearch<>(new GraphSearch<>());
			SearchAgent<NQueensBoard, QueenAction> agent = new SearchAgent<>(problem, search);
			printActions(agent.getActions());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}
!!!550786.java!!!	nQueensWithIterativeDeepeningSearch() : void
		System.out.println("\nNQueensDemo Iterative DS  -->");
		try {
			Problem<NQueensBoard, QueenAction> problem =
					NQueensFunctions.createIncrementalFormulationProblem(boardSize);
			SearchForActions<NQueensBoard, QueenAction> search = new IterativeDeepeningSearch<>();
			SearchAgent<NQueensBoard, QueenAction> agent = new SearchAgent<>(problem, search);

			System.out.println();
			printActions(agent.getActions());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}
!!!550914.java!!!	nQueensSimulatedAnnealingSearch() : void
		System.out.println("\nNQueensDemo Simulated Annealing  -->");
		try {
			Problem<NQueensBoard, QueenAction> problem =
					NQueensFunctions.createCompleteStateFormulationProblem(boardSize, Config.QUEENS_IN_FIRST_ROW);

			SimulatedAnnealingSearch<NQueensBoard, QueenAction> search =
					new SimulatedAnnealingSearch<>(NQueensFunctions.createAttackingPairsHeuristicFunction(),
					new Scheduler(20, 0.045, 100));
			SearchAgent<NQueensBoard, QueenAction> agent = new SearchAgent<>(problem, search);

			System.out.println();
			printActions(agent.getActions());
			System.out.println("Search Outcome=" + search.getOutcome());
			System.out.println("Final State=\n" + search.getLastSearchState());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}
!!!551042.java!!!	nQueensHillClimbingSearch() : void
		System.out.println("\nNQueensDemo HillClimbing  -->");
		try {
			Problem<NQueensBoard, QueenAction> problem =
					NQueensFunctions.createCompleteStateFormulationProblem(boardSize, Config.QUEENS_IN_FIRST_ROW);
			HillClimbingSearch<NQueensBoard, QueenAction> search = new HillClimbingSearch<>
					(NQueensFunctions.createAttackingPairsHeuristicFunction());
			SearchAgent<NQueensBoard, QueenAction> agent = new SearchAgent<>(problem, search);

			System.out.println();
			printActions(agent.getActions());
			System.out.println("Search Outcome=" + search.getOutcome());
			System.out.println("Final State=\n" + search.getLastSearchState());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}
!!!551170.java!!!	nQueensGeneticAlgorithmSearch() : void
		System.out.println("\nNQueensDemo GeneticAlgorithm  -->");
		try {
			FitnessFunction<Integer> fitnessFunction = NQueensGenAlgoUtil.getFitnessFunction();
			GoalTest<Individual<Integer>> goalTest = NQueensGenAlgoUtil.getGoalTest();
			// Generate an initial population
			Set<Individual<Integer>> population = new HashSet<>();
			for (int i = 0; i < 50; i++) {
				population.add(NQueensGenAlgoUtil.generateRandomIndividual(boardSize));
			}

			GeneticAlgorithm<Integer> ga = new GeneticAlgorithm<>(boardSize,
					NQueensGenAlgoUtil.getFiniteAlphabetForBoardOfSize(boardSize), 0.15);

			// Run for a set amount of time
			Individual<Integer> bestIndividual = ga.geneticAlgorithm(population, fitnessFunction, goalTest, 1000L);

			System.out.println("Max Time (1 second) Best Individual=\n"
					+ NQueensGenAlgoUtil.getBoardForIndividual(bestIndividual));
			System.out.println("Board Size      = " + boardSize);
			System.out.println("# Board Layouts = " + (new BigDecimal(boardSize)).pow(boardSize));
			System.out.println("Fitness         = " + fitnessFunction.apply(bestIndividual));
			System.out.println("Is Goal         = " + goalTest.test(bestIndividual));
			System.out.println("Population Size = " + ga.getPopulationSize());
			System.out.println("Iterations      = " + ga.getIterations());
			System.out.println("Took            = " + ga.getTimeInMilliseconds() + "ms.");

			// Run till goal is achieved
			bestIndividual = ga.geneticAlgorithm(population, fitnessFunction, goalTest, 0L);

			System.out.println("");
			System.out
					.println("Goal Test Best Individual=\n" + NQueensGenAlgoUtil.getBoardForIndividual(bestIndividual));
			System.out.println("Board Size      = " + boardSize);
			System.out.println("# Board Layouts = " + (new BigDecimal(boardSize)).pow(boardSize));
			System.out.println("Fitness         = " + fitnessFunction.apply(bestIndividual));
			System.out.println("Is Goal         = " + goalTest.test(bestIndividual));
			System.out.println("Population Size = " + ga.getPopulationSize());
			System.out.println("Itertions       = " + ga.getIterations());
			System.out.println("Took            = " + ga.getTimeInMilliseconds() + "ms.");

		} catch (Exception e) {
			e.printStackTrace();
		}
!!!551298.java!!!	printInstrumentation(inout properties : Properties) : void
		for (Object o : properties.keySet()) {
			String key = (String) o;
			String property = properties.getProperty(key);
			System.out.println(key + " : " + property);
		}

!!!551426.java!!!	printActions(inout actions : List<Action>) : void
		for (Action action : actions) {
			System.out.println(action.toString());
		}
