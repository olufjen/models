class NQueensFunctions
!!!176770.java!!!	createIncrementalFormulationProblem(in boardSize : int) : Problem
        return new GeneralProblem<>(new NQueensBoard(boardSize), NQueensFunctions::getIFActions,
                NQueensFunctions::getResult, NQueensFunctions::testGoal);
!!!176898.java!!!	createCompleteStateFormulationProblem(in boardSize : int, inout config : NQueensBoard::Config) : Problem
        return new GeneralProblem<>(new NQueensBoard(boardSize, config), NQueensFunctions::getCSFActions,
                NQueensFunctions::getResult, NQueensFunctions::testGoal);
!!!177026.java!!!	getIFActions(inout state : NQueensBoard) : QueenAction
        List<QueenAction> actions = new ArrayList<>();

        int numQueens = state.getNumberOfQueensOnBoard();
        int boardSize = state.getSize();
        for (int i = 0; i < boardSize; i++) {
            XYLocation newLocation = new XYLocation(numQueens, i);
            if (!(state.isSquareUnderAttack(newLocation))) {
                actions.add(new QueenAction(QueenAction.PLACE_QUEEN,
                        newLocation));
            }
        }
        return actions;
!!!177154.java!!!	getCSFActions(inout state : NQueensBoard) : QueenAction
        List<QueenAction> actions = new ArrayList<>();
        for (int i = 0; i < state.getSize(); i++)
            for (int j = 0; j < state.getSize(); j++) {
                XYLocation loc = new XYLocation(i, j);
                if (!state.queenExistsAt(loc))
                    actions.add(new QueenAction(QueenAction.MOVE_QUEEN, loc));
            }
        return actions;
!!!177282.java!!!	getResult(inout state : NQueensBoard, inout action : QueenAction) : NQueensBoard
        NQueensBoard result = new NQueensBoard(state.getSize());
        result.setQueensAt(state.getQueenPositions());
        if (Objects.equals(action.getName(), QueenAction.PLACE_QUEEN))
            result.addQueenAt(action.getLocation());
        else if (Objects.equals(action.getName(), QueenAction.REMOVE_QUEEN))
            result.removeQueenFrom(action.getLocation());
        else if (Objects.equals(action.getName(), QueenAction.MOVE_QUEEN))
            result.moveQueenTo(action.getLocation());
        // if action is not understood or is a NoOp
        // the result will be the current state.
        return result;
!!!177410.java!!!	testGoal(inout state : NQueensBoard) : boolean
        return state.getNumberOfQueensOnBoard() == state.getSize() && state.getNumberOfAttackingPairs() == 0;
!!!177538.java!!!	createAttackingPairsHeuristicFunction() : Node
        return node -> node.getState().getNumberOfAttackingPairs();
