format 223
"planning" // no::games::chess::planning
  revision 6
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\no\\games\\chess\\planning/"
  java_package "no.games.chess"
  classview 189058 "planning"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 332546 "ChessHighLevelAction"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is a specialized version of the
Artificial Intelligence A Modern Approach (3rd Edition): Figure 11.4, page
409.<br>
<p>
Each HLA has one or more possible refinements, into a sequence 1
of actions, each of which may be an HLA or a primitive action (which has no refinements
by definition).

@author samagra
"
      classrelation 398338 // <generalisation>
	relation 398338 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 398338 // <generalisation>
	  b parent class_ref 169602 // ActionSchema
      end

      attribute 396674 "refinements"
	private explicit_type "List<ActionSchema>"
	stereotype "List"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 1652610 "ChessHighLevelAction"
	public explicit_return_type ""
	nparams 5
	  param in name "name" explicit_type "String"
	  param inout name "variables" explicit_type "List<Term>"
	  param in name "precondition" explicit_type "String"
	  param in name "effects" explicit_type "String"
	  param inout name "refinements" explicit_type "List<List<ActionSchema>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1652738 "addRefinement"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newRefinement" explicit_type "List<ActionSchema>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1652866 "getRefinements"
	public explicit_return_type "List<List<ActionSchema>>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1652994 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 332674 "ChessPlanningProblemFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is a spesialized version of the 
Planning problem factory to generate planning problems.
It is used for chess games in this project

@author samagra
"
      operation 1653122 "airCargoTransportProblem"
	class_operation public return_type class_ref 169986 // Problem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates air cargo problem. Artificial Intelligence A Modern Approach (3rd Edition):Figure 10.1 page 369.<br>
<p>
Init(At(C1, SFO) ∧ At(C2, JFK) ∧ At(P1, SFO) ∧ At(P2, JFK)
  ∧ Cargo(C1) ∧ Cargo(C2) ∧ Plane(P1) ∧ Plane(P2)
  ∧ Airport(JFK) ∧ Airport(SFO))
Goal(At(C1, JFK) ∧ At(C2, SFO))
Action(Load(c, p, a),
 PRECOND: At(c, a) ∧ At(p, a) ∧ Cargo(c) ∧ Plane(p) ∧ Airport(a)
 EFFECT: ¬ At(c, a) ∧ In(c, p))
Action(Unload(c, p, a),
 PRECOND: In(c, p) ∧ At(p, a) ∧ Cargo(c) ∧ Plane(p) ∧ Airport(a)
 EFFECT: At(c, a) ∧ ¬ In(c, p))
Action(Fly(p, from, to),
 PRECOND: At(p, from) ∧ Plane(p) ∧ Airport(from) ∧ Airport(to)
 EFFECT: ¬ At(p, from) ∧ At(p, to))

@return A PDDL description of an air cargo transportation planning problem.
"
      end

      operation 1653250 "spareTireProblem"
	class_operation public return_type class_ref 169986 // Problem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates spare tire problem. Artificial Intelligence A Modern Approach (3rd Edition): Figure 10.2 page 370.<br>
<p>
Init(Tire(Flat) ∧ Tire(Spare) ∧ At(Flat, Axle) ∧ At(Spare, Trunk))
Goal(At(Spare, Axle))
Action(Remove(obj, loc),
 PRECOND: At(obj, loc)
 EFFECT: ¬ At(obj, loc) ∧ At(obj, Ground))
Action(PutOn(t, Axle),
 PRECOND: Tire(t) ∧ At(t, Ground) ∧ ¬ At(Flat, Axle)
 EFFECT: ¬ At(t, Ground) ∧ At(t, Axle))
Action(LeaveOvernight,
 PRECOND:
 EFFECT: ¬ At(Spare, Ground) ∧ ¬ At(Spare, Axle) ∧ ¬ At(Spare, Trunk)
     ∧ ¬ At(Flat, Ground) ∧ ¬ At(Flat, Axle) ∧ ¬ At(Flat, Trunk))

@return The spare tire problem.
"
      end

      operation 1653378 "goHomeToSFOProblem"
	class_operation public return_type class_ref 169986 // Problem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates go to SanFrancisco airport . Artificial Intelligence A Modern Approach (3rd Edition): Figure 11.4 page 407.<br>
<p>
Refinement(Go(Home, SFO),
STEPS : [Drive(Home, SFOLongTermParking),
Shuttle(SFOLongTermParking, SFO)] )
Refinement(Go(Home, SFO),
STEPS : [Taxi (Home, SFO)] )

@return The San Francisco Airport problem.
"
      end

      operation 1653506 "getHlaAct"
	class_operation public return_type class_ref 332546 // ChessHighLevelAction
	nparams 1
	  param inout name "problem" type class_ref 356994 // ChessProblem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the ChessHLA for a chess problem.

Chapter 11.2.2 Searching for primitive solutions:
For each primitive action a, provide one refinement of Act with steps {a,Act}.
Act is the HLA.
@param problem
@return The Act HLA.
"
      end
    end

    class 332802 "ChessSearchAlgorithm"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is a spesialized version of the 
Artificial Intelligence A Modern Approach (3rd Edition): Figure 11.5, page
409.<br>
<br>

<pre>
function HIERARCHICAL-SEARCH(problem, hierarchy) returns a solution, or failure
 frontier ← a FIFO queue with [Act] as the only element
 loop do
   if EMPTY?(frontier) then return failure
   plan ← POP(frontier) / chooses the shallowest plan in frontier /
   hla ← the first HLA in plan,or null if none
   prefix,suffix ← the action subsequences before and after hla in plan
   outcome ← RESULT(problem.INITIAL-STATE,prefix)
   if hla is null then / so plan is primitive and outcome is its result /
     if outcome satisfies problem.GOAL then return plan
   else for each sequence in REFINEMENTS(hla,outcome,hierarchy)do
     frontier ← INSERT(APPEND(prefix,sequence,suffix),frontier)
</pre>
<p>
Figure 9.3 A breadth-first implementation of hierarchical forward planning
search. The initial plan supplied to the algorithm is [Act]. The REFINEMENTS
function returns a set of action sequences, one for each refinement of the
HLA whose preconditions are satisfied by the specified state, outcome.

@author samagra
"
      attribute 449538 "fw"
	private explicit_type "FileWriter"
	init_value "  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 449666 "writer"
	private explicit_type "PrintWriter"
	init_value "  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 460034 // problem (<unidirectional association>)
	relation 460034 --->
	  a role_name "problem" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 460034 // problem (<unidirectional association>)
	  b parent class_ref 356994 // ChessProblem
      end

      classrelation 460162 // reserveplan (<unidirectional association>)
	relation 460162 --->
	  stereotype "List"
	  a role_name "reserveplan" init_value " new ArrayList<ActionSchema>()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 460162 // reserveplan (<unidirectional association>)
	  b parent class_ref 169602 // ActionSchema
      end

      operation 1760002 "ChessSearchAlgorithm"
	public explicit_return_type ""
	nparams 2
	  param inout name "fw" explicit_type "FileWriter"
	  param inout name "writer" explicit_type "PrintWriter"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760130 "getFw"
	public explicit_return_type "FileWriter"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760258 "setFw"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fw" explicit_type "FileWriter"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760386 "getWriter"
	public explicit_return_type "PrintWriter"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760514 "setWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "writer" explicit_type "PrintWriter"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1653634 "heirarchicalSearch"
	public return_type class_ref 169602 // ActionSchema
	nparams 1
	  param inout name "problem" type class_ref 356994 // ChessProblem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "function HIERARCHICAL-SEARCH(problem, hierarchy) returns a solution, or failure

@param problem The planning problem.
@return A list of actions representing the plan.
"
      end

      operation 1653762 "refinements"
	public explicit_return_type "List<List<ActionSchema>>"
	nparams 2
	  param inout name "hla" type class_ref 169602 // ActionSchema
	  param inout name "outcome" type class_ref 170242 // State
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The REFINEMENTS function returns a set of action sequences,
one for each refinement of the HLA whose preconditions are
satisfied by the specified state, outcome.

@param hla     The hla to which the refinements are to be applied.
@param outcome The state in which the refinements are to be applied.
@return List of all refinements of the current hla in a given outcome state.
"
      end
    end

    class 356994 "ChessProblem"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "THis is the chess version of the Problem class

Artificial Intelligence A Modern Approach (3rd Edition): page
383.<br>
<br>
<p>
A set of action schemas serves as a definition of a planning domain. A specific problem
within the domain is defined with the addition of an initial state and a goal. The initial
state is a conjunction of ground atoms.The goal is just like a
precondition: a conjunction of literals (positive or negative) that may contain variables, such
as At(p, SFO ) ∧ Plane(p). Any variables are treated as existentially quantified, so this goal
is to have any plane at SFO. The problem is solved when we can find a sequence of actions
that end in a state s that entails the goal.

@author samagra
"
      classrelation 435586 // initialState (<unidirectional association>)
	relation 435586 --->
	  a role_name "initialState" package
	    comment " initialState"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 435586 // initialState (<unidirectional association>)
	  b parent class_ref 170242 // State
      end

      classrelation 435714 // actionSchemas (<unidirectional association>)
	relation 435714 --->
	  stereotype "Set"
	  a role_name "actionSchemas" package
	    comment " Planning Domain"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 435714 // actionSchemas (<unidirectional association>)
	  b parent class_ref 169602 // ActionSchema
      end

      classrelation 435842 // goalState (<unidirectional association>)
	relation 435842 --->
	  a role_name "goalState" package
	    comment " goalState"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 435842 // goalState (<unidirectional association>)
	  b parent class_ref 170242 // State
      end

      attribute 478594 "predSymbol"
	private explicit_type "String"
	init_value " \"occupies\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 478722 "pieceNames"
	private explicit_type "String"
	stereotype "List"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 1805314 "getPieceNames"
	public explicit_return_type "List<String>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1805442 "setPieceNames"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pieceNames" explicit_type "List<String>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759106 "ChessProblem"
	public explicit_return_type ""
	nparams 3
	  param inout name "initialState" type class_ref 170242 // State
	  param inout name "goalState" type class_ref 170242 // State
	  param inout name "actionSchemas" explicit_type "Set<ActionSchema>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759234 "ChessProblem"
	public explicit_return_type ""
	nparams 3
	  param inout name "initialState" type class_ref 170242 // State
	  param inout name "goalState" type class_ref 170242 // State
	  param inout name "" explicit_type "ActionSchema...actions"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759362 "getInitialState"
	public return_type class_ref 170242 // State
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759490 "getActionSchemas"
	public return_type class_ref 169602 // ActionSchema
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Set<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759618 "getGoalState"
	public return_type class_ref 170242 // State
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1805570 "determinConstants"
	public return_type class_ref 149506 // Constant
	nparams 1
	  param inout name "literals" explicit_type "List<Literal>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759746 "getProblemConstants"
	public return_type class_ref 149506 // Constant
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return Constants for a particular problem domain.
@since 11.02.21 
"
      end

      operation 1759874 "getPropositionalisedActions"
	public return_type class_ref 169602 // ActionSchema
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "getPropositionalisedActions
In the original version, this method returns all permutations of the action schema based on all the
Constants.
This method must be reworked so that it returns a proper set of refinements for an HLA.
The refinements are primitive actions produced by this method
See section 11.2.1 p. 406

@return Propositionalises all the actionschemas to return a set of possible ground actions
"
      end

      operation 1805698 "getGroundActions"
	public return_type class_ref 169602 // ActionSchema
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "getGroundActions
This method returns a proper set of refinements for an HLA.
The refinements are primitive actions produced by this method
See section 11.2.1 p. 406
@return
"
      end
    end
  end

  deploymentview 169474 "planning"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 275458 "ChessHighLevelAction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.parsing.ast.Term;
import aima.core.logic.planning.ActionSchema;
import java.util.List;
${definition}"
      associated_elems
	class_ref 332546 // ChessHighLevelAction
      end
    end

    artifact 275586 "ChessPlanningProblemFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.parsing.ast.Constant;
import aima.core.logic.fol.parsing.ast.Variable;
import aima.core.logic.planning.ActionSchema;
import aima.core.logic.planning.Problem;
import aima.core.logic.planning.State;
import aima.core.logic.planning.hierarchicalsearch.HighLevelAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
${definition}"
      associated_elems
	class_ref 332674 // ChessPlanningProblemFactory
      end
    end

    artifact 275714 "ChessSearchAlgorithm"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.kb.data.Literal;
import aima.core.logic.planning.ActionSchema;
import aima.core.logic.planning.PlanningProblemFactory;
import aima.core.logic.planning.Problem;
import aima.core.logic.planning.State;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.*;
${definition}"
      associated_elems
	class_ref 332802 // ChessSearchAlgorithm
      end
    end

    artifact 299778 "ChessProblem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.kb.data.Literal;
import aima.core.logic.fol.parsing.ast.AtomicSentence;
import aima.core.logic.fol.parsing.ast.Constant;
import aima.core.logic.fol.parsing.ast.Term;
import aima.core.logic.planning.ActionSchema;
import aima.core.logic.planning.State;
import aima.core.util.math.permute.PermutationGenerator;
import no.games.chess.fol.util.ChessPermutationGenerator;
import java.util.*;
import java.util.stream.Collectors;
${definition}"
      associated_elems
	class_ref 356994 // ChessProblem
      end
    end
  end

  package_ref 204162 // planning
end
