format 223
"nondeterministic" // no::games::chess::search::nondeterministic
  revision 1
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\no/games/chess/search/nondeterministic/"
  java_package "no.games.chess.search.nondeterministic"
  classview 241922 "nondeterministic"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 537730 "AndOrChessSearch"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "AndOrChessSearch
This class is the chess version of the AndOrSearch class as described:
Artificial Intelligence A Modern Approach (3rd Edition): Figure 4.11, page
136.<br>
<br>

<pre>
<code>
function AND-OR-GRAPH-SEARCH(problem) returns a conditional plan, or failure
  OR-SEARCH(problem.INITIAL-STATE, problem, [])

---------------------------------------------------------------------------------

function OR-SEARCH(state, problem, path) returns a conditional plan, or failure
  if problem.GOAL-TEST(state) then return the empty plan
  if state is on path then return failure
  for each action in problem.ACTIONS(state) do
      plan <- AND-SEARCH(RESULTS(state, action), problem, [state | path])
      if plan != failure then return [action | plan]
  return failure

---------------------------------------------------------------------------------

function AND-SEARCH(states, problem, path) returns a conditional plan, or failure
  for each s<sub>i</sub> in states do
     plan<sub>i</sub> <- OR-SEARCH(s<sub>i</sub>, problem, path)
     if plan<sub>i</sub> = failure then return failure
  return [if s<sub>1</sub> then plan<sub>1</sub>
          else if s<sub>2</sub> then plan<sub>2</sub> ...
          else if s<sub>n-1</sub> then plan<sub>n-1</sub>
          else plan<sub>n</sub>]
</code>
</pre>

Figure 4.11 An algorithm for searching AND-OR graphs generated by
nondeterministic environments. It returns a conditional plan that reaches a
goal state in all circumstances. (The notation [x | l] refers to the list
formed by adding object x to the front of the list l.)<br>
<br>
Note: Unfortunately, this class cannot implement the interface SearchForActions
(core.search.framework.SearchForActions) because SearchForActions.search() returns a list of
Actions to perform, whereas a nondeterministic search must return a Plan.

@author Andrew Brown
@author Ruediger Lunde
"
      attribute 778370 "expandedNodes"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 2310786 "search"
	public return_type class_ref 537858 // ChessPlan
	nparams 1
	  param inout name "problem" type class_ref 537986 // NondeterministicChessProblem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Optional<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches through state space and returns a conditional plan for the given
problem. The conditional plan is a list of either an action or an if-then
construct (consisting of a list of states and consequent actions). The
final product, when printed, resembles the contingency plan on page 134.

This function is equivalent to the following on page 136:

<pre>
<code>
function AND-OR-GRAPH-SEARCH(problem) returns a conditional plan, or failure
  OR-SEARCH(problem.INITIAL-STATE, problem, [])
</code>
</pre>

@return a conditional plan or empty on failure
"
      end

      operation 2310914 "orSearch"
	public return_type class_ref 537858 // ChessPlan
	nparams 3
	  param inout name "state" type class_ref 538114 // GameState
	  param inout name "problem" type class_ref 537986 // NondeterministicChessProblem
	  param inout name "path" type class_ref 538242 // ChessPath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a conditional plan or null on failure; this function is
equivalent to the following on page 136:

<pre>
<code>
function OR-SEARCH(state, problem, path) returns a conditional plan, or failure
  if problem.GOAL-TEST(state) then return the empty plan
  if state is on path then return failure
  for each action in problem.ACTIONS(state) do
      plan <- AND-SEARCH(RESULTS(state, action), problem, [state | path])
      if plan != failure then return [action | plan]
  return failure
</code>
</pre>

The or-search returns a plan as a result of an action by the agent (the player).
@return a conditional plan or null on failure
"
      end

      operation 2311042 "andSearch"
	public return_type class_ref 537858 // ChessPlan
	nparams 3
	  param inout name "states" explicit_type "List<GameState>"
	  param inout name "problem" type class_ref 537986 // NondeterministicChessProblem
	  param inout name "path" type class_ref 538242 // ChessPath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a conditional plan or null on failure; this function is
equivalent to the following on page 136:

<pre>
<code>
function AND-SEARCH(states, problem, path) returns a conditional plan, or failure
  for each s<sub>i</sub> in states do
     plan<sub>i</sub> <- OR-SEARCH(s<sub>i</sub>, problem, path)
     if plan<sub>i</sub> = failure then return failure
  return [if s<sub>1</sub> then plan<sub>1</sub>
          else if s<sub>2</sub> then plan<sub>2</sub> ...
          else if s<sub>n-1</sub> then plan<sub>n-1</sub>
          else plan<sub>n</sub>]
</code>
</pre>

@param states
@param problem
@param path
@return a conditional plan or null on failure
"
      end

      operation 2311170 "getMetrics"
	public return_type class_ref 133634 // Metrics
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the metrics of the node expander.

@return all the metrics of the node expander.
"
      end
    end

    class 537858 "ChessPlan"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ChessPlan
This class is the chess version of the Plan class as described:
Represents a solution plan for an AND-OR search; according to page 135
AIMA3e, the plan must be \"a subtree that (1) has a goal node at every leaf,
(2) specifies one action at each of its OR nodes, and (3) includes every
outcome branch at each of its AND nodes.\" As demonstrated on page 136, this
plan can be implemented as a sequence of two steps where the first
is an action (corresponding to one OR node) and the second is a list
of if-state-then-plan statements (corresponding to an AND node). Here, we use a
list of action steps instead of just one action. This allows to simplify conditioned
steps with just one if-statement and supports a clean representation of empty plans.

@author Ruediger Lunde
@author Andrew Brown

The OR node: The player chooses a move.
All states but one remain the same.
The outcome of the move is determined by the opponent's move. This is the AND node
This opponent move produces a new set of states. All states but one remain the same.

"
      attribute 778498 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 752898 // actionSteps (<unidirectional association>)
	relation 752898 --->
	  stereotype "List"
	  a role_name "actionSteps" init_value " new LinkedList<>()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 752898 // actionSteps (<unidirectional association>)
	  b parent class_ref 538498 // GameAction
      end

      classrelation 753026 // ifStatements (<unidirectional association>)
	relation 753026 --->
	  stereotype "List"
	  a role_name "ifStatements" init_value " new LinkedList<>()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 753026 // ifStatements (<unidirectional association>)
	  b parent class_ref 538626 // IfStatement
      end

      operation 2311938 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2312066 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of steps of this ChessPlan. "
      end

      operation 2312194 "isActionStep"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "step" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the specified step (between 0 and size()-1) is an action step or
a conditional step.
"
      end

      operation 2312322 "getAction"
	public return_type class_ref 538498 // GameAction
	nparams 1
	  param in name "step" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the corresponding action for the given action step. "
      end

      operation 2312450 "getChessPlan"
	public return_type class_ref 537858 // ChessPlan
	nparams 2
	  param in name "step" explicit_type "int"
	  param inout name "state" type class_ref 538114 // GameState
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Evaluates the specified conditional step and returns a plan of the first if-statement which matches
the given state.
@param step A conditional step (last step in the plan).
@param state The state to be matched.
@return A plan or null if no match was found.
"
      end

      operation 2312578 "prepend"
	public return_type class_ref 537858 // ChessPlan
	nparams 1
	  param inout name "action" type class_ref 538498 // GameAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prepend an action to the plan and return itself.

@param action
           the action to be prepended to this plan.
@return this plan with action prepended to it.
"
      end

      operation 2312706 "addIfStatement"
	public explicit_return_type "void"
	nparams 2
	  param inout name "state" type class_ref 538114 // GameState
	  param inout name "plan" type class_ref 537858 // ChessPlan
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds an if-state-then-plan statement at the end of the plan. "
      end

      operation 2312834 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of this plan.

@return A string representation of this plan.
"
      end

      class 538626 "IfStatement"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 753154 // state (<unidirectional association>)
	  relation 753154 --->
	    a role_name "state" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 753154 // state (<unidirectional association>)
	    b parent class_ref 538114 // GameState
	end

	classrelation 753282 // plan (<unidirectional association>)
	  relation 753282 --->
	    a role_name "plan" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 753282 // plan (<unidirectional association>)
	    b parent class_ref 537858 // ChessPlan
	end

	operation 2312962 "IfStatement"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "state" type class_ref 538114 // GameState
	    param inout name "plan" type class_ref 537858 // ChessPlan
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2313090 "testCondition"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "state" type class_ref 538114 // GameState
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2313218 "getChessPlan"
	  package return_type class_ref 537858 // ChessPlan
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2313346 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Return string representation of this if-state-then-plan statement.

@return A string representation of this if-state-then-plan statement.
"
	end
      end
    end

    class 537986 "NondeterministicChessProblem"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "NondeterministicChessProblem
This class is the chess version of the NondeterministicProblem class as described:
Non-deterministic problems may have multiple results for a given state and
action; this class handles these results by mimicking Problem and replacing
ResultFunction (one result) with ResultsFunction (a set of results).

@author Andrew Brown
@author Ruediger Lunde

"
      classrelation 755330 // initialState (<unidirectional association>)
	relation 755330 --->
	  a role_name "initialState" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 755330 // initialState (<unidirectional association>)
	  b parent class_ref 538114 // GameState
      end

      classrelation 755458 // actionsFn (<unidirectional association>)
	relation 755458 --->
	  a role_name "actionsFn" protected
	    comment " Returns actions applicable in a given state"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 755458 // actionsFn (<unidirectional association>)
	  b parent class_ref 539010 // NonDetermineChessActionFunction
      end

      classrelation 755586 // goalTest (<unidirectional association>)
	relation 755586 --->
	  a role_name "goalTest" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<GameState> ${name}${value};
"
	    classrelation_ref 755586 // goalTest (<unidirectional association>)
	  b parent class_ref 135554 // GoalTest
      end

      classrelation 755714 // stepCostFn (<unidirectional association>)
	relation 755714 --->
	  a role_name "stepCostFn" protected
	    comment "This is an interface, so the constructor must contain an implementation "
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<GameState, GameAction> ${name}${value};
"
	    classrelation_ref 755714 // stepCostFn (<unidirectional association>)
	  b parent class_ref 135682 // StepCostFunction
      end

      classrelation 755842 // resultsFn (<unidirectional association>)
	relation 755842 --->
	  a role_name "resultsFn" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 755842 // resultsFn (<unidirectional association>)
	  b parent class_ref 539138 // NonDetermineResultFunction
      end

      operation 2318338 "NondeterministicChessProblem"
	public explicit_return_type ""
	nparams 4
	  param inout name "initialState" type class_ref 538114 // GameState
	  param inout name "actionsFn" type class_ref 539010 // NonDetermineChessActionFunction
	  param inout name "resultsFn" type class_ref 539138 // NonDetermineResultFunction
	  param inout name "goalTest" type class_ref 135554 // GoalTest
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<GameState> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor
No step cost function
"
      end

      operation 2318466 "NondeterministicChessProblem"
	public explicit_return_type ""
	nparams 5
	  param inout name "initialState" type class_ref 538114 // GameState
	  param inout name "actionsFn" type class_ref 539010 // NonDetermineChessActionFunction
	  param inout name "resultsFn" type class_ref 539138 // NonDetermineResultFunction
	  param inout name "goalTest" type class_ref 135554 // GoalTest
	  param inout name "stepCostFn" type class_ref 135682 // StepCostFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<GameState> ${p3}, ${t4}<GameState,GameAction> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor
With defined step cost function
"
      end

      operation 2318594 "getInitialState"
	public return_type class_ref 538114 // GameState
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the initial state of the agent.

@return the initial state of the agent.
"
      end

      operation 2318722 "testGoal"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "state" type class_ref 538114 // GameState
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the given state is a goal state.
The goalTest interface is a predicate functional interface
@return <code>true</code> if the given state is a goal state.
"
      end

      operation 2318850 "getActions"
	package return_type class_ref 538498 // GameAction
	nparams 1
	  param inout name "state" type class_ref 538114 // GameState
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the description of the possible actions available to the agent.
The actionsFn is a functional interface that extends the Function interface (p. 53 Java 8)
The interface has one method: apply
It returns the list of actions applicable in the given state
"
      end

      operation 2318978 "getResults"
	public return_type class_ref 538114 // GameState
	nparams 2
	  param inout name "state" type class_ref 538114 // GameState
	  param inout name "action" type class_ref 538498 // GameAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the description of what each action does.
The resultsFn is an ordinary interface with one method: results(state,action)
@return the description of what each action does - a list of possible outcome states.
"
      end

      operation 2319106 "getStepCosts"
	package explicit_return_type "double"
	nparams 3
	  param inout name "state" type class_ref 538114 // GameState
	  param inout name "action" type class_ref 538498 // GameAction
	  param inout name "stateDelta" type class_ref 538114 // GameState
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <b>step cost</b> of taking action <code>action</code> in state <code>state</code> to reach state
<code>stateDelta</code> denoted by c(s, a, s').
The steCostFn is an ordinary interface with one method: applyAsDouble(state, action, stateDelta)
"
      end
    end

    class 538114 "GameState"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "GameState 
This class contains an ActionSchema. This Action Schema is linked to its AgamePiece.
The action schema is available for the game piece.
It also contains all FOL sentences belonging to this gamepiece.
The state of the game contains a set of chess actions and a generated set of action schemas.
Each action schema can be viewed as part of an individual state, and all the action schemas then represent a population of states.
This population is represented by a set of objects of this GameState class.
Each such GameState also contains the set of predefined actions:
CAPTURE Position (any own piece to this position. This may involve several MOVEs)
MOVE piece to Position (any piece to Position)
ATTACK opponent Piece This may involve several MOVEs
THREATEN opponent piece - This may involve several MOVEs
CAPTURE opponent Piece -This may involve several MOVEs
PROTECT own Piece - This may involve several MOVEs
PROTECT Position - This may involve several MOVEs
CASTLING- normal exchange of king and castle.

These predefined actions represent the set of GameActions available to this game state.
This set of game actions are created when the game set is created. (See constructor).
The GamePiece belonging to this game state is used when creating these game actions. 

The choice of action is determined by an evaluation function. This evaluation function is calculating various features of the
population of GameState objects. (page 172 AIMA book).
(See also section on harmony in chess positions.)
Each individual state is rated by the fitnes function.   (see p. 127 of the AIMA book)
This class then is used as a wrapper for the action schema representing an individual of the population of states.
The fitnes function returns a higher value for a better state.
Objects of this class is also generated as part of a search mechanism.
Then the generated action schema is a lifted action schema or a proposed chess move represented in algebraic notation or
as a string array of the form:
 {startpos,piecename,endpos,piecetype} 

@author ojn

"
      classrelation 753922 // pieceSentences (<unidirectional association>)
	relation 753922 --->
	  stereotype "List"
	  a role_name "pieceSentences" init_value " new ArrayList<Sentence>()" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 753922 // pieceSentences (<unidirectional association>)
	  b parent class_ref 149634 // Sentence
      end

      classrelation 754050 // gamePiece (<unidirectional association>)
	relation 754050 --->
	  a role_name "gamePiece" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 754050 // gamePiece (<unidirectional association>)
	  b parent class_ref 223746 // GamePiece
      end

      classrelation 754178 // actionSchema (<unidirectional association>)
	relation 754178 --->
	  a role_name "actionSchema" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 754178 // actionSchema (<unidirectional association>)
	  b parent class_ref 169602 // ActionSchema
      end

      attribute 778754 "notations"
	protected explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " of the form:  {startpos,piecename,endpos,piecetype}"
      end

      attribute 778882 "algebraicNotation"
	protected explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " algebraic notation for possible move"
      end

      classrelation 754306 // action (<unidirectional association>)
	relation 754306 --->
	  a role_name "action" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 754306 // action (<unidirectional association>)
	  b parent class_ref 538498 // GameAction
      end

      classrelation 754434 // actions (<unidirectional association>)
	relation 754434 --->
	  stereotype "List"
	  a role_name "actions" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 754434 // actions (<unidirectional association>)
	  b parent class_ref 538498 // GameAction
      end

      classrelation 754562 // thePerceptor (<unidirectional association>)
	relation 754562 --->
	  a role_name "thePerceptor" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 754562 // thePerceptor (<unidirectional association>)
	  b parent class_ref 538370 // ChessPercept
      end

      class 538754 "Myaction"
	visibility package stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 779010 "CAPTUREPOS"
	  public type class_ref 538754 // Myaction
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779138 "MOVE"
	  public type class_ref 538754 // Myaction
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779266 "ATTACK"
	  public type class_ref 538754 // Myaction
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779394 "CAPTUREPIECE"
	  public type class_ref 538754 // Myaction
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779522 "PROTECTPOS"
	  public type class_ref 538754 // Myaction
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779650 "PROTECTPIECE"
	  public type class_ref 538754 // Myaction
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779778 "CASTLING"
	  public type class_ref 538754 // Myaction
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 2315138 "GameState"
	public explicit_return_type ""
	nparams 2
	  param inout name "gamePiece" type class_ref 223746 // GamePiece
	  param inout name "actionSchema" type class_ref 169602 // ActionSchema
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The type of actions available to GameActions"
      end

      operation 2315266 "GameState"
	public explicit_return_type ""
	nparams 4
	  param inout name "pieceSentences" explicit_type "List<Sentence>"
	  param inout name "gamePiece" type class_ref 223746 // GamePiece
	  param inout name "actionSchema" type class_ref 169602 // ActionSchema
	  param inout name "thePerceptor" type class_ref 538370 // ChessPercept
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2315394 "getThePerceptor"
	public return_type class_ref 538370 // ChessPercept
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2315522 "setThePerceptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "thePerceptor" type class_ref 538370 // ChessPercept
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2315650 "getPieceSentences"
	public return_type class_ref 149634 // Sentence
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2315778 "setPieceSentences"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pieceSentences" explicit_type "List<Sentence>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2315906 "getGamePiece"
	public return_type class_ref 223746 // GamePiece
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2316034 "setGamePiece"
	public explicit_return_type "void"
	nparams 1
	  param inout name "gamePiece" type class_ref 223746 // GamePiece
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2316162 "getActionSchema"
	public return_type class_ref 169602 // ActionSchema
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2316290 "setActionSchema"
	public explicit_return_type "void"
	nparams 1
	  param inout name "actionSchema" type class_ref 169602 // ActionSchema
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2316418 "getAlgebraicNotation"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2316546 "setAlgebraicNotation"
	public explicit_return_type "void"
	nparams 1
	  param in name "algebraicNotation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2316674 "getAction"
	public return_type class_ref 538498 // GameAction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2316802 "setAction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 538498 // GameAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2316930 "getActions"
	public return_type class_ref 538498 // GameAction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "getActions
This method returns all GameActions applicable in this GameState
It is called by the Nondeterministic action function through the .apply function
@return
"
      end

      operation 2317058 "testEnd"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "action" type class_ref 538498 // GameAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "testEnd
This is the method used for the ChessGoalTest function
Determines which action to be used
@param action
@return true if this is the goal state. This results in an empty plan
"
      end

      operation 2317186 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 538242 "ChessPath"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ChessPath
This class is the chess version of the Path class as described:
Represents the path the agent travels through the AND-OR tree (see figure
4.10, page 135, AIMA3e).

@author Andrew Brown
@author Ruediger Lunde
"
      classrelation 752770 // <realization>
	relation 752770 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}<GameState>"
	    classrelation_ref 752770 // <realization>
	  b parent class_ref 195074 // LinkedList
      end

      operation 2311298 "append"
	public return_type class_ref 538242 // ChessPath
	nparams 1
	  param inout name "state" type class_ref 538114 // GameState
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new path containing this path's current states followed by the provided additional state.

@param state
           the state to be prepended.
@return a new Path that contains the passed in state along with this
        path's current states.
"
      end

      operation 2311426 "prepend"
	public return_type class_ref 538242 // ChessPath
	nparams 1
	  param inout name "state" type class_ref 538114 // GameState
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new path containing the provided additional state followed by this path's current states.

@param state
           the state to be prepended.
@return a new Path that contains the passed in state along with this
        path's current states.
"
      end
    end

    class 538370 "ChessPercept"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ChessPercept
This interface is to be used by the GameState and represent the Aperceptor class:
Creates a set of propositionalized action schemas from the lifted action schema
These action schemas are used as a basis for problem solving see the method createLiftedActions

@author oluf

"
      operation 2311554 "createLiftedActions"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "" explicit_type "String...names"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2311682 "checkOpponentthreat"
	public return_type class_ref 223746 // GamePiece
	nparams 3
	  param in name "name" explicit_type "String"
	  param in name "newPos" explicit_type "String"
	  param in name "fact" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2311810 "getOtherActions"
	public return_type class_ref 169602 // ActionSchema
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 538498 "GameAction"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "GameAction
Objects of this class perform a chess action.
The following action types are available:
CAPTURE Position (any own piece to this position. This may involve several MOVEs)
MOVE piece to Position (any piece to Position)
ATTACK opponent Piece -  This may involve several MOVEs
THREATEN opponent piece - This may involve several MOVEs
CAPTURE opponent Piece - This may involve several MOVEs
PROTECT own Piece - This may involve several MOVEs
PROTECT Position - This may involve several MOVEs
CASTLING- normal exchange of king and castle.
All action types must be broken down into separate steps of the MOVE action type.
Each such action is performed by a chess piece.
@author oluf

"
      classrelation 753410 // pieceSentences (<unidirectional association>)
	relation 753410 --->
	  stereotype "List"
	  a role_name "pieceSentences" init_value " new ArrayList<Sentence>()" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 753410 // pieceSentences (<unidirectional association>)
	  b parent class_ref 149634 // Sentence
      end

      classrelation 753538 // gamePiece (<unidirectional association>)
	relation 753538 --->
	  a role_name "gamePiece" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 753538 // gamePiece (<unidirectional association>)
	  b parent class_ref 223746 // GamePiece
      end

      classrelation 753666 // gameState (<unidirectional association>)
	relation 753666 --->
	  a role_name "gameState" protected
	    comment " The state to which this action belongs to"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 753666 // gameState (<unidirectional association>)
	  b parent class_ref 538114 // GameState
      end

      attribute 778626 "notations"
	protected explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " of the form:  {startpos,piecename,endpos,piecetype}"
      end

      classrelation 753794 // actionType (<unidirectional association>)
	relation 753794 --->
	  a role_name "actionType" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 753794 // actionType (<unidirectional association>)
	  b parent class_ref 538754 // Myaction
      end

      operation 2313474 "GameAction"
	public explicit_return_type ""
	nparams 2
	  param inout name "pieceSentences" explicit_type "List<Sentence>"
	  param inout name "gamePiece" type class_ref 223746 // GamePiece
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2313602 "GameAction"
	public explicit_return_type ""
	nparams 2
	  param inout name "gamePiece" type class_ref 223746 // GamePiece
	  param inout name "gameState" type class_ref 538114 // GameState
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2313730 "GameAction"
	public explicit_return_type ""
	nparams 1
	  param inout name "gamePiece" type class_ref 223746 // GamePiece
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2313858 "GameAction"
	public explicit_return_type ""
	nparams 3
	  param inout name "gamePiece" type class_ref 223746 // GamePiece
	  param inout name "gameState" type class_ref 538114 // GameState
	  param inout name "action" type class_ref 538754 // Myaction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is the preferred constructor
@param gamePiece
@param gameState
@param action The action type
"
      end

      operation 2313986 "getActionType"
	public return_type class_ref 538754 // Myaction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2314114 "setActionType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "actionType" type class_ref 538754 // Myaction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2314242 "getPieceSentences"
	public return_type class_ref 149634 // Sentence
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2314370 "setPieceSentences"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pieceSentences" explicit_type "List<Sentence>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2314498 "getGamePiece"
	public return_type class_ref 223746 // GamePiece
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2314626 "setGamePiece"
	public explicit_return_type "void"
	nparams 1
	  param inout name "gamePiece" type class_ref 223746 // GamePiece
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2314754 "getNotations"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2314882 "setNotations"
	public explicit_return_type "void"
	nparams 1
	  param inout name "notations" explicit_type "String"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2315010 "getStates"
	public return_type class_ref 538114 // GameState
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "getStates
This method returns a set of states as result of this action
@return A list of gamestates
"
      end
    end

    class 538882 "NondeterimineStepCostFunction"
      visibility public 
      nformals 2
      formal name "GameState" type "" explicit_default_value ""
        explicit_extends ""
      formal name "GameAction" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 135682 // StepCostFunction
        rank 0 explicit_value "GameState"
      actual class class_ref 135682 // StepCostFunction
        rank 1 explicit_value "GameAction"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "NondeteriminStepCostImpl
This class is an implementation of the aima.core.search.framework.problem.StepCostFunction interface.
It is an ordinary interface with defined method

The <b>step cost</b> of taking action a in state s to reach state s' is
denoted by c(s, a, s').
It is the implementation of a stepcost function as described in chapter 4.
@author oluf

@param <GameState>
"
      classrelation 754690 // <realization>
	relation 754690 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 754690 // <realization>
	  b parent class_ref 135682 // StepCostFunction
      end

      operation 2317314 "applyAsDouble"
	cpp_inline public explicit_return_type "double"
	nparams 3
	  param inout name "s" explicit_type "GameState"
	  param inout name "a" explicit_type "GameAction"
	  param inout name "sDelta" explicit_type "GameState"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 539010 "NonDetermineChessActionFunction"
      visibility public 
      nactuals 2
      actual class class_ref 135298 // ActionsFunction
        rank 0 value class_ref 538114 // GameState
      actual class class_ref 135298 // ActionsFunction
        rank 1 value class_ref 538498 // GameAction
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "NonDetermineChessActionFunction
This class is an implementation of the aima.core.search.framework.problem.ActionsFunction.
As described in the interface:
Given a particular state s, ACTIONS(s) returns the set of actions that can be
executed in s. We say that each of these actions is <b>applicable</b> in s.

@param <GameState> The type used to represent states
@param <A> The type of the actions to be used to navigate through the state space
@author oluf

@param <GameState>  These are type declarations, and so, could be any type
@param <GameAction>
"
      classrelation 754818 // <realization>
	relation 754818 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 754818 // <realization>
	  b parent class_ref 135298 // ActionsFunction
      end

      operation 2317442 "apply"
	public return_type class_ref 538498 // GameAction
	nparams 1
	  param inout name "state" type class_ref 538114 // GameState
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 539138 "NonDetermineResultFunction"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "NonDetermineResultFunction
This class is an implementation of the aima.core.search.nondeterministic.ResultsFunction
as described in chapter 4 (page 134) of the AIMA book.
implements ResultsFunction<GameState,GameAction> This implementation is removed
@author oluf

"
      classrelation 754946 // state (<unidirectional association>)
	relation 754946 --->
	  a role_name "state" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 754946 // state (<unidirectional association>)
	  b parent class_ref 538114 // GameState
      end

      classrelation 755074 // action (<unidirectional association>)
	relation 755074 --->
	  a role_name "action" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 755074 // action (<unidirectional association>)
	  b parent class_ref 538498 // GameAction
      end

      classrelation 755202 // gameStates (<unidirectional association>)
	relation 755202 --->
	  stereotype "List"
	  a role_name "gameStates" private
	    comment " The population of gamestates"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 755202 // gameStates (<unidirectional association>)
	  b parent class_ref 538114 // GameState
      end

      operation 2317570 "NonDetermineResultFunction"
	public explicit_return_type ""
	nparams 3
	  param inout name "state" type class_ref 538114 // GameState
	  param inout name "action" type class_ref 538498 // GameAction
	  param inout name "gameStates" explicit_type "List<GameState>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NonDetermineResultFunction
THe constructor of the NonDetermineResultFunction
@param state
@param action
@param gameStates The population of game states
"
      end

      operation 2317698 "getState"
	public return_type class_ref 538114 // GameState
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2317826 "setState"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" type class_ref 538114 // GameState
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2317954 "getAction"
	public return_type class_ref 538498 // GameAction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2318082 "setAction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 538498 // GameAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2318210 "results"
	public return_type class_ref 538114 // GameState
	nparams 2
	  param inout name "state" type class_ref 538114 // GameState
	  param inout name "action" type class_ref 538498 // GameAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the description of what each action does.
The resultsFn is an ordinary interface with one method: results(state,action)
It is called from the orSearch method when the problem testGoal function for a chosen state returns false.
The call is carried out for every state in the population of states, and every action belonging to this state 
@return the description of what each action does - a list of possible outcome states.
"
      end
    end
  end

  deploymentview 222338 "nondeterministic"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 460290 "AndOrChessSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.Metrics;
import aima.core.search.nondeterministic.NondeterministicProblem;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
${definition}"
      associated_elems
	class_ref 537730 // AndOrChessSearch
      end
    end

    artifact 460418 "ChessPath"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.LinkedList;
${definition}"
      associated_elems
	class_ref 538242 // ChessPath
      end
    end

    artifact 460546 "ChessPercept"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import aima.core.logic.planning.ActionSchema;
import no.games.chess.GamePiece;
${definition}"
      associated_elems
	class_ref 538370 // ChessPercept
      end
    end

    artifact 460674 "ChessPlan"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.LinkedList;
import java.util.List;
${definition}"
      associated_elems
	class_ref 537858 // ChessPlan
      end
    end

    artifact 460802 "GameAction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
import aima.core.logic.fol.parsing.ast.Sentence;
import no.games.chess.GamePiece;
import no.games.chess.search.nondeterministic.GameState.Myaction;
${definition}"
      associated_elems
	class_ref 538498 // GameAction
      end
    end

    artifact 460930 "GameState"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
import aima.core.logic.fol.parsing.ast.Sentence;
import aima.core.logic.planning.ActionSchema;
import no.games.chess.GamePiece;
${definition}"
      associated_elems
	class_ref 538114 // GameState
      end
    end

    artifact 461058 "NondeterimineStepCostFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.problem.StepCostFunction;
import no.games.chess.planning.ChessPlannerAction;
${definition}"
      associated_elems
	class_ref 538882 // NondeterimineStepCostFunction
      end
    end

    artifact 461186 "NonDetermineChessActionFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import aima.core.search.framework.problem.ActionsFunction;
${definition}"
      associated_elems
	class_ref 539010 // NonDetermineChessActionFunction
      end
    end

    artifact 461314 "NonDetermineResultFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.LinkedList;
import java.util.List;
import aima.core.search.nondeterministic.ResultsFunction;
${definition}"
      associated_elems
	class_ref 539138 // NonDetermineResultFunction
      end
    end

    artifact 461442 "NondeterministicChessProblem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.problem.ActionsFunction;
import aima.core.search.framework.problem.GoalTest;
import aima.core.search.framework.problem.StepCostFunction;
import aima.core.search.nondeterministic.ResultsFunction;
import java.util.List;
${definition}"
      associated_elems
	class_ref 537986 // NondeterministicChessProblem
      end
    end
  end
end
