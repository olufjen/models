class NQueensCspApp
!!!557186.java!!!	main(inout args : String [[]]) : void
        launch(args);
!!!557314.java!!!	getTitle() : String
        return "N-Queens CSP App";
!!!557442.java!!!	createRootPane() : Pane
        BorderPane root = new BorderPane();

        StackPane stateView = new StackPane();
        stateViewCtrl = new NQueensViewCtrl(stateView);

        List<Parameter> params = createParameters();

        TaskExecutionPaneBuilder builder = new TaskExecutionPaneBuilder();
        builder.defineParameters(params);
        builder.defineStateView(stateView);
        builder.defineInitMethod(this::initialize);
        builder.defineTaskMethod(this::startExperiment);
        taskPaneCtrl = builder.getResultFor(root);
        taskPaneCtrl.setParam(TaskExecutionPaneCtrl.PARAM_EXEC_SPEED, 0);

        return root;
!!!557570.java!!!	createParameters() : Parameter
        Parameter p1 = new Parameter(PARAM_STRATEGY, "Backtracking", "Min-Conflicts");
        Parameter p2 = new Parameter(PARAM_VAR_SELECT, "Default", "MRV", "DEG", "MRV&DEG");
        Parameter p3 = new Parameter(PARAM_VAL_SELECT, "Default", "LCV");
        Parameter p4 = new Parameter(PARAM_INFERENCE, "None", "Forward Checking", "AC3");
        p2.setDependency(PARAM_STRATEGY, "Backtracking");
        p3.setDependency(PARAM_STRATEGY, "Backtracking");
        p4.setDependency(PARAM_STRATEGY, "Backtracking");
        Parameter p5 = new Parameter(PARAM_BOARD_SIZE, 4, 8, 16, 32, 64);
        p5.setDefaultValueIndex(1);
        return Arrays.asList(p1, p2, p3, p4, p5);
!!!557698.java!!!	initialize() : void
        csp = new NQueensCSP(taskPaneCtrl.getParamAsInt(PARAM_BOARD_SIZE));
        Object strategy = taskPaneCtrl.getParamValue(PARAM_STRATEGY);
        if (strategy.equals("Backtracking")) {
            FlexibleBacktrackingSolver<Variable, Integer> bSolver = new FlexibleBacktrackingSolver<>();
            switch ((String) taskPaneCtrl.getParamValue(PARAM_VAR_SELECT)) {
                case "MRV": bSolver.set(CspHeuristics.mrv()); break;
                case "DEG": bSolver.set(CspHeuristics.deg()); break;
                case "MRV&DEG": bSolver.set(CspHeuristics.mrvDeg()); break;
            }
            switch ((String) taskPaneCtrl.getParamValue(PARAM_VAL_SELECT)) {
                case "LCV": bSolver.set(CspHeuristics.lcv()); break;
            }
            switch ((String) taskPaneCtrl.getParamValue(PARAM_INFERENCE)) {
                case "Forward Checking": bSolver.set(new ForwardCheckingStrategy<>()); break;
                case "AC3": bSolver.set(new AC3Strategy<>()); break;
            }
            solver = bSolver;
        } else if (strategy.equals("Min-Conflicts")) {
            solver = new MinConflictsSolver<>(1000);

        }
        solver.addCspListener(stepCounter);
        solver.addCspListener((csp, assign, var) -> { if (assign != null) updateStateView(getBoard(assign));});
        stepCounter.reset();
        stateViewCtrl.update(new NQueensBoard(csp.getVariables().size()));
        taskPaneCtrl.setStatus("");
!!!557826.java!!!	cleanup() : void
        taskPaneCtrl.cancelExecution();
!!!557954.java!!!	startExperiment() : void
        Optional<Assignment<Variable, Integer>> solution = solver.solve(csp);
        if (solution.isPresent()) {
            NQueensBoard board = getBoard(solution.get());
            stateViewCtrl.update(board);
        }
!!!558082.java!!!	getBoard(inout assignment : Assignment) : NQueensBoard
        NQueensBoard board = new NQueensBoard(csp.getVariables().size());
        for (Variable var : assignment.getVariables()) {
            int col = Integer.parseInt(var.getName().substring(1)) - 1;
            int row = assignment.getValue(var) - 1;
            board.addQueenAt(new XYLocation(col, row));
        }
        return board;
!!!558210.java!!!	updateStateView(inout board : NQueensBoard) : void
        Platform.runLater(() -> {
            stateViewCtrl.update(board); taskPaneCtrl.setStatus(stepCounter.getResults().toString()); });
        taskPaneCtrl.waitAfterStep();
