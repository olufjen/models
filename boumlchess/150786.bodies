class DecisionTreeLearner
!!!231682.java!!!	DecisionTreeLearner()
		this.defaultValue = "Unable To Classify";

!!!231810.java!!!	DecisionTreeLearner(inout tree : DecisionTree, in defaultValue : String)
		this.tree = tree;
		this.defaultValue = defaultValue;
!!!231938.java!!!	train(inout ds : DataSet) : void
		List<String> attributes = ds.getNonTargetAttributes();
		this.tree = decisionTreeLearning(ds, attributes,
				new ConstantDecisonTree(defaultValue));
!!!232066.java!!!	predict(inout e : Example) : String
		return (String) tree.predict(e);
!!!232194.java!!!	test(inout ds : DataSet) : int
		int[] results = new int[] { 0, 0 };

		for (Example e : ds.examples) {
			if (e.targetValue().equals(tree.predict(e))) {
				results[0] = results[0] + 1;
			} else {
				results[1] = results[1] + 1;
			}
		}
		return results;
!!!232322.java!!!	getDecisionTree() : DecisionTree
		return tree;
!!!232450.java!!!	decisionTreeLearning(inout ds : DataSet, inout attributeNames : List<String>, inout defaultTree : ConstantDecisonTree) : DecisionTree
		if (ds.size() == 0) {
			return defaultTree;
		}
		if (allExamplesHaveSameClassification(ds)) {
			return new ConstantDecisonTree(ds.getExample(0).targetValue());
		}
		if (attributeNames.size() == 0) {
			return majorityValue(ds);
		}
		String chosenAttribute = chooseAttribute(ds, attributeNames);

		DecisionTree tree = new DecisionTree(chosenAttribute);
		ConstantDecisonTree m = majorityValue(ds);

		List<String> values = ds.getPossibleAttributeValues(chosenAttribute);
		for (String v : values) {
			DataSet filtered = ds.matchingDataSet(chosenAttribute, v);
			List<String> newAttribs = Util.removeFrom(attributeNames,
					chosenAttribute);
			DecisionTree subTree = decisionTreeLearning(filtered, newAttribs, m);
			tree.addNode(v, subTree);

		}

		return tree;
!!!232578.java!!!	majorityValue(inout ds : DataSet) : ConstantDecisonTree
		Learner learner = new MajorityLearner();
		learner.train(ds);
		return new ConstantDecisonTree(learner.predict(ds.getExample(0)));
!!!232706.java!!!	chooseAttribute(inout ds : DataSet, inout attributeNames : List<String>) : String
		double greatestGain = 0.0;
		String attributeWithGreatestGain = attributeNames.get(0);
		for (String attr : attributeNames) {
			double gain = ds.calculateGainFor(attr);
			if (gain > greatestGain) {
				greatestGain = gain;
				attributeWithGreatestGain = attr;
			}
		}

		return attributeWithGreatestGain;
!!!232834.java!!!	allExamplesHaveSameClassification(inout ds : DataSet) : boolean
		String classification = ds.getExample(0).targetValue();
		Iterator<Example> iter = ds.iterator();
		while (iter.hasNext()) {
			Example element = iter.next();
			if (!(element.targetValue().equals(classification))) {
				return false;
			}

		}
		return true;
