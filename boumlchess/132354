format 223
"ast" // aima::core::logic::propositional::parsing::ast
  revision 3
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\aima/core/logic/propositional/parsing/ast/"
  java_package "aima.core.logic.propositional.parsing.ast"
  classview 131074 "ast"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 144514 "Sentence"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page 244.<br>
<br>
The base of the knowledge representation language for propositional logic.
Note: this class hierarchy defines the abstract syntax representation used
for representing propositional logic.

@author Ciaran O'Reilly
@author Ravi Mohan

"
      classrelation 198786 // <realization>
	relation 198786 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 198786 // <realization>
	  b parent class_ref 156546 // ParseTreeNode
      end

      operation 377090 "getConnective"
	public return_type class_ref 173186 // Connective
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return the logical connective associated with this sentence if it has
        one (i.e. is a ComplexSentence), null otherwise.
"
      end

      operation 377218 "getNumberSimplerSentences"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return the number of simpler sentences contained in this sentence. Will
        only be > 0 if a Complex Sentence.
"
      end

      operation 377346 "getSimplerSentence"
	public return_type class_ref 144514 // Sentence
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the simplified sentence, at the specified offset (starts at 0),
contained by this Sentence if it is a Complex Sentence, null otherwise.

@param offset
           the offset of the contained simplified sentence to retrieve.
@return the simplified sentence, at the specified offset, contained by
        this sentence (if a complex sentence), null otherwise.
"
      end

      operation 377474 "isNotSentence"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if a complex sentence with a Not connective, false
        otherwise.
"
      end

      operation 377602 "isAndSentence"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if a complex sentence with an And connective, false
        otherwise.
"
      end

      operation 377730 "isOrSentence"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if a complex sentence with an Or connective, false
        otherwise.
"
      end

      operation 377858 "isImplicationSentence"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if a complex sentence with an Implication connective, false
        otherwise.
"
      end

      operation 377986 "isBiconditionalSentence"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if a complex sentence with a Biconditional connective, false
        otherwise.
"
      end

      operation 378114 "isPropositionSymbol"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if a proposition symbol, false otherwise.
"
      end

      operation 378242 "isUnarySentence"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if a complex sentence containing a single simpler sentence,
        false otherwise.
"
      end

      operation 378370 "isBinarySentence"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if a complex sentence containing two simpler sentences,
        false otherwise.
"
      end

      operation 378498 "accept"
	public explicit_return_type "R"
	nparams 2
	  param inout name "plv" type class_ref 172546 // PLVisitor
	  param inout name "arg" explicit_type "A"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A, R> ${type} ${name}${(}${t0}<A, R> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allow a PLVisitor to walk over the abstract syntax tree represented by this
Sentence.

@param plv
           a Propositional Logic visitor.
@param arg
           an optional argument for use by the visior.
@return a result specific to the visitors behavior.
"
      end

      operation 378626 "bracketSentenceIfNecessary"
	public explicit_return_type "String"
	nparams 2
	  param inout name "parentConnective" type class_ref 173186 // Connective
	  param inout name "childSentence" type class_ref 144514 // Sentence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine that will create a string representation of a given
Sentence and place it inside brackets if it is a complex sentence that
has lower precedence than this complex sentence.<br>
<br>
Note: this is a form of pretty printing, whereby we only add brackets in
the concrete syntax representation as needed to ensure it can be parsed
back again into an equivalent abstract syntax representation used here.

@param parentConnective
           the connective of the parent sentence.
@param childSentence
           a simpler child sentence.
@return a String representation of the Sentence, bracketed if the parent
        based on its connective has higher precedence.
"
      end

      operation 378754 "newDisjunction"
	class_operation public return_type class_ref 144514 // Sentence
	nparams 1
	  param inout name "" explicit_type "Sentence...disjuncts"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a disjunction of disjuncts.
@param disjuncts
			the disjuncts from which to create the disjunction.
@return a disjunction of the given disjuncts.
"
      end

      operation 378882 "newDisjunction"
	class_operation public return_type class_ref 144514 // Sentence
	nparams 1
	  param inout name "disjuncts" explicit_type "List<? extends Sentence>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a disjunction of disjuncts.
@param disjuncts
			the disjuncts from which to create the disjunction.
@return a disjunction of the given disjuncts.
"
      end

      operation 379010 "newConjunction"
	class_operation public return_type class_ref 144514 // Sentence
	nparams 1
	  param inout name "" explicit_type "Sentence...conjuncts"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a conjunction of conjuncts.
@param conjuncts
			the conjuncts from which to create the conjunction.
@return a conjunction of the given conjuncts.
"
      end

      operation 379138 "newConjunction"
	class_operation public return_type class_ref 144514 // Sentence
	nparams 1
	  param inout name "conjuncts" explicit_type "List<? extends Sentence>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a conjunction of conjuncts.
@param conjuncts
			the conjuncts from which to create the conjunction.
@return a conjunction of the given conjuncts.
"
      end

      operation 379266 "hasConnective"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "connective" type class_ref 173186 // Connective
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " PROTECTED
"
      end
    end

    class 144770 "PropositionSymbol"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page 244.<br>
<br>
<b>Proposition Symbol:</b> Each such symbol stands for a proposition that can
be true or false. There are two proposition symbols with fixed meanings:
<i>True</i> the always-true proposition and <i>False</i> the always-false
proposition.<br>
<br>
<b>Note</b>: While the book states:<br>
'We use symbols that start with an upper case letter and may contain other
letters or subscripts'. In this implementation we allow any legal java
identifier to stand in for a proposition symbol.

@author Ciaran O'Reilly
@author Ravi Mohan

@see SourceVersion#isIdentifier(CharSequence)
"
      classrelation 199426 // <generalisation>
	relation 199426 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 199426 // <generalisation>
	  b parent class_ref 173314 // AtomicSentence
      end

      attribute 180482 "TRUE_SYMBOL"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"True\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 180610 "FALSE_SYMBOL"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"False\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 199554 // TRUE (<unidirectional association>)
	relation 199554 --->
	  a role_name "TRUE" init_value " new PropositionSymbol(TRUE_SYMBOL)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 199554 // TRUE (<unidirectional association>)
	  b parent class_ref 144770 // PropositionSymbol
      end

      classrelation 199682 // FALSE (<unidirectional association>)
	relation 199682 --->
	  a role_name "FALSE" init_value " new PropositionSymbol(FALSE_SYMBOL)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 199682 // FALSE (<unidirectional association>)
	  b parent class_ref 144770 // PropositionSymbol
      end

      attribute 180738 "symbol"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 381570 "PropositionSymbol"
	public explicit_return_type ""
	nparams 1
	  param in name "symbol" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param symbol
           the symbol uniquely identifying the proposition.
"
      end

      operation 381698 "isAlwaysTrue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if this is the always 'True' proposition symbol, false
        otherwise.
"
      end

      operation 381826 "isAlwaysTrueSymbol"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "symbol" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if the symbol passed in is the always 'True' proposition
        symbol, false otherwise.
"
      end

      operation 381954 "isAlwaysFalse"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if this is the always 'False' proposition symbol, false
        other.
"
      end

      operation 382082 "isAlwaysFalseSymbol"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "symbol" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return true if the symbol passed in is the always 'False' proposition
        symbol, false other.
"
      end

      operation 382210 "isPropositionSymbol"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "symbol" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the given symbol is a legal proposition symbol.

@param symbol
           a symbol to be tested.
@return true if the given symbol is a legal proposition symbol, false
        otherwise.
"
      end

      operation 382338 "isPropositionSymbolIdentifierStart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the given character can be at the beginning of a proposition
symbol.

@param ch
           a character.
@return true if the given character can be at the beginning of a
        proposition symbol representation, false otherwise.
"
      end

      operation 382466 "isPropositionSymbolIdentifierPart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the given character is part of a proposition symbol.

@param ch
           a character.
@return true if the given character is part of a proposition symbols
        representation, false otherwise.
"
      end

      operation 382594 "getSymbol"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return the symbol uniquely identifying the proposition.
"
      end

      operation 382722 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 382850 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 382978 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 172674 "ComplexSentence"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page 244.<br>
<br>
<b>Complex Sentence:</b> are constructed from simpler sentences, using
parentheses (and square brackets) and logical connectives.

@author Ciaran O'Reilly
@author Ravi Mohan 
"
      classrelation 199042 // <generalisation>
	relation 199042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 199042 // <generalisation>
	  b parent class_ref 144514 // Sentence
      end

      classrelation 199170 // connective (<unidirectional association>)
	relation 199170 --->
	  a role_name "connective" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 199170 // connective (<unidirectional association>)
	  b parent class_ref 173186 // Connective
      end

      classrelation 199298 // simplerSentences (<unidirectional association>)
	relation 199298 --->
	  a role_name "simplerSentences" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 199298 // simplerSentences (<unidirectional association>)
	  b parent class_ref 144514 // Sentence
      end

      attribute 179074 "cachedHashCode"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Lazy initialize these values.
"
      end

      attribute 179202 "cachedConcreteSyntax"
	private explicit_type "String"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 379394 "ComplexSentence"
	public explicit_return_type ""
	nparams 2
	  param inout name "connective" type class_ref 173186 // Connective
	  param inout name "" explicit_type "Sentence...sentences"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param connective
           the complex sentence's connective.
@param sentences
           the simpler sentences making up the complex sentence.
"
      end

      operation 379522 "ComplexSentence"
	public explicit_return_type ""
	nparams 3
	  param inout name "sentenceL" type class_ref 144514 // Sentence
	  param inout name "binaryConnective" type class_ref 173186 // Connective
	  param inout name "sentenceR" type class_ref 144514 // Sentence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience constructor for binary sentences.

@param sentenceL
			the left hand sentence.
@param binaryConnective
			the binary connective.
@param sentenceR
 		the right hand sentence.
"
      end

      operation 379650 "getConnective"
	public return_type class_ref 173186 // Connective
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 379778 "getNumberSimplerSentences"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 379906 "getSimplerSentence"
	public return_type class_ref 144514 // Sentence
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 380034 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 380162 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 380290 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 380418 "assertLegalArguments"
	private explicit_return_type "void"
	nparams 2
	  param inout name "connective" type class_ref 173186 // Connective
	  param inout name "" explicit_type "Sentence...sentences"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " PRIVATE
"
      end
    end

    class 173186 "Connective"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page 244.<br>
<br>

<pre>
<b>Logical Connectives:</b> There are five connectives in common use:
1. ~   (not).
2. &   (and).
3. |   (or).
4. =>  (implication).
5. <=> (biconditional).

Note: We use ASCII characters that commonly have the same meaning to those 
symbols used in the book.

OPERATOR PRECEDENCE: ~, &, |, =>, <=>
</pre>

@author Ciaran O'Reilly

"
      attribute 179330 "NOT"
	public type class_ref 173186 // Connective
	cpp_decl ""
	java_decl "  ${@}${name}(\"~\", 10),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 179458 "AND"
	public type class_ref 173186 // Connective
	cpp_decl ""
	java_decl "  ${@}${name}(\"&\", 8),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " i.e. highest to lowest precedence."
      end

      attribute 179586 "OR"
	public type class_ref 173186 // Connective
	cpp_decl ""
	java_decl "  ${@}${name}(\"|\", 6),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 179714 "IMPLICATION"
	public type class_ref 173186 // Connective
	cpp_decl ""
	java_decl "  ${@}${name}(\"=>\", 4),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 179842 "BICONDITIONAL"
	public type class_ref 173186 // Connective
	cpp_decl ""
	java_decl "  ${@}${name}(\"<=>\", 2),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 380546 "getSymbol"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return the symbol for this connective.
"
      end

      operation 380674 "getPrecedence"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@return the precedence associated with this connective.
"
      end

      operation 380802 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 380930 "isConnective"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "symbol" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if a given symbol is representative of a connective.

@param symbol
           a symbol to be tested whether or not is represents a
           connective.
@return true if the symbol passed in is representative of a connective.
"
      end

      operation 381058 "get"
	class_operation public return_type class_ref 173186 // Connective
	nparams 1
	  param in name "symbol" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the connective associated with the given symbolic representation.

@param symbol
           a symbol for which a corresponding connective is wanted.
@return the connective associated with a given symbol.
@throws IllegalArgumentException
            if a connective cannot be found that matches the given
            symbol.
"
      end

      operation 381186 "isConnectiveIdentifierStart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the given character is at the beginning of a connective.

@param ch
           a character.
@return true if the given character is at the beginning of a connective's
        symbolic representation, false otherwise.
"
      end

      operation 381314 "isConnectiveIdentifierPart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the given character is part of a connective.

@param ch
           a character.
@return true if the given character is part of a connective's symbolic
        representation, false otherwise.
"
      end

      attribute 179970 "_connectiveLeadingChars"
	class_attribute const_attribute private explicit_type "Set<Character>"
	init_value " Util.createSet('~', '&', '|', '=', '<')"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " PRIVATE

"
      end

      attribute 180098 "_connectiveChars"
	class_attribute const_attribute private explicit_type "Set<Character>"
	init_value " Util.createSet('~', '&', '|', '=', '<', '>')"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 180226 "symbol"
	const_attribute private explicit_type "String"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 180354 "precedence"
	const_attribute private explicit_type "int"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 381442 "Connective"
	package explicit_return_type ""
	nparams 2
	  param in name "symbol" explicit_type "String"
	  param in name "precedence" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 173314 "AtomicSentence"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page 244.<br>
<br>
The <b>atomic sentences</b> consist of a single proposition symbol.

@author Ravi Mohan
@author Ciaran O'Reilly

"
      classrelation 198914 // <generalisation>
	relation 198914 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 198914 // <generalisation>
	  b parent class_ref 144514 // Sentence
      end
    end
  end

  deploymentview 133890 "ast"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 163714 "Sentence"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import java.util.List;
import aima.core.logic.common.ParseTreeNode;
import aima.core.logic.propositional.parsing.PLVisitor;
import aima.core.util.Util;
${definition}"
      associated_elems
	class_ref 144514 // Sentence
      end
    end

    artifact 163842 "AtomicSentence"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 173314 // AtomicSentence
      end
    end

    artifact 163970 "ComplexSentence"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 172674 // ComplexSentence
      end
    end

    artifact 164098 "Connective"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
import aima.core.util.Util;
${definition}"
      associated_elems
	class_ref 173186 // Connective
      end
    end

    artifact 164226 "PropositionSymbol"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.SourceVersion;
${definition}"
      associated_elems
	class_ref 144770 // PropositionSymbol
      end
    end
  end
end
