class BCProofStep
!!!1748866.java!!!	BCProofStep(inout implication : Clause, inout predecessors : List<ProofStep>, inout goal : Literal)
		this.implication = implication;
		this.predecessors = predecessors;
		this.goal = goal;
		this.setStepNumber(this.predecessors.size()+1);
!!!1748994.java!!!	getPredecessorSteps() : ProofStep
		return predecessors;
!!!1749122.java!!!	getProof() : String
		return this.toString();
!!!1749250.java!!!	toString() : String
		StringBuilder result = new StringBuilder();
		if (implication.getLiterals().size()>1){
			int i =0;
			for (Literal l :
					implication.getNegativeLiterals()) {
				result.append((new Literal(l.getAtomicSentence())).toString());
				i++;
				if (i<implication.getNegativeLiterals().size())
					result.append(" AND ");
			}
			result.append(" => ");
			result.append(implication.getPositiveLiterals().get(0));
			return result.toString();
		}
		result.append(implication.getLiterals().toString());
		return result.toString();
!!!1749378.java!!!	getJustification() : String
		return "To Prove Backwards :" + goal.toString();
