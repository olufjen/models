format 223
"framework" // aima::core::search::framework
  revision 4
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\aima/core/search/framework/"
  java_package "aima.core.search.framework"
  classview 129282 "framework"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 133634 "Metrics"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Stores key-value pairs for efficiency analysis.

@author Ravi Mohan
@author Ruediger Lunde
"
      attribute 189698 "hash"
	private explicit_type "String, String"
	stereotype "Hashtable"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 460546 "Metrics"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 460674 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 460802 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 460930 "incrementInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 461058 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 461186 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 461314 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 461442 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 461570 "get"
	public explicit_return_type "String"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 461698 "keySet"
	public explicit_return_type "Set<String>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 461826 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sorts the key-value pairs by key names and formats them as equations. "
      end
    end

    class 135170 "Node"
      visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): Figure 3.10, page
79.<br>

Figure 3.10 Nodes are the data structures from which the search tree is
constructed. Each has a parent, a state, and various bookkeeping fields.
Arrows point from child to parent.<br>
<br>
Search algorithms require a data structure to keep track of the search tree
that is being constructed. For each node n of the tree, we have a structure
that contains four components:
<ul>
<li>n.STATE: the state in the state space to which the node corresponds;</li>
<li>n.PARENT: the node in the search tree that generated this node;</li>
<li>n.ACTION: the action that was applied to the parent to generate the node;
</li>
<li>n.PATH-COST: the cost, traditionally denoted by g(n), of the path from
the initial state to the node, as indicated by the parent pointers.</li>
</ul>

@param <S> The type used to represent states
@param <A> The type of the actions to be used to navigate through the state space

@author Ravi Mohan
@author Ciaran O'Reilly
@author Mike Stampone
@author Ruediger Lunde
"
      attribute 189826 "state"
	private explicit_type "S"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " n.STATE: the state in the state space to which the node corresponds;
"
      end

      classrelation 231938 // parent (<unidirectional association>)
	relation 231938 --->
	  a role_name "parent" private
	    comment " n.PARENT: the node in the search tree that generated this node;
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<S, A> ${name}${value};
"
	    classrelation_ref 231938 // parent (<unidirectional association>)
	  b parent class_ref 135170 // Node
      end

      attribute 189954 "action"
	private explicit_type "A"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " n.ACTION: the action that was applied to the parent to generate the node;
"
      end

      attribute 190082 "pathCost"
	private explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " n.PATH-COST: the cost, traditionally denoted by g(n), of the path from
 the initial state to the node, as indicated by the parent pointers.
"
      end

      operation 461954 "Node"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "state" explicit_type "S"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a node with the specified state.

@param state
           the state in the state space to which the node corresponds.
"
      end

      operation 462082 "Node"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param inout name "state" explicit_type "S"
	  param inout name "parent" type class_ref 135170 // Node
	  param inout name "action" explicit_type "A"
	  param in name "pathCost" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<S, A> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a node with the specified state, parent, action, and path
cost.

@param state
           the state in the state space to which the node corresponds.
@param parent
           the node in the search tree that generated the node.
@param action
           the action that was applied to the parent to generate the
           node.
@param pathCost
           full pathCost from the root node to here, typically
           the root's path costs plus the step costs for executing
           the the specified action.
"
      end

      operation 462210 "getState"
	cpp_inline public explicit_return_type "S"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the state in the state space to which the node corresponds.

@return the state in the state space to which the node corresponds.
"
      end

      operation 462338 "getParent"
	cpp_inline public return_type class_ref 135170 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S, A> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this node's parent node, from which this node was generated.

@return the node's parenet node, from which this node was generated.
"
      end

      operation 462466 "getAction"
	cpp_inline public explicit_return_type "A"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the action that was applied to the parent to generate the node.

@return the action that was applied to the parent to generate the node.
"
      end

      operation 462594 "getPathCost"
	cpp_inline public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cost of the path from the initial state to this node as
indicated by the parent pointers.

@return the cost of the path from the initial state to this node as
        indicated by the parent pointers.
"
      end

      operation 462722 "isRootNode"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the node has no parent.

@return <code>true</code> if the node has no parent.
"
      end

      operation 462850 "toString"
	cpp_inline public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 137730 "SearchForActions"
      visibility public stereotype "interface"
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for all AIMA3e search algorithms which store at least a part of the
exploration history as search tree and return a list of actions leading from
the initial state to a goal state. This search framework expects all search
algorithms to provide some metrics and to actually explore the search space
by expanding nodes.

@param <S> The type used to represent states
@param <A> The type of the actions to be used to navigate through the state space

@author Ruediger Lunde
"
      operation 463874 "findActions"
	cpp_inline public explicit_return_type "Optional<List<A>>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of actions leading to a goal state if a goal was found,
otherwise empty. Note that the list can be empty which means that the
initial state is a goal state.

@param p
           the search problem

@return a (possibly empty) list of actions or empty
"
      end

      operation 464002 "getMetrics"
	cpp_inline public return_type class_ref 133634 // Metrics
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the metrics of the search.
"
      end

      operation 464130 "addNodeListener"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to the list of node listeners. It is informed whenever a
node is expanded during search.
"
      end

      operation 464258 "removeNodeListener"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from the list of node listeners.
"
      end
    end

    class 194306 "NodeExpander"
      visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Instances of this class are responsible for node creation and expansion. They
compute path costs, support progress tracking, and count the number of
{@link #expand(Node, Problem)} calls.

@param <S> The type used to represent states
@param <A> The type of the actions to be used to navigate through the state space

@author Ruediger Lunde
"
      attribute 190210 "useParentLinks"
	protected explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 462978 "useParentLinks"
	cpp_inline public return_type class_ref 194306 // NodeExpander
	nparams 1
	  param inout name "s" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies {@link #useParentLinks} and returns this node expander. When
using local search to search for states, parent links are not needed and
lead to unnecessary memory consumption.
"
      end

      operation 463106 "createRootNode"
	cpp_inline public return_type class_ref 135170 // Node
	nparams 1
	  param inout name "state" explicit_type "S"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S, A> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////////////////////////////////////////////////////////////
 expanding nodes

Factory method, which creates a root node for the specified state.
"
      end

      operation 463234 "createNode"
	cpp_inline public return_type class_ref 135170 // Node
	nparams 4
	  param inout name "state" explicit_type "S"
	  param inout name "parent" type class_ref 135170 // Node
	  param inout name "action" explicit_type "A"
	  param in name "stepCost" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S, A> ${name}${(}${t0} ${p0}, ${t1}<S, A> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the path cost for getting from the root node state via the
parent node state to the specified state, creates a new node for the
specified state, adds it as child of the provided parent (if
{@link #useParentLinks} is true), and returns it.
"
      end

      operation 463362 "expand"
	cpp_inline public return_type class_ref 135170 // Node
	nparams 2
	  param inout name "node" type class_ref 135170 // Node
	  param inout name "problem" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}<S, A>> ${name}${(}${t0}<S, A> ${p0}, ${t1}<S, A> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the children obtained from expanding the specified node in the
specified problem.

@param node
           the node to expand
@param problem
           the problem the specified node is within.

@return the children obtained from expanding the specified node in the
        specified problem.
"
      end

      attribute 190338 "nodeListeners"
	private explicit_type "Consumer<Node<S, A>>"
	init_value " new ArrayList<>()"
	stereotype "List"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "/////////////////////////////////////////////////////////////////////
 progress tracking

All node listeners added to this list get informed whenever a node is
expanded.

"
      end

      operation 463490 "addNodeListener"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to the list of node listeners. It is informed whenever a
node is expanded during search.
"
      end

      operation 463618 "removeNodeListener"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from the list of node listeners.
"
      end

      operation 463746 "notifyNodeListeners"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 135170 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 194434 "QueueBasedSearch"
      abstract visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 137730 // SearchForActions
        rank 0 explicit_value "S"
      actual class class_ref 137730 // SearchForActions
        rank 1 explicit_value "A"
      actual class class_ref 194562 // SearchForStates
        rank 0 explicit_value ""
      actual class class_ref 194562 // SearchForStates
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base class for all search algorithms which use a queue to manage not yet
explored nodes. Subclasses are responsible for node prioritization. They
define the concrete queue to be used as frontier in their constructor.
Search space exploration control is always delegated to some
<code>QueueSearch</code> implementation.

@param <S> The type used to represent states
@param <A> The type of the actions to be used to navigate through the state space

@author Ruediger Lunde
"
      classrelation 232066 // <realization>
	relation 232066 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 232066 // <realization>
	  b parent class_ref 137730 // SearchForActions
      end

      classrelation 232194 // <realization>
	relation 232194 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 232194 // <realization>
	  b parent class_ref 194562 // SearchForStates
      end

      classrelation 232322 // impl (<unidirectional association>)
	relation 232322 --->
	  a role_name "impl" const_relation protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<S, A> ${name}${value};
"
	    classrelation_ref 232322 // impl (<unidirectional association>)
	  b parent class_ref 194690 // QueueSearch
      end

      classrelation 232450 // frontier (<unidirectional association>)
	relation 232450 --->
	  stereotype "Queue"
	  a role_name "frontier" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}<S, A>> ${name}${value};
"
	    classrelation_ref 232450 // frontier (<unidirectional association>)
	  b parent class_ref 135170 // Node
      end

      operation 464898 "QueueBasedSearch"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param inout name "impl" type class_ref 194690 // QueueSearch
	  param inout name "queue" explicit_type "Queue<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<S, A> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 465026 "findActions"
	cpp_inline public explicit_return_type "Optional<List<A>>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 465154 "findState"
	cpp_inline public explicit_return_type "Optional<S>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 465282 "getMetrics"
	cpp_inline public return_type class_ref 133634 // Metrics
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 465410 "addNodeListener"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 465538 "removeNodeListener"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 194562 "SearchForStates"
      visibility public stereotype "interface"
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for all AIMA3e search algorithms which forget the exploration history and
return just a single state which is hopefully a goal state. This search framework expects
all search algorithms to provide some metrics and to actually explore the search space
by expanding nodes.

@param <S> The type used to represent states
@param <A> The type of the actions to be used to navigate through the state space

@author Ruediger Lunde
"
      operation 464386 "findState"
	cpp_inline public explicit_return_type "Optional<S>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a state which is might be but not necessary is a goal state of
the problem or empty.

@param p
           the search problem

@return a state or empty.
"
      end

      operation 464514 "getMetrics"
	cpp_inline public return_type class_ref 133634 // Metrics
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the metrics of the search.
"
      end

      operation 464642 "addNodeListener"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to the list of node listeners. It is informed whenever a
node is expanded during search.
"
      end

      operation 464770 "removeNodeListener"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from the list of node listeners.
"
      end
    end

    class 194818 "QueueFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory class for queues. Changes made here will affect all queue based
search algorithms of this library.

@author Ruediger Lunde
"
      operation 465666 "createFifoQueue"
	class_operation public explicit_return_type "Queue<E>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link LinkedList}.
"
      end

      operation 465794 "createFifoQueueNoDuplicates"
	class_operation public explicit_return_type "Queue<E>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link LinkedList} which is extended by a {@link HashSet} for efficient containment checks. Elements
are only added if they are not already present in the queue. Use only queue methods for access!
"
      end

      operation 465922 "createLifoQueue"
	class_operation public explicit_return_type "Queue<E>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Last-in-first-out (Lifo) view on a {@link LinkedList}.
"
      end

      operation 466050 "createPriorityQueue"
	class_operation public explicit_return_type "Queue<E>"
	nparams 1
	  param inout name "comparator" explicit_type "Comparator<? super E>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a standard java {@link PriorityQueue}. Note that the smallest
element comes first!
"
      end

      class 194946 "FifoQueueWithHashSet"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 232578 // <realization>
	  relation 232578 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}<E>"
	      classrelation_ref 232578 // <realization>
	    b parent class_ref 195074 // LinkedList
	end

	classrelation 232706 // <realization>
	  relation 232706 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}<E>"
	      classrelation_ref 232706 // <realization>
	    b parent class_ref 195202 // Queue
	end

	attribute 190466 "elements"
	  private explicit_type "E"
	  init_value " new HashSet<>()"
	  stereotype "HashSet"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 466178 "add"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 466306 "offer"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 466434 "remove"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 466562 "poll"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 466690 "contains"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "e" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 195330 "SearchUtils"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides several useful static methods for implementing search.

@author Ruediger Lunde
"
      operation 466818 "getPathFromRoot"
	class_operation public return_type class_ref 135170 // Node
	nparams 1
	  param inout name "node" type class_ref 135170 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S, A> List<${type}<S, A>> ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path from the root node to this node.

@return the path from the root node to this node.
"
      end

      operation 466946 "getSequenceOfActions"
	class_operation public explicit_return_type "List<A>"
	nparams 1
	  param inout name "node" type class_ref 135170 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S, A> ${type} ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of actions which corresponds to the complete path to the
given node. The list is empty, if the node is the root node of the search
tree.
"
      end

      operation 467074 "toActions"
	class_operation public explicit_return_type "Optional<List<A>>"
	nparams 1
	  param inout name "node" explicit_type "Optional<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S, A> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"OptionalUsedAsFieldOrParameterType\")
"
	
	
	
      end

      operation 467202 "toState"
	class_operation public explicit_return_type "Optional<S>"
	nparams 1
	  param inout name "node" explicit_type "Optional<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S, A> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"OptionalUsedAsFieldOrParameterType\")
"
	
	
	
      end
    end
  end

  package_ref 130178 // problem

  deploymentview 137474 "framework"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 183298 "Metrics"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import java.util.Set;
import java.util.TreeMap;
${definition}"
      associated_elems
	class_ref 133634 // Metrics
      end
    end

    artifact 183426 "Node"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.LinkedList;
import java.util.List;
${definition}"
      associated_elems
	class_ref 135170 // Node
      end
    end

    artifact 183554 "NodeExpander"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.problem.Problem;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 194306 // NodeExpander
      end
    end

    artifact 183682 "SearchForActions"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.problem.Problem;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 137730 // SearchForActions
      end
    end

    artifact 183810 "SearchForStates"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.problem.Problem;
import java.util.Optional;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 194562 // SearchForStates
      end
    end

    artifact 183938 "QueueBasedSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.problem.Problem;
import aima.core.search.framework.qsearch.QueueSearch;
import java.util.List;
import java.util.Optional;
import java.util.Queue;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 194434 // QueueBasedSearch
      end
    end

    artifact 184066 "QueueFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 194818 // QueueFactory
      end
    end

    artifact 184194 "SearchUtils"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
${definition}"
      associated_elems
	class_ref 195330 // SearchUtils
      end
    end
  end

  package_ref 139394 // qsearch
end
