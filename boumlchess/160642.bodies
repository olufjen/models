class AbstractFOLVisitor
!!!272642.java!!!	recreate(inout ast : Object) : Sentence
		return ((Sentence) ast).copy();
!!!272770.java!!!	visitVariable(inout variable : Variable, inout arg : Object) : Object
		return variable.copy();
!!!272898.java!!!	visitQuantifiedSentence(inout sentence : QuantifiedSentence, inout arg : Object) : Object
		List<Variable> variables = new ArrayList<Variable>();
		for (Variable var : sentence.getVariables()) {
			variables.add((Variable) var.accept(this, arg));
		}

		return new QuantifiedSentence(sentence.getQuantifier(), variables,
				(Sentence) sentence.getQuantified().accept(this, arg));
!!!273026.java!!!	visitPredicate(inout predicate : Predicate, inout arg : Object) : Object
		List<Term> terms = predicate.getTerms();
		List<Term> newTerms = new ArrayList<Term>();
		for (int i = 0; i < terms.size(); i++) {
			Term t = terms.get(i);
			Term subsTerm = (Term) t.accept(this, arg);
			newTerms.add(subsTerm);
		}
		return new Predicate(predicate.getPredicateName(), newTerms);

!!!273154.java!!!	visitTermEquality(inout equality : TermEquality, inout arg : Object) : Object
		Term newTerm1 = (Term) equality.getTerm1().accept(this, arg);
		Term newTerm2 = (Term) equality.getTerm2().accept(this, arg);
		return new TermEquality(newTerm1, newTerm2);
!!!273282.java!!!	visitConstant(inout constant : Constant, inout arg : Object) : Object
		return constant;
!!!273410.java!!!	visitFunction(inout function : Function, inout arg : Object) : Object
		List<Term> terms = function.getTerms();
		List<Term> newTerms = new ArrayList<Term>();
		for (int i = 0; i < terms.size(); i++) {
			Term t = terms.get(i);
			Term subsTerm = (Term) t.accept(this, arg);
			newTerms.add(subsTerm);
		}
		return new Function(function.getFunctionName(), newTerms);
!!!273538.java!!!	visitNotSentence(inout sentence : NotSentence, inout arg : Object) : Object
		return new NotSentence((Sentence) sentence.getNegated().accept(this,
				arg));
!!!273666.java!!!	visitConnectedSentence(inout sentence : ConnectedSentence, inout arg : Object) : Object
		Sentence substFirst = (Sentence) sentence.getFirst().accept(this, arg);
		Sentence substSecond = (Sentence) sentence.getSecond()
				.accept(this, arg);
		return new ConnectedSentence(sentence.getConnector(), substFirst,
				substSecond);
