class NQueensBoard
!!!173314.java!!!	NQueensBoard(in size : int)
		squares = new int[size][size];
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				squares[i][j] = 0;
			}
		}
!!!173442.java!!!	NQueensBoard(in size : int, inout config : NQueensBoard::Config)
		this(size);
		if (config == Config.QUEENS_IN_FIRST_ROW) {
			for (int i = 0; i < size; i++)
				addQueenAt(new XYLocation(i, 0));
		} else if (config == Config.QUEEN_IN_EVERY_COL) {
			Random r = new Random();
			for (int i = 0; i < size; i++)
				addQueenAt(new XYLocation(i, r.nextInt(size)));
		}
!!!173570.java!!!	getSize() : int
		return squares.length;
!!!173698.java!!!	clear() : void
		for (int i = 0; i < getSize(); i++) {
			for (int j = 0; j < getSize(); j++) {
				squares[i][j] = 0;
			}
		}
!!!173826.java!!!	setQueensAt(inout locations : List<XYLocation>) : void
		clear();
		locations.forEach(this::addQueenAt);
!!!173954.java!!!	addQueenAt(inout l : XYLocation) : void
		if (!(queenExistsAt(l)))
			squares[l.getXCoOrdinate()][l.getYCoOrdinate()] = 1;
!!!174082.java!!!	removeQueenFrom(inout l : XYLocation) : void
		if (squares[l.getXCoOrdinate()][l.getYCoOrdinate()] == 1) {
			squares[l.getXCoOrdinate()][l.getYCoOrdinate()] = 0;
		}
!!!174210.java!!!	moveQueenTo(inout l : XYLocation) : void
		for (int i = 0; i < getSize(); i++)
			squares[l.getXCoOrdinate()][i] = 0;
		squares[l.getXCoOrdinate()][l.getYCoOrdinate()] = 1;
!!!174338.java!!!	moveQueen(inout from : XYLocation, inout to : XYLocation) : void
		if ((queenExistsAt(from)) && (!(queenExistsAt(to)))) {
			removeQueenFrom(from);
			addQueenAt(to);
		}
!!!174466.java!!!	queenExistsAt(inout l : XYLocation) : boolean
		return (queenExistsAt(l.getXCoOrdinate(), l.getYCoOrdinate()));
!!!174594.java!!!	queenExistsAt(in x : int, in y : int) : boolean
		return (squares[x][y] == 1);
!!!174722.java!!!	getNumberOfQueensOnBoard() : int
		int count = 0;
		for (int i = 0; i < getSize(); i++) {
			for (int j = 0; j < getSize(); j++) {
				if (squares[i][j] == 1)
					count++;
			}
		}
		return count;
!!!174850.java!!!	getQueenPositions() : XYLocation
		ArrayList<XYLocation> result = new ArrayList<>();
		for (int i = 0; i < getSize(); i++) {
			for (int j = 0; j < getSize(); j++) {
				if (queenExistsAt(i, j))
					result.add(new XYLocation(i, j));
			}
		}
		return result;

!!!174978.java!!!	getNumberOfAttackingPairs() : int
		int result = 0;
		for (XYLocation location : getQueenPositions()) {
			result += getNumberOfAttacksOn(location);
		}
		return result / 2;
!!!175106.java!!!	getNumberOfAttacksOn(inout l : XYLocation) : int
		int x = l.getXCoOrdinate();
		int y = l.getYCoOrdinate();
		return numberOfHorizontalAttacksOn(x, y) + numberOfVerticalAttacksOn(x, y) + numberOfDiagonalAttacksOn(x, y);
!!!175234.java!!!	isSquareUnderAttack(inout l : XYLocation) : boolean
		int x = l.getXCoOrdinate();
		int y = l.getYCoOrdinate();
		return (isSquareHorizontallyAttacked(x, y) || isSquareVerticallyAttacked(x, y)
				|| isSquareDiagonallyAttacked(x, y));
!!!175362.java!!!	isSquareHorizontallyAttacked(in x : int, in y : int) : boolean
		return numberOfHorizontalAttacksOn(x, y) > 0;
!!!175490.java!!!	isSquareVerticallyAttacked(in x : int, in y : int) : boolean
		return numberOfVerticalAttacksOn(x, y) > 0;
!!!175618.java!!!	isSquareDiagonallyAttacked(in x : int, in y : int) : boolean
		return numberOfDiagonalAttacksOn(x, y) > 0;
!!!175746.java!!!	numberOfHorizontalAttacksOn(in x : int, in y : int) : int
		int retVal = 0;
		for (int i = 0; i < getSize(); i++) {
			if ((queenExistsAt(i, y)))
				if (i != x)
					retVal++;
		}
		return retVal;
!!!175874.java!!!	numberOfVerticalAttacksOn(in x : int, in y : int) : int
		int retVal = 0;
		for (int j = 0; j < getSize(); j++) {
			if ((queenExistsAt(x, j)))
				if (j != y)
					retVal++;
		}
		return retVal;
!!!176002.java!!!	numberOfDiagonalAttacksOn(in x : int, in y : int) : int
		int retVal = 0;
		int i;
		int j;
		// forward up diagonal
		for (i = (x + 1), j = (y - 1); (i < getSize() && (j > -1)); i++, j--) {
			if (queenExistsAt(i, j))
				retVal++;
		}
		// forward down diagonal
		for (i = (x + 1), j = (y + 1); ((i < getSize()) && (j < getSize())); i++, j++) {
			if (queenExistsAt(i, j))
				retVal++;
		}
		// backward up diagonal
		for (i = (x - 1), j = (y - 1); ((i > -1) && (j > -1)); i--, j--) {
			if (queenExistsAt(i, j))
				retVal++;
		}

		// backward down diagonal
		for (i = (x - 1), j = (y + 1); ((i > -1) && (j < getSize())); i--, j++) {
			if (queenExistsAt(i, j))
				retVal++;
		}

		return retVal;
!!!176130.java!!!	hashCode() : int
		List<XYLocation> locs = getQueenPositions();
		int result = 17;
		for (XYLocation loc : locs) {
			result = 37 * loc.hashCode();
		}
		return result;
!!!176258.java!!!	equals(inout o : Object) : boolean
		if (this == o)
			return true;
		if (o != null && getClass() == o.getClass()) {
			NQueensBoard aBoard = (NQueensBoard) o;
			if (aBoard.getQueenPositions().size() != getQueenPositions().size())
				return false;
			for (int i = 0; i < getSize(); i++) {
				for (int j = 0; j < getSize(); j++) {
					if (queenExistsAt(i, j) != aBoard.queenExistsAt(i, j))
						return false;
				}
			}
			return true;
		}
		return false;
!!!176386.java!!!	print() : void
		System.out.println(getBoardPic());
!!!176514.java!!!	getBoardPic() : String
		StringBuilder builder = new StringBuilder();
		for (int row = 0; (row < getSize()); row++) { // row
			for (int col = 0; (col < getSize()); col++) { // col
				if (queenExistsAt(col, row))
					builder.append(" Q ");
				else
					builder.append(" - ");
			}
			builder.append("\n");
		}
		return builder.toString();
!!!176642.java!!!	toString() : String
		StringBuilder builder = new StringBuilder();
		for (int row = 0; row < getSize(); row++) { // rows
			for (int col = 0; col < getSize(); col++) { // columns
				if (queenExistsAt(col, row))
					builder.append('Q');
				else
					builder.append('-');
			}
			builder.append("\n");
		}
		return builder.toString();
