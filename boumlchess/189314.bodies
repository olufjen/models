class MclCartesianPlot2D
!!!441218.java!!!	MclCartesianPlot2D(inout obstaclesParser : IGroupParser, inout areasParser : IGroupParser, inout poseFactory : IPoseFactory, inout rangeReadingFactory : IRangeReadingFactory)
		this.poseFactory = poseFactory;
		this.rangeReadingFactory = rangeReadingFactory;
		obstacles = new CartesianPlot2D(obstaclesParser);
		areas = new CartesianPlot2D(areasParser);
!!!441346.java!!!	setSensorRange(in sensorRange : double) : void
		obstacles.setRayRange(sensorRange);
		areas.setRayRange(sensorRange);
!!!441474.java!!!	checkDistanceOfPoses(inout samples : Set<P>, in maxDistance : double) : P
		double maxDistanceSamples = 0.0d;
		for(P first: samples) {
			for(P second: samples) {
				double distance = first.distanceTo(second);
				maxDistanceSamples = distance > maxDistanceSamples ? distance : maxDistanceSamples;
			}
		}
		if(maxDistanceSamples <= maxDistance) {
			double averageX = 0.0d;
			double averageY = 0.0d;
			double averageHeading = 0.0d;
			for(P sample: samples) {
				averageX += sample.getX() / samples.size();
				averageY += sample.getY() / samples.size();
				averageHeading += sample.getHeading() / samples.size();
			}
			return poseFactory.getPose(new Point2D(averageX,averageY),averageHeading);
		}
		return null;
!!!441602.java!!!	loadMap(in obstacleInput : InputStream, in areaInput : InputStream) : void
		obstaclesException = null;
		areasException = null;
		Thread obstaclesThread = new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					obstacles.loadMap(obstacleInput, OBSTACLE_ID);
				} catch (Exception e) {
					obstaclesException = e;
				}
			}
		});
		Thread areasThread = new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					areas.loadMap(areaInput, AREA_ID);
				} 
				catch (Exception e) {
					areasException = e;
				}
			}
		});
		obstaclesThread.setDaemon(true);
		areasThread.setDaemon(true);
		obstaclesThread.start();
		areasThread.start();
		try {
			obstaclesThread.join();
			areasThread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		if(obstaclesException != null) throw obstaclesException;
		if(areasException != null) throw areasException;
!!!441730.java!!!	getObstacles() : IGeometric2D
		return obstacles.getShapes();
!!!441858.java!!!	getObstacleBoundaries() : Rect2D
		return obstacles.getBoundaries();
!!!441986.java!!!	getAreas() : IGeometric2D
		return areas.getShapes();
!!!442114.java!!!	getAreaBoundaries() : Rect2D
		return areas.getBoundaries();
!!!442242.java!!!	isLoaded() : boolean
		return !areas.isEmpty();
!!!442370.java!!!	randomPose() : P
		Point2D point;
		do { 
			point = areas.randomPoint();
		} while(obstacles.isPointInsideShape(point));
		return poseFactory.getPose(point);
!!!442498.java!!!	rayCast(inout pose : P) : R
		Ray2D ray = new Ray2D(new Point2D(pose.getX(), pose.getY()), Vector2D.calculateFromPolar(1, -pose.getHeading()));
		return rangeReadingFactory.getRangeReading(obstacles.rayCast(ray));
!!!442626.java!!!	isPoseValid(inout pose : P) : boolean
		if(!poseFactory.isHeadingValid(pose)) return false;
		Point2D point = new Point2D(pose.getX(),pose.getY());
		return areas.isPointInsideBorderShape(point) && !obstacles.isPointInsideShape(point);
