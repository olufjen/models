format 223
"uninformed" // aima::core::search::uninformed
  revision 2
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\aima/core/search/uninformed/"
  java_package "aima.core.search.uninformed"
  classview 138754 "uninformed"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 199170 "BreadthFirstSearch"
      visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 194434 // QueueBasedSearch
        rank 0 explicit_value "S"
      actual class class_ref 194434 // QueueBasedSearch
        rank 1 explicit_value "A"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): Figure 3.11, page
82.<br>
<br>

<pre>
function BREADTH-FIRST-SEARCH(problem) returns a solution, or failure
  node &lt;- a node with STATE = problem.INITIAL-STATE, PATH-COST=0
  if problem.GOAL-TEST(node.STATE) then return SOLUTION(node)
  frontier &lt;- a FIFO queue with node as the only element
  explored &lt;- an empty set
  loop do
     if EMPTY?(frontier) then return failure
     node &lt;- POP(frontier) // chooses the shallowest node in frontier
     add node.STATE to explored
     for each action in problem.ACTIONS(node.STATE) do
         child &lt;- CHILD-NODE(problem, node, action)
         if child.STATE is not in explored or frontier then
             if problem.GOAL-TEST(child.STATE) then return SOLUTION(child)
             frontier &lt;- INSERT(child, frontier)
</pre>

Figure 3.11 Breadth-first search on a graph.<br>
<br>
<b>Note:</b> Supports TreeSearch, GraphSearch, and BidirectionalSearch. Just
provide an instance of the desired QueueSearch implementation to the
constructor!

@author Ruediger Lunde
@author Ciaran O'Reilly
"
      classrelation 240386 // <realization>
	relation 240386 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 240386 // <realization>
	  b parent class_ref 194434 // QueueBasedSearch
      end

      operation 491266 "BreadthFirstSearch"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 491394 "BreadthFirstSearch"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "impl" type class_ref 194690 // QueueSearch
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 199298 "DepthFirstSearch"
      visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 194434 // QueueBasedSearch
        rank 0 explicit_value "S"
      actual class class_ref 194434 // QueueBasedSearch
        rank 1 explicit_value "A"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page 85.<br>
<br>
Depth-first search always expands the deepest node in the current frontier of
the search tree. <br>
<br>
<b>Note:</b> Supports TreeSearch, GraphSearch, and BidirectionalSearch. Just
provide an instance of the desired QueueSearch implementation to the
constructor!

@author Ruediger Lunde
@author Ravi Mohan

"
      classrelation 240514 // <realization>
	relation 240514 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 240514 // <realization>
	  b parent class_ref 194434 // QueueBasedSearch
      end

      operation 491522 "DepthFirstSearch"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "impl" type class_ref 194690 // QueueSearch
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 199426 "DepthLimitedSearch"
      visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 137730 // SearchForActions
        rank 0 explicit_value "S"
      actual class class_ref 137730 // SearchForActions
        rank 1 explicit_value "A"
      actual class class_ref 194562 // SearchForStates
        rank 0 explicit_value ""
      actual class class_ref 194562 // SearchForStates
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): Figure 3.17, page
88.<br>
<br>

<pre>
function DEPTH-LIMITED-SEARCH(problem, limit) returns a solution, or failure/cutoff
  return RECURSIVE-DLS(MAKE-NODE(problem.INITIAL-STATE), problem, limit)
  
function RECURSIVE-DLS(node, problem, limit) returns a solution, or failure/cutoff
  if problem.GOAL-TEST(node.STATE) then return SOLUTION(node)
  else if limit = 0 then return cutoff
  else
      cutoff_occurred? &lt;- false
      for each action in problem.ACTIONS(node.STATE) do
          child &lt;- CHILD-NODE(problem, node, action)
          result &lt;- RECURSIVE-DLS(child, problem, limit - 1)
          if result = cutoff then cutoff_occurred? &lt;- true
          else if result != failure then return result
      if cutoff_occurred? then return cutoff else return failure
</pre>

Figure 3.17 A recursive implementation of depth-limited search.

@author Ruediger Lunde
@author Ravi Mohan
@author Ciaran O'Reilly
@author Mike Stampone
"
      classrelation 240642 // <realization>
	relation 240642 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 240642 // <realization>
	  b parent class_ref 137730 // SearchForActions
      end

      classrelation 240770 // <realization>
	relation 240770 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 240770 // <realization>
	  b parent class_ref 194562 // SearchForStates
      end

      attribute 198274 "METRIC_NODES_EXPANDED"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"nodesExpanded\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 198402 "METRIC_PATH_COST"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"pathCost\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 240898 // cutoffNode (<unidirectional association>)
	relation 240898 --->
	  a role_name "cutoffNode" init_value " new Node<>(null)" const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<S, A> ${name}${value};
"
	    classrelation_ref 240898 // cutoffNode (<unidirectional association>)
	  b parent class_ref 135170 // Node
      end

      attribute 198530 "limit"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 241026 // nodeExpander (<unidirectional association>)
	relation 241026 --->
	  a role_name "nodeExpander" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<S, A> ${name}${value};
"
	    classrelation_ref 241026 // nodeExpander (<unidirectional association>)
	  b parent class_ref 194306 // NodeExpander
      end

      classrelation 241154 // metrics (<unidirectional association>)
	relation 241154 --->
	  a role_name "metrics" init_value " new Metrics()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 241154 // metrics (<unidirectional association>)
	  b parent class_ref 133634 // Metrics
      end

      operation 491650 "DepthLimitedSearch"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 491778 "DepthLimitedSearch"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "limit" explicit_type "int"
	  param inout name "nodeExpander" type class_ref 194306 // NodeExpander
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<S, A> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 491906 "findActions"
	cpp_inline public explicit_return_type "Optional<List<A>>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " function DEPTH-LIMITED-SEARCH(problem, limit) returns a solution, or
 failure/cutoff

Returns a list of actions to reach the goal if a goal was found, or empty.
The list itself can be empty if the initial state is a goal state.

@return if goal found, the list of actions to the goal, empty otherwise.
"
      end

      operation 492034 "findState"
	cpp_inline public explicit_return_type "Optional<S>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 492162 "findNode"
	cpp_inline public return_type class_ref 135170 // Node
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Optional<${type}<S, A>> ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 492290 "recursiveDLS"
	cpp_inline private return_type class_ref 135170 // Node
	nparams 3
	  param inout name "node" type class_ref 135170 // Node
	  param inout name "problem" type class_ref 134914 // Problem
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<S, A> ${name}${(}${t0}<S, A> ${p0}, ${t1}<S, A> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " function RECURSIVE-DLS(node, problem, limit) returns a solution, or
 failure/cutoff

Returns a solution node, the {@link #cutoffNode}, or null (failure).
"
      end

      operation 492418 "isCutoffResult"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "node" explicit_type "Optional<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"OptionalUsedAsFieldOrParameterType\")
"
	
	
	
      end

      operation 492546 "getMetrics"
	cpp_inline public return_type class_ref 133634 // Metrics
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns all the search metrics.
"
      end

      operation 492674 "addNodeListener"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 492802 "removeNodeListener"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 492930 "clearMetrics"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the nodes expanded and path cost metrics to zero.
"
      end
    end

    class 199554 "IterativeDeepeningSearch"
      visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 137730 // SearchForActions
        rank 0 explicit_value "S"
      actual class class_ref 137730 // SearchForActions
        rank 1 explicit_value "A"
      actual class class_ref 194562 // SearchForStates
        rank 0 explicit_value ""
      actual class class_ref 194562 // SearchForStates
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): Figure 3.18, page
89.<br>
<br>

<pre>
function ITERATIVE-DEEPENING-SEARCH(problem) returns a solution, or failure
  for depth = 0 to infinity  do
    result &lt;- DEPTH-LIMITED-SEARCH(problem, depth)
    if result != cutoff then return result
</pre>

Figure 3.18 The iterative deepening search algorithm, which repeatedly
applies depth-limited search with increasing limits. It terminates when a
solution is found or if the depth- limited search returns failure, meaning
that no solution exists.

@author Ruediger Lunde
@author Ravi Mohan
@author Ciaran O'Reilly
"
      classrelation 241282 // <realization>
	relation 241282 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 241282 // <realization>
	  b parent class_ref 137730 // SearchForActions
      end

      classrelation 241410 // <realization>
	relation 241410 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 241410 // <realization>
	  b parent class_ref 194562 // SearchForStates
      end

      attribute 198658 "METRIC_NODES_EXPANDED"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"nodesExpanded\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 198786 "METRIC_PATH_COST"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"pathCost\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 241538 // nodeExpander (<unidirectional association>)
	relation 241538 --->
	  a role_name "nodeExpander" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<S, A> ${name}${value};
"
	    classrelation_ref 241538 // nodeExpander (<unidirectional association>)
	  b parent class_ref 194306 // NodeExpander
      end

      classrelation 241666 // metrics (<unidirectional association>)
	relation 241666 --->
	  a role_name "metrics" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 241666 // metrics (<unidirectional association>)
	  b parent class_ref 133634 // Metrics
      end

      operation 493058 "IterativeDeepeningSearch"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 493186 "IterativeDeepeningSearch"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "nodeExpander" type class_ref 194306 // NodeExpander
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 493314 "findActions"
	cpp_inline public explicit_return_type "Optional<List<A>>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " function ITERATIVE-DEEPENING-SEARCH(problem) returns a solution, or
 failure"
      end

      operation 493442 "findState"
	cpp_inline public explicit_return_type "Optional<S>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 493570 "findNode"
	cpp_inline private return_type class_ref 135170 // Node
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Optional<${type}<S, A>> ${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a solution node if a solution was found, empty if no solution is reachable or the task was cancelled
by the user.
@param p
@return
"
      end

      operation 493698 "getMetrics"
	cpp_inline public return_type class_ref 133634 // Metrics
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 493826 "addNodeListener"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 493954 "removeNodeListener"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<S, A>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 494082 "clearMetrics"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " PRIVATE METHODS


Sets the nodes expanded and path cost metrics to zero.
"
      end

      operation 494210 "updateMetrics"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "dlsMetrics" type class_ref 133634 // Metrics
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 199682 "UniformCostSearch"
      visibility public 
      nformals 2
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 194434 // QueueBasedSearch
        rank 0 explicit_value "S"
      actual class class_ref 194434 // QueueBasedSearch
        rank 1 explicit_value "A"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): Figure 3.14, page
84.<br>
<br>

<pre>
function UNIFORM-COST-SEARCH(problem) returns a solution, or failure
  node &lt;- a node with STATE = problem.INITIAL-STATE, PATH-COST = 0
  frontier &lt;- a priority queue ordered by PATH-COST, with node as the only element
  explored &lt;- an empty set
  loop do
     if EMPTY?(frontier) then return failure
     node &lt;- POP(frontier) // chooses the lowest-cost node in frontier
     if problem.GOAL-TEST(node.STATE) then return SOLUTION(node)
     add node.STATE to explored
     for each action in problem.ACTIONS(node.STATE) do
         child &lt;- CHILD-NODE(problem, node, action)
         if child.STATE is not in explored or frontier then
            frontier &lt;- INSERT(child, frontier)
         else if child.STATE is in frontier with higher PATH-COST then
            replace that frontier node with child
</pre>

Figure 3.14 Uniform-cost search on a graph. The algorithm is identical to the
general graph search algorithm in Figure 3.7, except for the use of a
priority queue and the addition of an extra check in case a shorter path to a
frontier state is discovered.

</br>
This implementation is more general. It supports TreeSearch, GraphSearch, and
BidirectionalSearch by delegating the search space exploration to an instance
of a QueueSearch implementation.

@author Ruediger Lunde
@author Ciaran O'Reilly
"
      classrelation 241794 // <realization>
	relation 241794 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 241794 // <realization>
	  b parent class_ref 194434 // QueueBasedSearch
      end

      operation 494338 "UniformCostSearch"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a UniformCostSearch instance using GraphSearch "
      end

      operation 494466 "UniformCostSearch"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "impl" type class_ref 194690 // QueueSearch
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<S, A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines UniformCostSearch queue definition with the specified
search space exploration strategy.
"
      end
    end
  end

  deploymentview 137986 "uninformed"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 187394 "BreadthFirstSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.*;
import aima.core.search.framework.qsearch.GraphSearch;
import aima.core.search.framework.qsearch.QueueSearch;
${definition}"
      associated_elems
	class_ref 199170 // BreadthFirstSearch
      end
    end

    artifact 187522 "DepthFirstSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.function.Consumer;
import aima.core.agent.Action;
import aima.core.search.framework.*;
import aima.core.search.framework.problem.Problem;
import aima.core.search.framework.qsearch.QueueSearch;
${definition}"
      associated_elems
	class_ref 199298 // DepthFirstSearch
      end
    end

    artifact 187650 "DepthLimitedSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.*;
import aima.core.search.framework.problem.Problem;
import aima.core.util.Tasks;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 199426 // DepthLimitedSearch
      end
    end

    artifact 187778 "IterativeDeepeningSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.*;
import aima.core.search.framework.problem.Problem;
import aima.core.util.Tasks;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 199554 // IterativeDeepeningSearch
      end
    end

    artifact 187906 "UniformCostSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Comparator;
import aima.core.search.framework.Node;
import aima.core.search.framework.QueueBasedSearch;
import aima.core.search.framework.QueueFactory;
import aima.core.search.framework.qsearch.GraphSearch;
import aima.core.search.framework.qsearch.QueueSearch;
${definition}"
      associated_elems
	class_ref 199682 // UniformCostSearch
      end
    end
  end
end
