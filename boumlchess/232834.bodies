class EightQueenProblem
!!!714498.java!!!	getnQueens() : NQueensCSP
		return nQueens;
!!!714626.java!!!	getNoofQueens() : int
		return noofQueens;
!!!714754.java!!!	setNoofQueens(in noofQueens : int) : void
		this.noofQueens = noofQueens;
!!!714882.java!!!	getEnv() : QueensEnvironment
		return env;
!!!715010.java!!!	setEnv(inout env : QueensEnvironment) : void
		this.env = env;
!!!715138.java!!!	getAgent() : SearchAgent
		return agent;
!!!715266.java!!!	setAgent(inout agent : SearchAgent) : void
		this.agent = agent;
!!!715394.java!!!	getBoard() : NQueensBoard
		return board;
!!!715522.java!!!	setBoard(inout board : NQueensBoard) : void
		this.board = board;
!!!715650.java!!!	setnQueens(inout nQueens : NQueensCSP) : void
		this.nQueens = nQueens;
!!!715778.java!!!	EightQueenProblem()
		super();
		nQueens = new NQueensCSP(8);
		noofQueens = 8;
		addSearchAlgorithm("Depth First Search (Graph Search)",
				new DepthFirstSearch<>(new GraphSearch<>()));
!!!715906.java!!!	EightQueenProblem(in noofQueens : int)
		super();
		this.noofQueens = noofQueens;
		nQueens = new NQueensCSP(noofQueens);
		addSearchAlgorithm("Depth First Search (Graph Search)",
				new DepthFirstSearch<>(new GraphSearch<>())); // All search algorithms implement Depthfirstsearch
!!!716034.java!!!	prepare() : void
		board = new NQueensBoard(noofQueens);
		env = new QueensEnvironment(board);
	/*	for (int i = 0; i < board.getSize(); i++)
			board.addQueenAt(new XYLocation(i, 0)); */
		boardDirty = false;
		agent = null;
!!!716162.java!!!	addSearchAlgorithm(in name : String, inout algo : SearchForActions) : void
		SEARCH_NAMES.add(name);
		SEARCH_ALGOS.add(algo);
!!!716290.java!!!	addAgent() : void
		if (agent != null && agent.isDone()) {
			env.removeAgent(agent);
			agent = null;
		}
		if (agent == null) {
//			int pSel = frame.getSelection().getIndex(NQueensFrame.PROBLEM_SEL);
//			int sSel = frame.getSelection().getIndex(NQueensFrame.SEARCH_SEL);
			int pSel = 0;
			int sSel = 0;
			ActionsFunction<NQueensBoard, QueenAction> actionsFn;
			if (pSel == 0)
				actionsFn = NQueensFunctions::getIFActions; //A shorthand for lambdas calling a specific method (p. 60 3.6.1 Java 8)
			else
				actionsFn = NQueensFunctions::getCSFActions;

			Problem<NQueensBoard, QueenAction> problem = new GeneralProblem<>(env.getBoard(),
					actionsFn, NQueensFunctions::getResult, NQueensFunctions::testGoal);
			SearchForActions<NQueensBoard, QueenAction> search = SEARCH_ALGOS.get(sSel);
			agent = new SearchAgent<>(problem, search);
			env.addAgent(agent);
		}
!!!716418.java!!!	solveProblem() : void
 		try {
			addAgent();
			while (!agent.isDone()) {
				Thread.sleep(200);
				env.step();
			}
		} catch (Exception e) {
			
			e.printStackTrace();
		}

!!!716546.java!!!	solvepartProblem() : boolean
 		try {
			addAgent();
			Thread.sleep(200);
			env.step();
		} catch (Exception e) {
			e.printStackTrace();
			return agent.isDone();
		}
 		return agent.isDone();
!!!716674.java!!!	getStatistics() : String
		StringBuilder result = new StringBuilder();
		String board =env.getBoard().getBoardPic();
		Properties properties = agent.getInstrumentation();
		for (Object o : properties.keySet()) {
			String key = (String) o;
			String property = properties.getProperty(key);
			result.append("\n").append(key).append(" : ").append(property).append("\n").append(" Board\n "+board);
		}
		return result.toString();	
