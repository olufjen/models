class SimulatedAnnealingMaximumFinderApp
!!!569218.java!!!	main(inout args : String [[]]) : void
		launch(args);
!!!569346.java!!!	getTitle() : String
		return "Simulated Annealing Maximum Finder App";
!!!569474.java!!!	createRootPane() : Pane
		BorderPane root = new BorderPane();

		Canvas canvas = new Canvas();
		funcPlotterCtrl = new FunctionPlotterCtrl(canvas);
		funcPlotterCtrl.setLimits(Functions.minX, Functions.maxX, Functions.minY, Functions.maxY);
		List<Parameter> params = createParameters();
		
		TaskExecutionPaneBuilder builder = new TaskExecutionPaneBuilder();
		builder.defineParameters(params);
		builder.defineStateView(canvas);
		builder.defineInitMethod(this::initialize);
		builder.defineTaskMethod(this::startExperiment);
		taskPaneCtrl = builder.getResultFor(root);
		taskPaneCtrl.setParam(TaskExecutionPaneCtrl.PARAM_EXEC_SPEED, 1);
		return root;
!!!569602.java!!!	createParameters() : Parameter
		Parameter p1 = new Parameter(PARAM_FUNC_SELECT);
		p1.setValues(Functions.f1, Functions.f2, Functions.f3);
		p1.setValueNames("f1", "f2", "f3");
		Parameter p2 = new Parameter(PARAM_K, 1, 20, 100);
		p2.setDefaultValueIndex(1);
		Parameter p3 = new Parameter(PARAM_LAMBDA, 0.01, 0.05, 0.1, 0.5);
		p3.setDefaultValueIndex(1);
		Parameter p4 = new Parameter(PARAM_MAX_ITER, 100, 500, 1000);
		p4.setDefaultValueIndex(1);
		return Arrays.asList(p1, p2, p3, p4);
!!!569730.java!!!	initialize() : void
		funcPlotterCtrl.setFunction((Function<Double, Double>) taskPaneCtrl.getParamValue(PARAM_FUNC_SELECT));
!!!569858.java!!!	cleanup() : void
		taskPaneCtrl.cancelExecution();
!!!569986.java!!!	startExperiment() : void

		List<Action> actions = new ArrayList<>(1);
		actions.add(new DynamicAction("Move"));
		Problem<Double, Action> problem = new GeneralProblem<>(getRandomState(), s -> actions, (s, a) -> getSuccessor(s), s -> false);
		Function<Double, Double> func = (Function<Double, Double>) taskPaneCtrl.getParamValue(PARAM_FUNC_SELECT);
		Scheduler scheduler = new Scheduler(taskPaneCtrl.getParamAsInt(PARAM_K),
				taskPaneCtrl.getParamAsDouble(PARAM_LAMBDA), taskPaneCtrl.getParamAsInt(PARAM_MAX_ITER));
		search = new SimulatedAnnealingSearch<>(n -> 1 - func.apply(n.getState()), scheduler);
		search.addNodeListener(n -> updateStateView(n.getState()));
		search.findActions(problem);
		updateStateView(search.getLastSearchState());
!!!570114.java!!!	getRandomState() : Double
		return random.nextDouble() * (Functions.maxX - Functions.minX) + Functions.minX;
!!!570242.java!!!	getSuccessor(inout state : Double) : Double
		double result =  state;
		double r = random.nextDouble() - 0.5;
		result += r * r * r * (Functions.maxX - Functions.minX) / 2;
		if (result < Functions.minX)
			result = Functions.minX;
		else if (result > Functions.maxX)
			result = Functions.maxX;
		// result += (random.nextInt(3) - 1) * funcPlotter.getDeltaX();
		return result;
!!!570370.java!!!	updateStateView(inout state : Object) : void
		Platform.runLater(() -> updateStateViewLater(state));
		taskPaneCtrl.waitAfterStep();
!!!570498.java!!!	updateStateViewLater(inout state : Object) : void
		funcPlotterCtrl.update();
		if (state instanceof Double) {
			double temp = search.getMetrics().getDouble(SimulatedAnnealingSearch.METRIC_TEMPERATURE);
			Paint fill = Color.RED;
			if (temp < 1)
				fill = Color.rgb((int) (255 * temp), 0, (int) (255 * (1 - temp)));
			funcPlotterCtrl.setMarker((Double) state, Optional.of(fill));
			taskPaneCtrl.setStatus(search.getMetrics().toString());
		} else {
			taskPaneCtrl.setStatus("");
		}
