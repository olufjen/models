class ProbUnrestrictedGrammar
!!!1822850.java!!!	ProbUnrestrictedGrammar()
		type = 0;
		rules = new ArrayList<>();
		vars =  new ArrayList<>();
		terminals = new ArrayList<>();
!!!1822978.java!!!	addRules(inout ruleList : List<Rule>) : boolean
		for (Rule aRuleList : ruleList) {
			if (!validRule(aRuleList))
				return false;
		}
		if (!validateRuleProbabilities(ruleList))
			return false;
		rules = ruleList;
		updateVarsAndTerminals();
		return true;
!!!1823106.java!!!	addRule(inout rule : Rule) : boolean
		if (validRule(rule)) {
			rules.add(rule);
			updateVarsAndTerminals( rule );
			return true;
		} else {
			return false;
		}
!!!1823234.java!!!	validateRuleProbabilities(inout ruleList : List<Rule>) : boolean
		float probTotal = 0;
		for (String var : vars) {
			for (int j = 0; j < ruleList.size(); j++) {
				// reset probTotal at start
				if (j == 0)
					probTotal = (float) 0.0;
				if (ruleList.get(j).lhs.get(0).equals(var))
					probTotal += ruleList.get(j).PROB;
				// check probTotal hasn't exceed max
				if (probTotal > 1.0)
					return false;
				// check we have correct probability total
				if (j == ruleList.size() - 1 && probTotal != (float) 1.0)
					return false;
			}
		}
		return true;
!!!1823362.java!!!	validRule(inout r : Rule) : boolean
		return r.lhs != null && r.lhs.size() > 0;
!!!1823490.java!!!	updateVarsAndTerminals() : void
		if (rules == null) {
			vars =  new ArrayList<>();
			terminals = new ArrayList<>();
			return;
		}
		for (Rule r : rules)
			updateVarsAndTerminals(r);    // update the variables and terminals for this rule
!!!1823618.java!!!	updateVarsAndTerminals(inout r : Rule) : void
		// check lhs for new terminals or variables
		for (int j=0; j < r.lhs.size(); j++) {
			if (isVariable(r.lhs.get(j)) && !vars.contains(r.lhs.get(j)))
				vars.add(r.lhs.get(j));
			else if (isTerminal(r.lhs.get(j)) && !terminals.contains(r.lhs.get(j)))
				terminals.add(r.lhs.get(j));
		}
		// for rhs we must check that this isn't a null-rule
		if (r.rhs != null) {
			// check rhs for new terminals or variables
			for (int j=0; j < r.rhs.size(); j++) {
				if (isVariable(r.rhs.get(j)) && !vars.contains(r.rhs.get(j)))
					vars.add(r.rhs.get(j));
				else if (isTerminal(r.rhs.get(j)) && !terminals.contains(r.rhs.get(j)))
					terminals.add(r.rhs.get(j));
			}
		}
		// maintain sorted lists
		Collections.sort(vars);
		Collections.sort(terminals);
!!!1823746.java!!!	isVariable(in s : String) : boolean
		for (int i=0; i < s.length(); i++) {
			if (!Character.isUpperCase(s.charAt(i)))
				return false;
		}
		return true;
!!!1823874.java!!!	isTerminal(in s : String) : boolean
		for (int i=0; i < s.length(); i++ ) {
			if( !Character.isLowerCase(s.charAt(i)))
				return false;
		}
		return true;
!!!1824002.java!!!	toString() : String
		StringBuilder output = new StringBuilder();

		output.append("Variables:  ");
		vars.forEach(var -> output.append(var).append(", "));

		output.append('\n');
		output.append("Terminals:  ");
		terminals.forEach(terminal -> output.append(terminal).append(", "));

		output.append('\n');
		rules.forEach(rule -> output.append(rule.toString()).append('\n'));
		return output.toString();
