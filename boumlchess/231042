format 223
"search" // no::games::chess::search
  revision 11
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\no/games/chess/search/"
  java_package "no.games.chess.search"
  classview 228866 "search"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 504066 "ChessSearchProblem"
      visibility public 
      nactuals 4
      actual class class_ref 134786 // GeneralProblem
        rank 0 explicit_value "PlannerState"
      actual class class_ref 134786 // GeneralProblem
        rank 1 explicit_value "ChessPlannerAction"
      actual class class_ref 134914 // Problem
        rank 0 explicit_value "PlannerState"
      actual class class_ref 134914 // Problem
        rank 1 explicit_value "ChessPlannerAction"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ChessSearchProblem
This class implements the search Problem interface as described in section 3.1.1 p. 66 in the AIMA textbook.
The ActionFunction is a Function interface with signature: Function<S,A> S -> A;
The ResultFunction is a BiFunction interface with signature: BiFunction<S,A,S> (S,A) -> S
The Goaltest function is Predicate interface, used to test for a goal state.
@author oluf

"
      classrelation 709890 // (<generalisation>)
	relation 709890 -_-|> name "<generalisation>"
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 709890 // (<generalisation>)
	  b parent class_ref 134786 // GeneralProblem
      end

      classrelation 696322 // <realization>
	relation 696322 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 696322 // <realization>
	  b parent class_ref 134914 // Problem
      end

      attribute 753026 "state"
	private explicit_type "PlannerState"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 753154 "action"
	private explicit_type "ChessPlannerAction"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 753282 "actions"
	private explicit_type "ChessPlannerAction"
	stereotype "List"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 730242 // resultFn (<unidirectional association>)
	relation 730242 --->
	  a role_name "resultFn" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PlannerState, ChessPlannerAction> ${name}${value};
"
	    classrelation_ref 730242 // resultFn (<unidirectional association>)
	  b parent class_ref 135426 // ResultFunction
      end

      classrelation 730370 // goalTest (<unidirectional association>)
	relation 730370 --->
	  a role_name "goalTest" private
	    comment " GoalTest is a predicate"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PlannerState> ${name}${value};
"
	    classrelation_ref 730370 // goalTest (<unidirectional association>)
	  b parent class_ref 135554 // GoalTest
      end

      operation 2257154 "ChessSearchProblem"
	public explicit_return_type ""
	nparams 4
	  param inout name "initialState" explicit_type "PlannerState"
	  param inout name "actionsFn" type class_ref 135298 // ActionsFunction
	  param inout name "resultFn" type class_ref 135426 // ResultFunction
	  param inout name "goalTest" type class_ref 135554 // GoalTest
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<PlannerState, ChessPlannerAction> ${p1}, ${t2}<PlannerState, ChessPlannerAction> ${p2}, ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2264322 "ChessSearchProblem"
	public explicit_return_type ""
	nparams 8
	  param inout name "initialState" explicit_type "PlannerState"
	  param inout name "actionsFn" type class_ref 135298 // ActionsFunction
	  param inout name "resultFn" type class_ref 135426 // ResultFunction
	  param inout name "goalTest" type class_ref 135554 // GoalTest
	  param inout name "stepCostFn" type class_ref 135682 // StepCostFunction
	  param inout name "state" explicit_type "PlannerState"
	  param inout name "action" explicit_type "ChessPlannerAction"
	  param inout name "actions" explicit_type "List<ChessPlannerAction>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<PlannerState, ChessPlannerAction> ${p1}, ${t2}<PlannerState, ChessPlannerAction> ${p2}, ${t3}<PlannerState> ${p3}, ${t4}<PlannerState, ChessPlannerAction> ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The constructor of the chess search problem
@param initialState
@param actionsFn
@param resultFn
@param goalTest
@param stepCostFn
@param state
@param action
@param actions
"
      end

      operation 2234754 "getInitialState"
	public explicit_return_type "PlannerState"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2234882 "getActions"
	public explicit_return_type "List<ChessPlannerAction>"
	nparams 1
	  param inout name "state" explicit_type "PlannerState"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2235010 "getResult"
	public explicit_return_type "PlannerState"
	nparams 2
	  param inout name "state" explicit_type "PlannerState"
	  param inout name "action" explicit_type "ChessPlannerAction"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "getResult
This method applies the result function.
The resultfunction extends the BIFunction<S,A,S> interface with the signature (S,A) -> S (p. 53 Java 8)
A description of what each action does; the formal name for this is the
transition model, specified by a function RESULT(s, a) that returns the state
that results from doing action a in state s. We also use the term successor
to refer to any state reachable from a given state by a single action.
The PlannerAction has a findPlannerState method
"
      end

      operation 2235138 "testGoal"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "state" explicit_type "PlannerState"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2235266 "getStepCosts"
	public explicit_return_type "double"
	nparams 3
	  param inout name "state" explicit_type "PlannerState"
	  param inout name "action" explicit_type "ChessPlannerAction"
	  param inout name "stateDelta" explicit_type "PlannerState"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2278146 "testSolution"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "node" type class_ref 135170 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Tests whether a node represents an acceptable solution. The default implementation
delegates the check to the goal test. Other implementations could make use of the additional
information given by the node (e.g. the sequence of actions leading to the node). A
solution tester implementation could for example always return false and internally collect
the paths of all nodes whose state passes the goal test. Search implementations should always
access the goal test via this method to support solution acceptance testing.

This method is called from the PlannerQueueSearch findNode method.
implementation
"
      end
    end

    class 504194 "PlannerIterativeSearch"
      visibility public 
      nformals 2
      formal name "PlannerState" type "" explicit_default_value ""
        explicit_extends ""
      formal name "ChessPlannerAction" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 199554 // IterativeDeepeningSearch
        rank 0 explicit_value "PlannerState"
      actual class class_ref 199554 // IterativeDeepeningSearch
        rank 1 explicit_value "ChessPlannerAction"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 696450 // <realization>
	relation 696450 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 696450 // <realization>
	  b parent class_ref 199554 // IterativeDeepeningSearch
      end

      attribute 745986 "state"
	private explicit_type "PlannerState"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 746114 "action"
	private explicit_type "ChessPlannerAction"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 746242 "outputFileName"
	private explicit_type "String"
	init_value " \"C:\\\\Users\\\\bruker\\\\Google Drive\\\\privat\\\\ontologies\\\\analysis\\\\plannerlogs.txt\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 746370 "writer"
	private explicit_type "PrintWriter"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 746498 "fw"
	private explicit_type "FileWriter"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 2235394 "PlannerIterativeSearch"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param inout name "state" explicit_type "PlannerState"
	  param inout name "action" explicit_type "ChessPlannerAction"
	  param inout name "nodeExpander" type class_ref 194306 // NodeExpander
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<PlannerState, ChessPlannerAction> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2235522 "findActions"
	cpp_inline public explicit_return_type "Optional<List<ChessPlannerAction>>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2235650 "findState"
	cpp_inline public explicit_return_type "Optional<PlannerState>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2235778 "getMetrics"
	cpp_inline public return_type class_ref 133634 // Metrics
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2235906 "addNodeListener"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<PlannerState, ChessPlannerAction>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2236034 "removeNodeListener"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<PlannerState, ChessPlannerAction>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 510722 "PlannerQueueBasedSearch"
      visibility public 
      nactuals 6
      actual class class_ref 196354 // BestFirstSearch
        rank 0 explicit_value "PlannerState"
      actual class class_ref 196354 // BestFirstSearch
        rank 1 explicit_value "ChessPlannerAction"
      actual class class_ref 137730 // SearchForActions
        rank 0 explicit_value ""
      actual class class_ref 137730 // SearchForActions
        rank 1 explicit_value ""
      actual class class_ref 194562 // SearchForStates
        rank 0 explicit_value ""
      actual class class_ref 194562 // SearchForStates
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the chess game subclass of BestFirstSearch and QueueBasedSearch.
BestFirstSearch is described in Chapter 3.5 page 92 in the AIMA book.
The algorithm for the search is shown in fig 3.14 p. 84 
It uses the subclass PlannerQueueSearch as the implementation for QueueSearch
@author oluf

"
      classrelation 716546 // <realization>
	relation 716546 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 716546 // <realization>
	  b parent class_ref 196354 // BestFirstSearch
      end

      classrelation 703106 // <realization>
	relation 703106 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 703106 // <realization>
	  b parent class_ref 137730 // SearchForActions
      end

      classrelation 703234 // <realization>
	relation 703234 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 703234 // <realization>
	  b parent class_ref 194562 // SearchForStates
      end

      attribute 759810 "state"
	private explicit_type "PlannerState"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 759938 "action"
	private explicit_type "ChessPlannerAction"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 716674 // impl (<unidirectional association>)
	relation 716674 --->
	  a role_name "impl" private
	    comment "The implementation of the queue search"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 716674 // impl (<unidirectional association>)
	  b parent class_ref 510850 // PlannerQueueSearch
      end

      classrelation 730498 // chNode (<unidirectional association>)
	relation 730498 --->
	  a role_name "chNode" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 730498 // chNode (<unidirectional association>)
	  b parent class_ref 135170 // Node
      end

      classrelation 730626 // chessNode (<unidirectional association>)
	relation 730626 --->
	  a role_name "chessNode" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 730626 // chessNode (<unidirectional association>)
	  b parent class_ref 517378 // ChessNode
      end

      operation 2257282 "PlannerQueueBasedSearch"
	public explicit_return_type ""
	nparams 2
	  param inout name "impl" type class_ref 510850 // PlannerQueueSearch
	  param inout name "h" explicit_type "ToDoubleFunction<Node<PlannerState, ChessPlannerAction>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2257410 "PlannerQueueBasedSearch"
	public explicit_return_type ""
	nparams 4
	  param inout name "impl" type class_ref 510850 // PlannerQueueSearch
	  param inout name "state" explicit_type "PlannerState"
	  param inout name "action" explicit_type "ChessPlannerAction"
	  param inout name "h" explicit_type "ToDoubleFunction<Node<PlannerState, ChessPlannerAction>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "PlannerQueueBasedSearch
This constructor creates a priority queue and a root node
@param impl The implementation of the queue search
@param queue A queue of nodes initially empty
@param state a planner state
@param action a chess planner action
"
      end

      operation 2250114 "getState"
	public explicit_return_type "PlannerState"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2250242 "setState"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "PlannerState"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2250370 "getAction"
	public explicit_return_type "ChessPlannerAction"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2250498 "setAction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" explicit_type "ChessPlannerAction"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2242690 "findActions"
	public explicit_return_type "Optional<List<ChessPlannerAction>>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2242818 "findState"
	public explicit_return_type "Optional<PlannerState>"
	nparams 1
	  param inout name "p" type class_ref 134914 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Receives a problem and a queue implementing the search strategy and
computes a node referencing a goal state, if such a state was found.
@param problem
           the search problem
 
"
      end

      operation 2242946 "addNodeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" explicit_type "Consumer<Node<PlannerState, ChessPlannerAction>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 517506 "EvalFunction"
	visibility public 
	nformals 2
	formal name "PlannerState" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "ChessPlannerAction" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 196738 // HeuristicEvaluationFunction
	  rank 0 explicit_value "PlannerState"
	actual class class_ref 196738 // HeuristicEvaluationFunction
	  rank 1 explicit_value "ChessPlannerAction"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 716802 // <realization>
	  relation 716802 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 716802 // <realization>
	    b parent class_ref 196738 // HeuristicEvaluationFunction
	end

	classrelation 730754 // g (<unidirectional association>)
	  relation 730754 --->
	    stereotype "ToDoubleFunction"
	    a role_name "g" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 730754 // g (<unidirectional association>)
	    b parent class_ref 135170 // Node
	end

	operation 2257538 "EvalFunction"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "h" explicit_type "ToDoubleFunction<Node<PlannerState, ChessPlannerAction>>"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2257666 "applyAsDouble"
	  cpp_inline public explicit_return_type "double"
	  nparams 1
	    param inout name "n" type class_ref 135170 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Returns <em>g(n)</em> the cost to reach the node, plus <em>h(n)</em> the
heuristic cost to get from the specified node to the goal.

@param n a node
@return g(n) + h(n)
"
	end
      end
    end

    class 510850 "PlannerQueueSearch"
      visibility public 
      nactuals 2
      actual class class_ref 194690 // QueueSearch
        rank 0 explicit_value "PlannerState"
      actual class class_ref 194690 // QueueSearch
        rank 1 explicit_value "ChessPlannerAction"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "PlannerQueueSearch
This is a subclass of the Base class for queue-based search implementations.
It is used as the implementation for the PlannerQueueBasedSearch
@author oluf

"
      classrelation 703362 // <realization>
	relation 703362 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 703362 // <realization>
	  b parent class_ref 194690 // QueueSearch
      end

      operation 2243074 "PlannerQueueSearch"
	public explicit_return_type ""
	nparams 1
	  param inout name "nodeExpander" type class_ref 194306 // NodeExpander
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This constructor was protected ??
@param nodeExpander
"
      end

      operation 2243202 "addToFrontier"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 135170 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2243330 "removeFromFrontier"
	protected return_type class_ref 135170 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<PlannerState, ChessPlannerAction> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2271106 "setExplored"
	private explicit_return_type "void"
	nparams 1
	  param inout name "result" type class_ref 135170 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2277890 "findNode"
	public return_type class_ref 135170 // Node
	nparams 2
	  param inout name "problem" type class_ref 134914 // Problem
	  param inout name "frontier" explicit_type "Queue<Node<PlannerState, ChessPlannerAction>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Optional<${type}<PlannerState, ChessPlannerAction>> ${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Receives a problem and a queue implementing the search strategy and
computes a node referencing a goal state, if such a state was found.
This is a customised version of the template method for tree and graph search
through nodes containing PlannerState and PlannerActions.

The primitive operations {@link #addToFrontier(Node)},
{@link #removeFromFrontier()}, and {@link #isFrontierEmpty()}
are investigated to improve the search.

Also the Problem testSolution method and the local getSolution method are investigated.
How to investigate the root node such that all available action schemas are explored !!!
@param problem
           the search problem
@param frontier
           the data structure for nodes that are waiting to be expanded

@return a node referencing a goal state, if the goal was found, otherwise empty;
"
      end

      operation 2278018 "getSolution"
	private return_type class_ref 135170 // Node
	nparams 1
	  param inout name "node" type class_ref 135170 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Optional<${type}<PlannerState, ChessPlannerAction>> ${name}${(}${t0}<PlannerState, ChessPlannerAction> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2243458 "isFrontierEmpty"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2271234 "getFrontier"
	public return_type class_ref 135170 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Queue<${type}<PlannerState, ChessPlannerAction>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2271362 "setFrontier"
	public explicit_return_type "void"
	nparams 1
	  param inout name "frontier" explicit_type "Queue<Node<PlannerState, ChessPlannerAction>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 517378 "ChessNode"
      visibility public 
      nactuals 2
      actual class class_ref 135170 // Node
        rank 0 explicit_value "PlannerState"
      actual class class_ref 135170 // Node
        rank 1 explicit_value "ChessPlannerAction"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ChessNode
This is the subclass of the aima.core.search.framework Node

@author oluf

"
      classrelation 716418 // <realization>
	relation 716418 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 716418 // <realization>
	  b parent class_ref 135170 // Node
      end

      operation 2257026 "ChessNode"
	public explicit_return_type ""
	nparams 1
	  param inout name "state" explicit_type "PlannerState"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2270978 "ChessNode"
	public explicit_return_type ""
	nparams 4
	  param inout name "state" explicit_type "PlannerState"
	  param inout name "parent" type class_ref 517378 // ChessNode
	  param inout name "action" explicit_type "ChessPlannerAction"
	  param in name "pathCost" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 524034 "ChessGoalTest"
      visibility public stereotype "interface"
      nformals 1
      formal name "PlannerState" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 135554 // GoalTest
        rank 0 explicit_value "PlannerState"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ChessGoalTest
This interface extends the GoalTest interface
which determines whether a given state is a goal state.
The Goaltest interface extends the Predicate function interface

@author oluf

@param <PlannerState>
"
      classrelation 723458 // <realization>
	relation 723458 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 723458 // <realization>
	  b parent class_ref 135554 // GoalTest
      end

      operation 2264194 "or"
	cpp_inline public return_type class_ref 524034 // ChessGoalTest
	nparams 1
	  param inout name "other" type class_ref 524034 // ChessGoalTest
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<PlannerState> ${name}${(}${t0}<? super PlannerState> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 524162 "ChessStepCostImpl"
      visibility public 
      nformals 1
      formal name "PlannerState" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 135682 // StepCostFunction
        rank 0 explicit_value "PlannerState"
      actual class class_ref 135682 // StepCostFunction
        rank 1 explicit_value "ChessPlannerAction"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ChessStepCostImpl
This class is an implementation of the StepCostFunction interface
The <b>step cost</b> of taking action a in state s to reach state s' is
denoted by c(s, a, s').

@author oluf

@param <PlannerState>
"
      classrelation 723586 // <realization>
	relation 723586 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 723586 // <realization>
	  b parent class_ref 135682 // StepCostFunction
      end

      operation 2264450 "applyAsDouble"
	cpp_inline public explicit_return_type "double"
	nparams 3
	  param inout name "s" explicit_type "PlannerState"
	  param inout name "a" explicit_type "ChessPlannerAction"
	  param inout name "sDelta" explicit_type "PlannerState"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end
  end

  deploymentview 209282 "search"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 426882 "ChessSearchProblem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import aima.core.logic.planning.ActionSchema;
import aima.core.search.framework.Node;
import aima.core.search.framework.problem.ActionsFunction;
import aima.core.search.framework.problem.GeneralProblem;
import aima.core.search.framework.problem.GoalTest;
import aima.core.search.framework.problem.Problem;
import aima.core.search.framework.problem.ResultFunction;
import aima.core.search.framework.problem.StepCostFunction;
import no.games.chess.planning.ChessPlannerAction;
import no.games.chess.planning.PlannerState;
${definition}"
      associated_elems
	class_ref 504066 // ChessSearchProblem
      end
    end

    artifact 427010 "PlannerIterativeSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;
import aima.core.logic.planning.ActionSchema;
import aima.core.search.framework.Metrics;
import aima.core.search.framework.Node;
import aima.core.search.framework.NodeExpander;
import aima.core.search.framework.problem.Problem;
import aima.core.search.uninformed.IterativeDeepeningSearch;
${definition}"
      associated_elems
	class_ref 504194 // PlannerIterativeSearch
      end
    end

    artifact 433538 "PlannerQueueBasedSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.Queue;
import java.util.function.Consumer;
import java.util.function.ToDoubleFunction;
import aima.core.search.framework.Node;
import aima.core.search.framework.NodeExpander;
import aima.core.search.framework.QueueBasedSearch;
import aima.core.search.framework.QueueFactory;
import aima.core.search.framework.SearchForActions;
import aima.core.search.framework.SearchForStates;
import aima.core.search.framework.SearchUtils;
import aima.core.search.framework.problem.Problem;
import aima.core.search.framework.qsearch.QueueSearch;
import aima.core.search.informed.BestFirstSearch;
import aima.core.search.informed.HeuristicEvaluationFunction;
import aima.core.search.informed.GreedyBestFirstSearch.EvalFunction;
import no.games.chess.planning.ChessPlannerAction;
import no.games.chess.planning.PlannerState;
${definition}"
      associated_elems
	class_ref 510722 // PlannerQueueBasedSearch
      end
    end

    artifact 433666 "PlannerQueueSearch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.LinkedList;
import java.util.Optional;
import java.util.Queue;
import aima.core.logic.planning.ActionSchema;
import aima.core.search.framework.Node;
import aima.core.search.framework.NodeExpander;
import aima.core.search.framework.problem.Problem;
import aima.core.search.framework.qsearch.QueueSearch;
import aima.core.util.Tasks;
import no.games.chess.planning.ChessPlannerAction;
import no.games.chess.planning.PlannerState;
${definition}"
      associated_elems
	class_ref 510850 // PlannerQueueSearch
      end
    end

    artifact 440194 "ChessNode"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.Node;
import no.games.chess.planning.ChessPlannerAction;
import no.games.chess.planning.PlannerState;
${definition}"
      associated_elems
	class_ref 517378 // ChessNode
      end
    end

    artifact 446722 "ChessGoalTest"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
import aima.core.search.framework.problem.GoalTest;
import no.games.chess.planning.PlannerState;
${definition}"
      associated_elems
	class_ref 524034 // ChessGoalTest
      end
    end

    artifact 446850 "ChessStepCostImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.search.framework.problem.StepCostFunction;
import no.games.chess.planning.ChessPlannerAction;
${definition}"
      associated_elems
	class_ref 524162 // ChessStepCostImpl
      end
    end
  end

  package_ref 237570 // online

  package_ref 244098 // nondeterministic
end
