format 223
"math" // aima::core::util::math
  revision 1
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\aima/core/util/math/"
  java_package "aima.core.util.math"
  package_ref 130562 // geom

  classview 132738 "math"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 151554 "Vector"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "@author Ravi Mohan
@author Mike Stampone
"
      classrelation 243330 // <generalisation>
	relation 243330 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 243330 // <generalisation>
	  b parent class_ref 152194 // Matrix
      end

      attribute 206338 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 523266 "Vector"
	public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Vector is modelled as a matrix with a single column;

Constructs a vector with the specified size.

@param size
           the capacity of the vector
"
      end

      operation 523394 "Vector"
	public explicit_return_type ""
	nparams 1
	  param inout name "lst" explicit_type "List<Double>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a vector with the specified list of values.

@param lst
           a list of values
"
      end

      operation 523522 "getValue"
	public explicit_return_type "double"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value at the specified index.

@param i
           the index of the value to return.

@return the value at the specified index.
"
      end

      operation 523650 "setValue"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value at the specified index.

@param index
           the index of the value to set.
@param value
           the value to be placed at the index.
"
      end

      operation 523778 "copyVector"
	public return_type class_ref 151554 // Vector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this vector.

@return a copy of this vector.
"
      end

      operation 523906 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of values in this vector.

@return the number of values in this vector.
"
      end

      operation 524034 "minus"
	public return_type class_ref 151554 // Vector
	nparams 1
	  param inout name "v" type class_ref 151554 // Vector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of vector subtraction.

@param v
           the vector to subtract

@return the result of vector subtraction.
"
      end

      operation 524162 "plus"
	public return_type class_ref 151554 // Vector
	nparams 1
	  param inout name "v" type class_ref 151554 // Vector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of vector addition.

@param v
           the vector to add

@return the result of vector addition.
"
      end

      operation 524290 "indexHavingMaxValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index at which the maximum value in this vector is located.

@return the index at which the maximum value in this vector is located.

@throws RuntimeException
            if the vector does not contain any values.
"
      end
    end

    class 152194 "Matrix"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Jama = Java Matrix class.
<P>
The Java Matrix Class provides the fundamental operations of numerical linear
algebra. Various constructors create Matrices from two dimensional arrays of
double precision floating point numbers. Various \"gets\" and \"sets\" provide
access to submatrices and matrix elements. Several methods implement basic
matrix arithmetic, including matrix addition and multiplication, matrix
norms, and element-by-element array operations. Methods for reading and
printing matrices are also included. All the operations in this version of
the Matrix Class involve real matrices. Complex matrices may be handled in a
future version.
<P>
Five fundamental matrix decompositions, which consist of pairs or triples of
matrices, permutation vectors, and the like, produce results in five
decomposition classes. These decompositions are accessed by the Matrix class
to compute solutions of simultaneous linear equations, determinants, inverses
and other matrix functions. The five decompositions are:
<P>
<UL>
<LI>Cholesky Decomposition of symmetric, positive definite matrices.
<LI>LU Decomposition of rectangular matrices.
<LI>QR Decomposition of rectangular matrices.
<LI>Singular Value Decomposition of rectangular matrices.
<LI>Eigenvalue Decomposition of both symmetric and nonsymmetric square
matrices.
</UL>
<DL>
<DT><B>Example of use:</B></DT>
<P>
<DD>Solve a linear system A x = b and compute the residual norm, ||b - A x||.
<P>

<PRE>
double[][] vals = { { 1., 2., 3 }, { 4., 5., 6. }, { 7., 8., 10. } };
Matrix A = new Matrix(vals);
Matrix b = Matrix.random(3, 1);
Matrix x = A.solve(b);
Matrix r = A.times(x).minus(b);
double rnorm = r.normInf();
</PRE>

</DD>
</DL>

@author The MathWorks, Inc. and the National Institute of Standards and
        Technology.
@version 5 August 1998
"
      classrelation 242946 // <realization>
	relation 242946 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 242946 // <realization>
	  b parent class_ref 134274 // Cloneable
      end

      classrelation 243074 // <realization>
	relation 243074 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 243074 // <realization>
	  b parent class_ref 202242 // Serializable
      end

      attribute 205058 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 205186 "A"
	const_attribute private explicit_type "double"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "------------------------ Class variables ------------------------


Array for internal storage of elements.

@serial internal array storage.

"
      end

      attribute 205314 "m"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Row and column dimensions.

@serial row dimension.
@serial column dimension.

"
      end

      attribute 205442 "n"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Row and column dimensions.

@serial row dimension.
@serial column dimension.

"
      end

      operation 514050 "createDiagonalMatrix"
	class_operation public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "values" explicit_type "List<Double>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------ Constructors ------------------------

 Construct a diagonal Matrix from the given List of doubles "
      end

      operation 514178 "Matrix"
	public explicit_return_type ""
	nparams 2
	  param in name "m" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an m-by-n matrix of zeros.

@param m
           Number of rows.
@param n
           Number of colums.
"
      end

      operation 514306 "Matrix"
	public explicit_return_type ""
	nparams 3
	  param in name "m" explicit_type "int"
	  param in name "n" explicit_type "int"
	  param in name "s" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an m-by-n constant matrix.

@param m
           Number of rows.
@param n
           Number of colums.
@param s
           Fill the matrix with this scalar value.
"
      end

      operation 514434 "Matrix"
	public explicit_return_type ""
	nparams 1
	  param inout name "A" explicit_type "double"
	multiplicity "[][]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a matrix from a 2-D array.

@param A
           Two-dimensional array of doubles.
@exception IllegalArgumentException
               All rows must have the same length
@see #constructWithCopy
"
      end

      operation 514562 "Matrix"
	public explicit_return_type ""
	nparams 3
	  param inout name "A" explicit_type "double"
	multiplicity "[][]"
	  param in name "m" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a matrix quickly without checking arguments.

@param A
           Two-dimensional array of doubles.
@param m
           Number of rows.
@param n
           Number of colums.
"
      end

      operation 514690 "Matrix"
	public explicit_return_type ""
	nparams 2
	  param inout name "vals" explicit_type "double"
	multiplicity "[]"
	  param in name "m" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a matrix from a one-dimensional packed array

@param vals
           One-dimensional array of doubles, packed by columns (ala
           Fortran).
@param m
           Number of rows.
@exception IllegalArgumentException
               Array length must be a multiple of m.
"
      end

      operation 514818 "constructWithCopy"
	class_operation public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "A" explicit_type "double"
	multiplicity "[][]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[][] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------ Public Methods ------------------------


Construct a matrix from a copy of a 2-D array.

@param A
           Two-dimensional array of doubles.
@exception IllegalArgumentException
               All rows must have the same length
"
      end

      operation 514946 "copy"
	public return_type class_ref 152194 // Matrix
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a deep copy of a matrix
"
      end

      operation 515074 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Clone the Matrix object.
"
      end

      operation 515202 "getArray"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Access the internal two-dimensional array.

@return Pointer to the two-dimensional array of matrix elements.
"
      end

      operation 515330 "getArrayCopy"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy the internal two-dimensional array.

@return Two-dimensional array copy of matrix elements.
"
      end

      operation 515458 "getColumnPackedCopy"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a one-dimensional column packed copy of the internal array.

@return Matrix elements packed in a one-dimensional array by columns.
"
      end

      operation 515586 "getRowPackedCopy"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a one-dimensional row packed copy of the internal array.

@return Matrix elements packed in a one-dimensional array by rows.
"
      end

      operation 515714 "getRowDimension"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get row dimension.

@return m, the number of rows.
"
      end

      operation 515842 "getColumnDimension"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get column dimension.

@return n, the number of columns.
"
      end

      operation 515970 "get"
	public explicit_return_type "double"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "j" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a single element.

@param i
           Row index.
@param j
           Column index.
@return A(i,j)
@exception ArrayIndexOutOfBoundsException
"
      end

      operation 516098 "getMatrix"
	public return_type class_ref 152194 // Matrix
	nparams 4
	  param in name "i0" explicit_type "int"
	  param in name "i1" explicit_type "int"
	  param in name "j0" explicit_type "int"
	  param in name "j1" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a submatrix.

@param i0
           Initial row index
@param i1
           Final row index
@param j0
           Initial column index
@param j1
           Final column index
@return A(i0:i1,j0:j1)
@exception ArrayIndexOutOfBoundsException
               Submatrix indices
"
      end

      operation 516226 "getMatrix"
	public return_type class_ref 152194 // Matrix
	nparams 2
	  param inout name "r" explicit_type "int"
	multiplicity "[]"
	  param inout name "c" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a submatrix.

@param r
           Array of row indices.
@param c
           Array of column indices.
@return A(r(:),c(:))
@exception ArrayIndexOutOfBoundsException
               Submatrix indices
"
      end

      operation 516354 "getMatrix"
	public return_type class_ref 152194 // Matrix
	nparams 3
	  param in name "i0" explicit_type "int"
	  param in name "i1" explicit_type "int"
	  param inout name "c" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a submatrix.

@param i0
           Initial row index
@param i1
           Final row index
@param c
           Array of column indices.
@return A(i0:i1,c(:))
@exception ArrayIndexOutOfBoundsException
               Submatrix indices
"
      end

      operation 516482 "getMatrix"
	public return_type class_ref 152194 // Matrix
	nparams 3
	  param inout name "r" explicit_type "int"
	multiplicity "[]"
	  param in name "j0" explicit_type "int"
	  param in name "j1" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a submatrix.

@param r
           Array of row indices.
@param j0
           Initial column index
@param j1
           Final column index
@return A(r(:),j0:j1)
@exception ArrayIndexOutOfBoundsException
               Submatrix indices
"
      end

      operation 516610 "set"
	public explicit_return_type "void"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "j" explicit_type "int"
	  param in name "s" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a single element.

@param i
           Row index.
@param j
           Column index.
@param s
           A(i,j).
@exception ArrayIndexOutOfBoundsException
"
      end

      operation 516738 "setMatrix"
	public explicit_return_type "void"
	nparams 5
	  param in name "i0" explicit_type "int"
	  param in name "i1" explicit_type "int"
	  param in name "j0" explicit_type "int"
	  param in name "j1" explicit_type "int"
	  param inout name "X" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a submatrix.

@param i0
           Initial row index
@param i1
           Final row index
@param j0
           Initial column index
@param j1
           Final column index
@param X
           A(i0:i1,j0:j1)
@exception ArrayIndexOutOfBoundsException
               Submatrix indices
"
      end

      operation 516866 "setMatrix"
	public explicit_return_type "void"
	nparams 3
	  param inout name "r" explicit_type "int"
	multiplicity "[]"
	  param inout name "c" explicit_type "int"
	multiplicity "[]"
	  param inout name "X" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a submatrix.

@param r
           Array of row indices.
@param c
           Array of column indices.
@param X
           A(r(:),c(:))
@exception ArrayIndexOutOfBoundsException
               Submatrix indices
"
      end

      operation 516994 "setMatrix"
	public explicit_return_type "void"
	nparams 4
	  param inout name "r" explicit_type "int"
	multiplicity "[]"
	  param in name "j0" explicit_type "int"
	  param in name "j1" explicit_type "int"
	  param inout name "X" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a submatrix.

@param r
           Array of row indices.
@param j0
           Initial column index
@param j1
           Final column index
@param X
           A(r(:),j0:j1)
@exception ArrayIndexOutOfBoundsException
               Submatrix indices
"
      end

      operation 517122 "setMatrix"
	public explicit_return_type "void"
	nparams 4
	  param in name "i0" explicit_type "int"
	  param in name "i1" explicit_type "int"
	  param inout name "c" explicit_type "int"
	multiplicity "[]"
	  param inout name "X" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a submatrix.

@param i0
           Initial row index
@param i1
           Final row index
@param c
           Array of column indices.
@param X
           A(i0:i1,c(:))
@exception ArrayIndexOutOfBoundsException
               Submatrix indices
"
      end

      operation 517250 "transpose"
	public return_type class_ref 152194 // Matrix
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matrix transpose.

@return A'
"
      end

      operation 517378 "norm1"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "One norm

@return maximum column sum.
"
      end

      operation 517506 "normInf"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Two norm

@return maximum singular value.

 public double norm2 () {
 return (new SingularValueDecomposition(this).norm2());
 }

Infinity norm

@return maximum row sum.
"
      end

      operation 517634 "uminus"
	public return_type class_ref 152194 // Matrix
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Frobenius norm

@return sqrt of sum of squares of all elements.

 public double normF () {
 double f = 0;
 for (int i = 0; i < m; i++) {
 for (int j = 0; j < n; j++) {
 f = Maths.hypot(f,A[i][j]);
 }
 }
 return f;
 }

Unary minus

@return -A
"
      end

      operation 517762 "plus"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "C = A + B

@param B
           another matrix
@return A + B
"
      end

      operation 517890 "plusEquals"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A = A + B

@param B
           another matrix
@return A + B
"
      end

      operation 518018 "minus"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "C = A - B

@param B
           another matrix
@return A - B
"
      end

      operation 518146 "minusEquals"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A = A - B

@param B
           another matrix
@return A - B
"
      end

      operation 518274 "arrayTimes"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Element-by-element multiplication, C = A.*B

@param B
           another matrix
@return A.*B
"
      end

      operation 518402 "arrayTimesEquals"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Element-by-element multiplication in place, A = A.*B

@param B
           another matrix
@return A.*B
"
      end

      operation 518530 "arrayRightDivide"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Element-by-element right division, C = A./B

@param B
           another matrix
@return A./B
"
      end

      operation 518658 "arrayRightDivideEquals"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Element-by-element right division in place, A = A./B

@param B
           another matrix
@return A./B
"
      end

      operation 518786 "arrayLeftDivide"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Element-by-element left division, C = A.\\B

@param B
           another matrix
@return A.\\B
"
      end

      operation 518914 "arrayLeftDivideEquals"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Element-by-element left division in place, A = A.\\B

@param B
           another matrix
@return A.\\B
"
      end

      operation 519042 "times"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param in name "s" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiply a matrix by a scalar, C = s*A

@param s
           scalar
@return s*A
"
      end

      operation 519170 "timesEquals"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param in name "s" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiply a matrix by a scalar in place, A = s*A

@param s
           scalar
@return replace A by s*A
"
      end

      operation 519298 "times"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Linear algebraic matrix multiplication, A * B

@param B
           another matrix
@return Matrix product, A * B
@exception IllegalArgumentException
               Matrix inner dimensions must agree.
"
      end

      operation 519426 "lu"
	public return_type class_ref 202114 // LUDecomposition
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "LU Decomposition

@return LUDecomposition
@see LUDecomposition
"
      end

      operation 519554 "solve"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " /** QR Decomposition
 @return QRDecomposition
 @see QRDecomposition
 */

 public QRDecomposition qr () {
 return new QRDecomposition(this);
 }

 /** Cholesky Decomposition
 @return CholeskyDecomposition
 @see CholeskyDecomposition
 */

 public CholeskyDecomposition chol () {
 return new CholeskyDecomposition(this);
 }

 /** Singular Value Decomposition
 @return SingularValueDecomposition
 @see SingularValueDecomposition
 */

 public SingularValueDecomposition svd () {
 return new SingularValueDecomposition(this);
 }

 /** Eigenvalue Decomposition
 @return EigenvalueDecomposition
 @see EigenvalueDecomposition
 */

 public EigenvalueDecomposition eig () {
 return new EigenvalueDecomposition(this);
 }

Solve A*X = B

@param B
           right hand side
@return solution if A is square, least squares solution otherwise
"
      end

      operation 519682 "solveTranspose"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Solve X*A = B, which is also A'*X' = B'

@param B
           right hand side
@return solution if A is square, least squares solution otherwise.
"
      end

      operation 519810 "inverse"
	public return_type class_ref 152194 // Matrix
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matrix inverse or pseudoinverse

@return inverse(A) if A is square, pseudoinverse otherwise.
"
      end

      operation 519938 "det"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matrix determinant

@return determinant
"
      end

      operation 520066 "trace"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matrix rank

@return effective numerical rank, obtained from SVD.

 public int rank () {
 return new SingularValueDecomposition(this).rank();
 }

 /** Matrix condition (2 norm)
 @return ratio of largest to smallest singular value.
 */

 public double cond () {
 return new SingularValueDecomposition(this).cond();
 }

Matrix trace.

@return sum of the diagonal elements.
"
      end

      operation 520194 "random"
	class_operation public return_type class_ref 152194 // Matrix
	nparams 2
	  param in name "m" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate matrix with random elements

@param m
           Number of rows.
@param n
           Number of colums.
@return An m-by-n matrix with uniformly distributed random elements.
"
      end

      operation 520322 "identity"
	class_operation public return_type class_ref 152194 // Matrix
	nparams 2
	  param in name "m" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate identity matrix

@param m
           Number of rows.
@param n
           Number of colums.
@return An m-by-n matrix with ones on the diagonal and zeros elsewhere.
"
      end

      operation 520450 "print"
	public explicit_return_type "void"
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "d" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print the matrix to stdout. Line the elements up in columns with a
Fortran-like 'Fw.d' style format.

@param w
           Column width.
@param d
           Number of digits after the decimal.
"
      end

      operation 520578 "print"
	public explicit_return_type "void"
	nparams 3
	  param inout name "output" explicit_type "PrintWriter"
	  param in name "w" explicit_type "int"
	  param in name "d" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print the matrix to the output stream. Line the elements up in columns
with a Fortran-like 'Fw.d' style format.

@param output
           Output stream.
@param w
           Column width.
@param d
           Number of digits after the decimal.
"
      end

      operation 520706 "print"
	public explicit_return_type "void"
	nparams 2
	  param inout name "format" explicit_type "NumberFormat"
	  param in name "width" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print the matrix to stdout. Line the elements up in columns. Use the
format object, and right justify within columns of width characters. Note
that is the matrix is to be read back in, you probably will want to use a
NumberFormat that is set to US Locale.

@param format
           A Formatting object for individual elements.
@param width
           Field width for each column.
@see java.text.DecimalFormat#setDecimalFormatSymbols
"
      end

      operation 520834 "print"
	public explicit_return_type "void"
	nparams 3
	  param inout name "output" explicit_type "PrintWriter"
	  param inout name "format" explicit_type "NumberFormat"
	  param in name "width" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " DecimalFormat is a little disappointing coming from Fortran or C's
 printf.
 Since it doesn't pad on the left, the elements will come out different
 widths. Consequently, we'll pass the desired column width in as an
 argument and do the extra padding ourselves.

Print the matrix to the output stream. Line the elements up in columns.
Use the format object, and right justify within columns of width
characters. Note that is the matrix is to be read back in, you probably
will want to use a NumberFormat that is set to US Locale.

@param output
           the output stream.
@param format
           A formatting object to format the matrix elements
@param width
           Column width.
@see java.text.DecimalFormat#setDecimalFormatSymbols
"
      end

      operation 520962 "read"
	class_operation public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "input" explicit_type "BufferedReader"
	nexceptions 1
	  explicit_exception "java.io.IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Read a matrix from a stream. The format is the same the print method, so
printed matrices can be read back in (provided they were printed using US
Locale). Elements are separated by whitespace, all the elements for each
row appear on a single line, the last row is followed by a blank line.

@param input
           the input stream.
"
      end

      operation 521090 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 521218 "checkMatrixDimensions"
	private explicit_return_type "void"
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------ Private Methods ------------------------

 Check if size(A) == size(B) * "
      end
    end

    class 187266 "MixedRadixNumber"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "For details on <a
href=\"http://demonstrations.wolfram.com/MixedRadixNumberRepresentations/\"
>Mixed Radix Number Representations.</a>

@author Ciaran O'Reilly
@author Mike Stampone
"
      classrelation 243202 // <generalisation>
	relation 243202 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 243202 // <generalisation>
	  b parent class_ref 202370 // Number
      end

      attribute 205570 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 205698 "value"
	private explicit_type "long"
	init_value " 0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 205826 "maxValue"
	private explicit_type "long"
	init_value " 0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 205954 "radices"
	private explicit_type "int"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 206082 "currentNumeralValue"
	private explicit_type "int"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 206210 "recalculate"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 521346 "MixedRadixNumber"
	public explicit_return_type ""
	nparams 2
	  param in name "value" explicit_type "long"
	  param inout name "radices" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a mixed radix number with a specified value and a specified
array of radices.

@param value
           the value of the mixed radix number
@param radices
           the radices used to represent the value of the mixed radix
           number
"
      end

      operation 521474 "MixedRadixNumber"
	public explicit_return_type ""
	nparams 2
	  param in name "value" explicit_type "long"
	  param inout name "radices" explicit_type "List<Integer>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a mixed radix number with a specified value and a specified
list of radices.

@param value
           the value of the mixed radix number
@param radices
           the radices used to represent the value of the mixed radix
           number
"
      end

      operation 521602 "MixedRadixNumber"
	public explicit_return_type ""
	nparams 2
	  param inout name "radixValues" explicit_type "int"
	multiplicity "[]"
	  param inout name "radices" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a mixed radix number with a specified array of numerals and a
specified array of radices.

@param radixValues
           the numerals of the mixed radix number
@param radices
           the radices of the mixed radix number
"
      end

      operation 521730 "getCurrentValueFor"
	public explicit_return_type "long"
	nparams 1
	  param inout name "radixValues" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the mixed radix number with the specified array of
numerals and the current array of radices.

@return the value of the mixed radix number

@throws IllegalArgumentException
            if any of the specified numerals is less than zero, or if any
            of the specified numerals is greater than it's corresponding
            radix.
"
      end

      operation 521858 "setCurrentValueFor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "radixValues" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the mixed radix number with the specified array of
numerals and the current array of radices.

@param radixValues
           the numerals of the mixed radix number
"
      end

      operation 521986 "getMaxAllowedValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum value which can be represented by the current array
of radices.

@return the maximum value which can be represented by the current array
        of radices.
"
      end

      operation 522114 "increment"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increments the value of the mixed radix number, if the value is less than
the maximum value which can be represented by the current array of
radices.

@return <code>true</code> if the increment was successful.
"
      end

      operation 522242 "decrement"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the value of the mixed radix number, if the value is greater
than zero.

@return <code>true</code> if the decrement was successful.
"
      end

      operation 522370 "getCurrentNumeralValue"
	public explicit_return_type "int"
	nparams 1
	  param in name "atPosition" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the numeral at the specified position.

@param atPosition
           the position of the numeral to return
@return the numeral at the specified position.
"
      end

      operation 522498 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " START-Number"
      end

      operation 522626 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 522754 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 522882 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 523010 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " END-Number
"
      end

      operation 523138 "calculateMaxValue"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " PRIVATE


Sets the maximum value which can be represented by the current array of
radices.

@throws IllegalArgumentException
            if no radices are defined, if any radix is less than two, or
            if the current value is greater than the maximum value which
            can be represented by the current array of radices.
"
      end
    end

    class 201986 "Interval"
      visibility public 
      nformals 1
      formal name "C" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Basic supports for Intervals.

@see <a href=\"http://en.wikipedia.org/wiki/Interval_%28mathematics%29\"
     >Interval</a>

@author Ciaran O'Reilly
@author Mike Stampone
"
      attribute 203778 "lower"
	private explicit_type "C"
	init_value " null"
	stereotype "Comparable"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 203906 "lowerInclusive"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 204034 "upper"
	private explicit_type "C"
	init_value " null"
	stereotype "Comparable"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 204162 "upperInclusive"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 510850 "Interval"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 510978 "Interval"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "lower" explicit_type "Comparable<C>"
	  param inout name "upper" explicit_type "Comparable<C>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a closed interval from the two specified end points.

@param lower
           the lower end point of the interval
@param upper
           the upper end point of the interval
"
      end

      operation 511106 "Interval"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param inout name "lower" explicit_type "Comparable<C>"
	  param inout name "lowerInclusive" explicit_type "boolean"
	  param inout name "upper" explicit_type "Comparable<C>"
	  param inout name "upperInclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an interval from the two specified end points.

@param lower
           the lower end point of the interval
@param lowerInclusive
           wether or not the lower end of the interval is inclusive of
           its value.
@param upper
           the upper end point of the interval
@param upperInclusive
           whether or not the upper end of the interval is inclusive of
           its value.
"
      end

      operation 511234 "isInInterval"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "C"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the specified object is between the end
points of this interval.

@return <code>true</code> if the specified value is between the end
        points of this interval.
"
      end

      operation 511362 "isLowerInclusive"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this interval is lower inclusive.

@return <code>true</code> if this interval is lower inclusive.
"
      end

      operation 511490 "isLowerExclusive"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this interval is not lower inclusive.

@return <code>true</code> if this interval is not lower inclusive.
"
      end

      operation 511618 "setLowerInclusive"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "inclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the interval to lower inclusive or lower exclusive.

@param inclusive
           <code>true</code> represents lower inclusive and
           <code>false</code> represents lower exclusive.
"
      end

      operation 511746 "setLowerExclusive"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "exclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the interval to lower exclusive or lower inclusive.

@param exclusive
           <code>true</code> represents lower exclusive and
           <code>false</code> represents lower inclusive.
"
      end

      operation 511874 "getLower"
	cpp_inline public explicit_return_type "Comparable<C>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lower end point of the interval.

@return the lower end point of the interval.
"
      end

      operation 512002 "setLower"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "lower" explicit_type "Comparable<C>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the lower end point of the interval.

@param lower
           the lower end point of the interval
"
      end

      operation 512130 "isUpperInclusive"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this interval is upper inclusive.

@return <code>true</code> if this interval is upper inclusive.
"
      end

      operation 512258 "isUpperExclusive"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this interval is upper exclusive.

@return <code>true</code> if this interval is upper exclusive.
"
      end

      operation 512386 "setUpperInclusive"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "inclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the interval to upper inclusive or upper exclusive.

@param inclusive
           <code>true</code> represents upper inclusive and
           <code>false</code> represents upper exclusive.
"
      end

      operation 512514 "setUpperExclusive"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "exclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the interval to upper exclusive or upper inclusive.

@param exclusive
           <code>true</code> represents upper exclusive and
           <code>false</code> represents upper inclusive.
"
      end

      operation 512642 "getUpper"
	cpp_inline public explicit_return_type "Comparable<C>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the upper end point of the interval.

@return the upper end point of the interval.
"
      end

      operation 512770 "setUpper"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "upper" explicit_type "Comparable<C>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the upper end point of the interval.

@param upper
           the upper end point of the interval.
"
      end

      operation 512898 "toString"
	cpp_inline public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 202114 "LUDecomposition"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "LU Decomposition.
<P>
For an m-by-n matrix A with m >= n, the LU decomposition is an m-by-n unit
lower triangular matrix L, an n-by-n upper triangular matrix U, and a
permutation vector piv of length m so that A(piv,:) = L*U. If m < n, then L
is m-by-m and U is m-by-n.
<P>
The LU decompostion with pivoting always exists, even if the matrix is
singular, so the constructor will never fail. The primary use of the LU
decomposition is in the solution of square systems of simultaneous linear
equations. This will fail if isNonsingular() returns false.
"
      classrelation 242818 // <realization>
	relation 242818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 242818 // <realization>
	  b parent class_ref 202242 // Serializable
      end

      attribute 204290 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 204418 "LU"
	const_attribute private explicit_type "double"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "------------------------ Class variables ------------------------


Array for internal storage of decomposition.

@serial internal array storage.

"
      end

      attribute 204546 "m"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Row and column dimensions, and pivot sign.

@serial column dimension.
@serial row dimension.
@serial pivot sign.

"
      end

      attribute 204674 "n"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Row and column dimensions, and pivot sign.

@serial column dimension.
@serial row dimension.
@serial pivot sign.

"
      end

      attribute 204802 "pivsign"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 204930 "piv"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Internal storage of pivot vector.

@serial pivot vector.

"
      end

      operation 513026 "LUDecomposition"
	public explicit_return_type ""
	nparams 1
	  param inout name "A" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------ Constructor ------------------------


LU Decomposition, a structure to access L, U and piv.

@param A
           Rectangular matrix
"
      end

      operation 513154 "isNonsingular"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------ Temporary, experimental code.
------------------------\\

\\ LU Decomposition, computed by Gaussian elimination. <P> This
constructor computes L and U with the \"daxpy\"-based elimination algorithm
used in LINPACK and MATLAB. In Java, we suspect the dot-product, Crout
algorithm will be faster. We have temporarily included this constructor
until timing experiments confirm this suspicion. <P> @param A Rectangular
matrix @param linpackflag Use Gaussian elimination. Actual value ignored.

@return Structure to access L, U and piv. \\

public LUDecomposition (Matrix A, int linpackflag) { // Initialize. LU =
A.getArrayCopy(); m = A.getRowDimension(); n = A.getColumnDimension();
piv = new int[m]; for (int i = 0; i < m; i++) { piv[i] = i; } pivsign =
1; // Main loop. for (int k = 0; k < n; k++) { // Find pivot. int p = k;
for (int i = k+1; i < m; i++) { if (Math.abs(LU[i][k]) >
Math.abs(LU[p][k])) { p = i; } } // Exchange if necessary. if (p != k) {
for (int j = 0; j < n; j++) { double t = LU[p][j]; LU[p][j] = LU[k][j];
LU[k][j] = t; } int t = piv[p]; piv[p] = piv[k]; piv[k] = t; pivsign =
-pivsign; } // Compute multipliers and eliminate k-th column. if
(LU[k][k] != 0.0) { for (int i = k+1; i < m; i++) { LU[i][k] /= LU[k][k];
for (int j = k+1; j < n; j++) { LU[i][j] -= LU[i][k]LU[k][j]; } } } } } \\
------------------------ End of temporary code. ------------------------


------------------------ Public Methods ------------------------


Is the matrix nonsingular?

@return true if U, and hence A, is nonsingular.
"
      end

      operation 513282 "getL"
	public return_type class_ref 152194 // Matrix
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return lower triangular factor

@return L
"
      end

      operation 513410 "getU"
	public return_type class_ref 152194 // Matrix
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return upper triangular factor

@return U
"
      end

      operation 513538 "getPivot"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return pivot permutation vector

@return piv
"
      end

      operation 513666 "getDoublePivot"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return pivot permutation vector as a one-dimensional double array

@return (double) piv
"
      end

      operation 513794 "det"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determinant

@return det(A)
@exception IllegalArgumentException
               Matrix must be square
"
      end

      operation 513922 "solve"
	public return_type class_ref 152194 // Matrix
	nparams 1
	  param inout name "B" type class_ref 152194 // Matrix
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Solve A*X = B

@param B
           A Matrix with as many rows as A and any number of columns.
@return X so that L*U*X = B(piv,:)
@exception IllegalArgumentException
               Matrix row dimensions must agree.
@exception RuntimeException
               Matrix is singular.
"
      end
    end
  end

  deploymentview 138370 "math"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 190210 "Interval"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 201986 // Interval
      end
    end

    artifact 190338 "LUDecomposition"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 202114 // LUDecomposition
      end
    end

    artifact 190466 "Matrix"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
${definition}"
      associated_elems
	class_ref 152194 // Matrix
      end
    end

    artifact 190594 "MixedRadixNumber"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 187266 // MixedRadixNumber
      end
    end

    artifact 190722 "Vector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 151554 // Vector
      end
    end
  end

  package_ref 140162 // permute
end
