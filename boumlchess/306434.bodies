class DefaultMove
!!!1301122.java!!!	DefaultMove(inout inference : CodeGenerationInference, inout iri : IRI)
        super(inference, iri);
!!!1301250.java!!!	getMakeMove() : Collection<? extends WrappedIndividual>
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_MAKEMOVE,
                                               WrappedIndividualImpl.class);
!!!1301378.java!!!	hasMakeMove() : boolean
	   return !getMakeMove().isEmpty();
!!!1301506.java!!!	addMakeMove(inout newMakeMove : WrappedIndividual) : void
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_MAKEMOVE,
                                       newMakeMove);
!!!1301634.java!!!	removeMakeMove(inout oldMakeMove : WrappedIndividual) : void
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_MAKEMOVE,
                                          oldMakeMove);
!!!1301762.java!!!	getMoveFrom() : Collection<? extends ChessPosition>
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_MOVEFROM,
                                               DefaultChessPosition.class);
!!!1301890.java!!!	hasMoveFrom() : boolean
	   return !getMoveFrom().isEmpty();
!!!1302018.java!!!	addMoveFrom(inout newMoveFrom : ChessPosition) : void
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_MOVEFROM,
                                       newMoveFrom);
!!!1302146.java!!!	removeMoveFrom(inout oldMoveFrom : ChessPosition) : void
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_MOVEFROM,
                                          oldMoveFrom);
!!!1302274.java!!!	getMoveTo() : Collection<? extends ChessPosition>
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_MOVETO,
                                               DefaultChessPosition.class);
!!!1302402.java!!!	hasMoveTo() : boolean
	   return !getMoveTo().isEmpty();
!!!1302530.java!!!	addMoveTo(inout newMoveTo : ChessPosition) : void
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_MOVETO,
                                       newMoveTo);
!!!1302658.java!!!	removeMoveTo(inout oldMoveTo : ChessPosition) : void
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_MOVETO,
                                          oldMoveTo);
!!!1302786.java!!!	getMovementOf() : Collection<? extends ChessPiece>
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_MOVEMENTOF,
                                               DefaultChessPiece.class);
!!!1302914.java!!!	hasMovementOf() : boolean
	   return !getMovementOf().isEmpty();
!!!1303042.java!!!	addMovementOf(inout newMovementOf : ChessPiece) : void
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_MOVEMENTOF,
                                       newMovementOf);
!!!1303170.java!!!	removeMovementOf(inout oldMovementOf : ChessPiece) : void
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_MOVEMENTOF,
                                          oldMovementOf);
!!!1303298.java!!!	getIsPartOf() : Collection<? extends WrappedIndividual>
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISPARTOF,
                                               WrappedIndividualImpl.class);
!!!1303426.java!!!	hasIsPartOf() : boolean
	   return !getIsPartOf().isEmpty();
!!!1303554.java!!!	addIsPartOf(inout newIsPartOf : WrappedIndividual) : void
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISPARTOF,
                                       newIsPartOf);
!!!1303682.java!!!	removeIsPartOf(inout oldIsPartOf : WrappedIndividual) : void
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISPARTOF,
                                          oldIsPartOf);
!!!1303810.java!!!	getOpponents() : Collection<? extends WrappedIndividual>
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_OPPONENTS,
                                               WrappedIndividualImpl.class);
!!!1303938.java!!!	hasOpponents() : boolean
	   return !getOpponents().isEmpty();
!!!1304066.java!!!	addOpponents(inout newOpponents : WrappedIndividual) : void
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_OPPONENTS,
                                       newOpponents);
!!!1304194.java!!!	removeOpponents(inout oldOpponents : WrappedIndividual) : void
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_OPPONENTS,
                                          oldOpponents);
!!!1304322.java!!!	getPlays() : Collection<? extends WrappedIndividual>
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_PLAYS,
                                               WrappedIndividualImpl.class);
!!!1304450.java!!!	hasPlays() : boolean
	   return !getPlays().isEmpty();
!!!1304578.java!!!	addPlays(inout newPlays : WrappedIndividual) : void
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_PLAYS,
                                       newPlays);
!!!1304706.java!!!	removePlays(inout oldPlays : WrappedIndividual) : void
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_PLAYS,
                                          oldPlays);
!!!1304834.java!!!	getHasName() : Collection<? extends Object>
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASNAME, Object.class);
!!!1304962.java!!!	hasHasName() : boolean
		return !getHasName().isEmpty();
!!!1305090.java!!!	addHasName(inout newHasName : Object) : void
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASNAME, newHasName);
!!!1305218.java!!!	removeHasName(inout oldHasName : Object) : void
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASNAME, oldHasName);
!!!1305346.java!!!	getHasValue() : Collection<? extends Integer>
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASVALUE, Integer.class);
!!!1305474.java!!!	hasHasValue() : boolean
		return !getHasValue().isEmpty();
!!!1305602.java!!!	addHasValue(inout newHasValue : Integer) : void
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASVALUE, newHasValue);
!!!1305730.java!!!	removeHasValue(inout oldHasValue : Integer) : void
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASVALUE, oldHasValue);
