class PlannerQueueBasedSearch
!!!2257282.java!!!	PlannerQueueBasedSearch(inout impl : PlannerQueueSearch, inout h : ToDoubleFunction<Node<PlannerState, ChessPlannerAction>>)
		super(impl,new EvalFunction<>(h));
		this.impl = impl;
!!!2257410.java!!!	PlannerQueueBasedSearch(inout impl : PlannerQueueSearch, inout state : PlannerState, inout action : ChessPlannerAction, inout h : ToDoubleFunction<Node<PlannerState, ChessPlannerAction>>)
		super(impl,new EvalFunction<PlannerState, ChessPlannerAction>(h)); // This call makes the following call: QueueFactory.createPriorityQueue(Comparator.comparing(evalFn::applyAsDouble)))
		this.state = state;
		this.action = action;
		NodeExpander exp = impl.getNodeExpander().useParentLinks(true);
		chNode = new ChessNode(state);		
/*		Node node = exp.createRootNode(state);
		chNode = node;*/
		chessNode = (ChessNode) chNode;
		this.impl =  impl; // The implementation of the queue search
		this.impl.addToFrontier(chNode);
//		queue.add(node);ch
		
!!!2250114.java!!!	getState() : PlannerState
		return state;
!!!2250242.java!!!	setState(inout state : PlannerState) : void
		this.state = state;
!!!2250370.java!!!	getAction() : ChessPlannerAction
		return action;
!!!2250498.java!!!	setAction(inout action : ChessPlannerAction) : void
		this.action = action;
!!!2242690.java!!!	findActions(inout p : Problem) : Optional<List<ChessPlannerAction>>
		// TODO Auto-generated method stub
		return super.findActions(p);
!!!2242818.java!!!	findState(inout p : Problem) : Optional<PlannerState>
		/*
		 * copied from super.findstate
		 */
		impl.getNodeExpander().useParentLinks(false);
		impl.getFrontier().clear();
		Node localnode = null;
		PlannerState state = null;

		Optional<Node<PlannerState, ChessPlannerAction>> node = impl.findNode(p,impl.getFrontier());
		if (node.isPresent()) {
			localnode = node.get();
			state =(PlannerState) localnode.getState();
			Optional<PlannerState> optstate = Optional.ofNullable(state);
			if(optstate.isPresent()) {
				return SearchUtils.toState(node);
			}
		}
		Optional<PlannerState> optState = Optional.ofNullable(state);
		return optState;

!!!2242946.java!!!	addNodeListener(inout listener : Consumer<Node<PlannerState, ChessPlannerAction>>) : void
		// TODO Auto-generated method stub
		super.addNodeListener(listener);
