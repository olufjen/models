format 223
"planning" // aima::core::logic::planning
  revision 1
  modified_by 2 "bruker"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\svnroot\\logic\\ai\\trunk\\games\\src\\main\\java\\aima/core/logic/planning/"
  java_package "aima.core.logic.planning"
  classview 134786 "planning"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 169602 "ActionSchema"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page 367.<br>
<p>
Actions are described by a set of action schemas that implicitly define the ACTIONS (s)
and RESULT (s, a) functions needed to do a problem-solving search.
<p>
The schema consists of the action name, a list of all the variables used in the schema, a
precondition and an effect.

@author samagra
"
      classrelation 194306 // variables (<unidirectional association>)
	relation 194306 --->
	  stereotype "List"
	  a role_name "variables" package
	    comment " list of variables"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 194306 // variables (<unidirectional association>)
	  b parent class_ref 160770 // Term
      end

      classrelation 194434 // precondition (<unidirectional association>)
	relation 194434 --->
	  stereotype "List"
	  a role_name "precondition" package
	    comment "PRECONDITION: treated as a conjunction of fluents"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 194434 // precondition (<unidirectional association>)
	  b parent class_ref 148738 // Literal
      end

      classrelation 194562 // effects (<unidirectional association>)
	relation 194562 --->
	  stereotype "List"
	  a role_name "effects" package
	    comment "EFFECT: treated as a conjunction of fluents"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 194562 // effects (<unidirectional association>)
	  b parent class_ref 148738 // Literal
      end

      classrelation 194690 // effectsPositiveLiterals (<unidirectional association>)
	relation 194690 --->
	  stereotype "List"
	  a role_name "effectsPositiveLiterals" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 194690 // effectsPositiveLiterals (<unidirectional association>)
	  b parent class_ref 148738 // Literal
      end

      classrelation 194818 // effectsNegativeLiterals (<unidirectional association>)
	relation 194818 --->
	  stereotype "List"
	  a role_name "effectsNegativeLiterals" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 194818 // effectsNegativeLiterals (<unidirectional association>)
	  b parent class_ref 148738 // Literal
      end

      attribute 176642 "name"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "action name"
      end

      operation 348674 "ActionSchema"
	public explicit_return_type ""
	nparams 4
	  param in name "name" explicit_type "String"
	  param inout name "variables" explicit_type "List<Term>"
	  param inout name "precondition" explicit_type "List<Literal>"
	  param inout name "effects" explicit_type "List<Literal>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 348802 "ActionSchema"
	public explicit_return_type ""
	nparams 4
	  param in name "name" explicit_type "String"
	  param inout name "variables" explicit_type "List<Term>"
	  param in name "precondition" explicit_type "String"
	  param in name "effects" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 348930 "sortEffects"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 349058 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 349186 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 349314 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 349442 "getActionBySubstitution"
	public return_type class_ref 169602 // ActionSchema
	nparams 1
	  param inout name "constants" explicit_type "List<Constant>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function generates ground actions from a given actionschema.

@param constants The list of constants from which to generate ground actions.
@return A ground action.
"
      end

      operation 349570 "getConstants"
	public return_type class_ref 149506 // Constant
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "To extract constants from an action.

@return A list of constants from the acton.
"
      end

      operation 349698 "extractConstant"
	public return_type class_ref 149506 // Constant
	nparams 1
	  param inout name "list" explicit_type "List<Literal>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 349826 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 349954 "getVariables"
	public return_type class_ref 160770 // Term
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 350082 "getPrecondition"
	public return_type class_ref 148738 // Literal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 350210 "getEffects"
	public return_type class_ref 148738 // Literal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 350338 "getEffectsPositiveLiterals"
	public return_type class_ref 148738 // Literal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 350466 "getEffectsNegativeLiterals"
	public return_type class_ref 148738 // Literal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 169730 "Graph"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page 379.<br>
<p>
A planning graph is a directed graph organized into levels: first a level S 0 for the initial
state, consisting of nodes representing each fluent that holds in S 0 ; then a level A 0 consisting
of nodes for each ground action that might be applicable in S 0 ; then alternating levels S i
followed by A i ; until we reach a termination condition.

@author samagra
"
      classrelation 194946 // levels (<unidirectional association>)
	relation 194946 --->
	  stereotype "ArrayList"
	  a role_name "levels" package
	    comment " Levels"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 194946 // levels (<unidirectional association>)
	  b parent class_ref 169858 // Level
      end

      classrelation 195074 // problem (<unidirectional association>)
	relation 195074 --->
	  a role_name "problem" package
	    comment " The planning problem"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 195074 // problem (<unidirectional association>)
	  b parent class_ref 169986 // Problem
      end

      classrelation 195202 // propositionalisedActions (<unidirectional association>)
	relation 195202 --->
	  stereotype "List"
	  a role_name "propositionalisedActions" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 195202 // propositionalisedActions (<unidirectional association>)
	  b parent class_ref 169602 // ActionSchema
      end

      operation 350594 "Graph"
	public explicit_return_type ""
	nparams 2
	  param inout name "problem" type class_ref 169986 // Problem
	  param inout name "initialLevel" type class_ref 169858 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 350722 "numLevels"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 350850 "getLevels"
	public return_type class_ref 169858 // Level
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 350978 "getProblem"
	public return_type class_ref 169986 // Problem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 351106 "getPropositionalisedActions"
	public return_type class_ref 169602 // ActionSchema
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 351234 "addLevel"
	public return_type class_ref 169730 // Graph
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 169858 "Level"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The data structure for calculating and holding the levels of a planning graph.

@author samagra
"
      attribute 176770 "levelObjects"
	package explicit_type "Object"
	stereotype "List"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 176898 "mutexLinks"
	package explicit_type "Object, List<Object>"
	stereotype "HashMap"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "can be planned alternatively"
      end

      attribute 177026 "nextLinks"
	package explicit_type "Object, List<Object>"
	stereotype "HashMap"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 177154 "prevLinks"
	package explicit_type "Object, List<Object>"
	stereotype "HashMap"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 195330 // problem (<unidirectional association>)
	relation 195330 --->
	  a role_name "problem" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 195330 // problem (<unidirectional association>)
	  b parent class_ref 169986 // Problem
      end

      classrelation 195458 // prevLevel (<unidirectional association>)
	relation 195458 --->
	  a role_name "prevLevel" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 195458 // prevLevel (<unidirectional association>)
	  b parent class_ref 169858 // Level
      end

      operation 352770 "Level"
	public explicit_return_type ""
	nparams 2
	  param inout name "prevLevel" type class_ref 169858 // Level
	  param inout name "problem" type class_ref 169986 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 352898 "Level"
	public explicit_return_type ""
	nparams 3
	  param inout name "prevLevel" type class_ref 169858 // Level
	  param inout name "problem" type class_ref 169986 // Problem
	  param in name "extraLiterals" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 353026 "addExtraLiterals"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 353154 "getLevelObjects"
	public explicit_return_type "List<Object>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 353282 "getMutexLinks"
	public explicit_return_type "HashMap<Object, List<Object>>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 353410 "getNextLinks"
	public explicit_return_type "HashMap<Object, List<Object>>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 353538 "getPrevLinks"
	public explicit_return_type "HashMap<Object, List<Object>>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 353666 "getProblem"
	public return_type class_ref 169986 // Problem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 353794 "addPersistentActions"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 353922 "addNoPrecondActions"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 354050 "calculateMutexLinks"
	private explicit_return_type "void"
	nparams 1
	  param inout name "prevLevel" type class_ref 169858 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 354178 "checkInterference"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "firstActionPreconditions" explicit_type "List<Literal>"
	  param inout name "secondActionEffects" explicit_type "List<Literal>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 354306 "addToHashMap"
	private explicit_return_type "void"
	nparams 3
	  param inout name "firstObject" explicit_type "Object"
	  param inout name "secondObject" explicit_type "Object"
	  param inout name "map" explicit_type "HashMap<Object, List<Object>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 354434 "calculateNextLinks"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 354562 "getPrevLevel"
	public return_type class_ref 169858 // Level
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 354690 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 169986 "Problem"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page
383.<br>
<br>
<p>
A set of action schemas serves as a definition of a planning domain. A specific problem
within the domain is defined with the addition of an initial state and a goal. The initial
state is a conjunction of ground atoms.The goal is just like a
precondition: a conjunction of literals (positive or negative) that may contain variables, such
as At(p, SFO ) ∧ Plane(p). Any variables are treated as existentially quantified, so this goal
is to have any plane at SFO. The problem is solved when we can find a sequence of actions
that end in a state s that entails the goal.

@author samagra
"
      classrelation 195586 // initialState (<unidirectional association>)
	relation 195586 --->
	  a role_name "initialState" package
	    comment " initialState"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 195586 // initialState (<unidirectional association>)
	  b parent class_ref 170242 // State
      end

      classrelation 195714 // actionSchemas (<unidirectional association>)
	relation 195714 --->
	  stereotype "Set"
	  a role_name "actionSchemas" package
	    comment " Planning Domain"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 195714 // actionSchemas (<unidirectional association>)
	  b parent class_ref 169602 // ActionSchema
      end

      classrelation 195842 // goalState (<unidirectional association>)
	relation 195842 --->
	  a role_name "goalState" package
	    comment " goalState"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 195842 // goalState (<unidirectional association>)
	  b parent class_ref 170242 // State
      end

      operation 355330 "Problem"
	public explicit_return_type ""
	nparams 3
	  param inout name "initialState" type class_ref 170242 // State
	  param inout name "goalState" type class_ref 170242 // State
	  param inout name "actionSchemas" explicit_type "Set<ActionSchema>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 355458 "Problem"
	public explicit_return_type ""
	nparams 3
	  param inout name "initialState" type class_ref 170242 // State
	  param inout name "goalState" type class_ref 170242 // State
	  param inout name "" explicit_type "ActionSchema...actions"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 355586 "getInitialState"
	public return_type class_ref 170242 // State
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 355714 "getActionSchemas"
	public return_type class_ref 169602 // ActionSchema
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Set<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 355842 "getGoalState"
	public return_type class_ref 170242 // State
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 355970 "getProblemConstants"
	public return_type class_ref 149506 // Constant
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return Constants for a particular problem domain.
"
      end

      operation 356098 "getPropositionalisedActions"
	public return_type class_ref 169602 // ActionSchema
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return Propositionalises all the actionschemas to return a set of possible ground actions
"
      end
    end

    class 170114 "GraphPlanAlgorithm"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): Figure 10.9 page
383.<br>
<br>

<pre>

function GRAPHPLAN(problem) returns solution or failure

 graph  INITIAL-PLANNING-GRAPH(problem)
 goals  CONJUNCTS(problem.GOAL)
 nogoods  an empty hash table
 for tl = 0 to ∞ do
   if goals all non-mutex in St of graph then
     solution  EXTRACT-SOLUTION(graph, goals, NUMLEVELS(graph), nogoods)
     if solution ≠ failure then return solution
   if graph and nogoods have both leveled off then return failure
   graph  EXPAND-GRAPH(graph, problem)
</pre>
<p>
Figure 10.9 The GRAPHPLAN algorithm. GRAPHPLAN calls EXPAND-GRAPH to add a
level until either a solution is found by EXTRACT-SOLUTION, or no solution
is possible.

@author samagra
"
      operation 351362 "graphPlan"
	public explicit_return_type "List<List<ActionSchema>>"
	nparams 1
	  param inout name "problem" type class_ref 169986 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "function GRAPHPLAN(problem) returns solution or failure

@param problem the planning problem for which the plan is to be created
@return a solution or null
"
      end

      operation 351490 "extractSolution"
	private explicit_return_type "List<List<ActionSchema>>"
	nparams 4
	  param inout name "graph" type class_ref 169730 // Graph
	  param inout name "goals" explicit_type "List<Literal>"
	  param in name "numLevel" explicit_type "int"
	  param inout name "nogoods" explicit_type "Hashtable<Integer, List<Literal>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method extracts a solution from the planning graph.
<p>
Artificial Intelligence A Modern Approach (3rd Edition): page 384.<br>
<p>
We can define EXTRACT -SOLUTION as a backward search problem, where
each state in the search contains a pointer to a level in the planning graph and a set of unsat-
isfied goals. We define this search problem as follows:
• The initial state is the last level of the planning graph, S n , along with the set of goals
from the planning problem.
• The actions available in a state at level S i are to select any conflict-free subset of the
actions in A i−1 whose effects cover the goals in the state. The resulting state has level
S i−1 and has as its set of goals the preconditions for the selected set of actions. By
“conflict free,” we mean a set of actions such that no two of them are mutex and no two
of their preconditions are mutex.
• The goal is to reach a state at level S 0 such that all the goals are satisfied.
• The cost of each action is 1.

@param graph    The planning graph.
@param goals    Goals of the planning problem.
@param numLevel Number of levels in the graph.
@param nogoods  A hash table to store previously calculated results.
@return a solution if found else null
"
      end

      operation 351618 "checkAllGoalsNonMutex"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "level" type class_ref 169858 // Level
	  param inout name "goals" explicit_type "List<Literal>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used to check if all goals are present in a particular state
and none of them has a mutex link.

@param level The current level in which to check for the goals.
@param goals List of goals to be checked
@return Boolean representing if goals all non mutex in St
"
      end

      operation 351746 "expandGraph"
	private return_type class_ref 169730 // Graph
	nparams 1
	  param inout name "graph" type class_ref 169730 // Graph
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method adds a new state (a state level and an action level both) to the planning graph.

@param graph The planning graph.
@return The expanded graph.
"
      end

      operation 351874 "leveledOff"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "nogoods" explicit_type "Hashtable<Integer, List<Literal>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A graph is said to be levelled off if two consecutive levels are identical.

@param nogoods
@return Boolean stating if the hashtable is levelled off.
"
      end

      operation 352002 "levelledOff"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "graph" type class_ref 169730 // Graph
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A graph is said to be levelled off if two consecutive levels are identical.

@param graph
@return Boolean stating if the graph is levelled off.
"
      end

      operation 352130 "conjuncts"
	private return_type class_ref 148738 // Literal
	nparams 1
	  param inout name "goalState" type class_ref 170242 // State
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of literals in a state.

@param goalState
@return List of literals.
"
      end

      operation 352258 "initialPlanningGraph"
	private return_type class_ref 169730 // Graph
	nparams 1
	  param inout name "problem" type class_ref 169986 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method initialises the planning graph for a particular problem.

@param problem The planning problem.
@return Graph for the planning problem.
"
      end

      operation 352386 "combineTwoLists"
	public explicit_return_type "List<List<ActionSchema>>"
	nparams 2
	  param inout name "firstList" explicit_type "List<ActionSchema>"
	  param inout name "secondList" explicit_type "List<ActionSchema>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Helper methods for combinations and permutations."
      end

      operation 352514 "combineExtraList"
	public explicit_return_type "List<List<ActionSchema>>"
	nparams 2
	  param inout name "combinedList" explicit_type "List<List<ActionSchema>>"
	  param inout name "newList" explicit_type "List<ActionSchema>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 352642 "generateCombinations"
	public explicit_return_type "List<List<ActionSchema>>"
	nparams 1
	  param inout name "actionLists" explicit_type "List<List<ActionSchema>>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 170242 "State"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Artificial Intelligence A Modern Approach (3rd Edition): page
367.<br>
<br>
<p>
Each state is represented as a conjunction of fluents that are ground, functionless atoms.
For example, Poor ∧ Unknown might represent the state of a hapless agent, and a state
in a package delivery problem might be At(Truck 1 , Melbourne) ∧ At(Truck 2 , Sydney).

@author samagra
"
      classrelation 195970 // fluents (<unidirectional association>)
	relation 195970 --->
	  stereotype "List"
	  a role_name "fluents" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 195970 // fluents (<unidirectional association>)
	  b parent class_ref 148738 // Literal
      end

      attribute 177282 "hashCode"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 356226 "State"
	public explicit_return_type ""
	nparams 1
	  param inout name "fluents" explicit_type "List<Literal>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 356354 "State"
	public explicit_return_type ""
	nparams 1
	  param in name "fluents" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 356482 "result"
	public return_type class_ref 170242 // State
	nparams 1
	  param inout name "a" type class_ref 169602 // ActionSchema
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the state obtained by the application of an applicable action to
the current state.
<p>
The result of executing action a in state s is defined as a state s  which is represented
by the set of fluents formed by starting with s, removing the fluents that appear as negative
literals in the action’s effects (what we call the delete list or D EL (a)), and adding the fluents
that are positive literals in the action’s effects (what we call the add list or A DD (a)):
RESULT (s, a) = (s − DEL (a)) ∪ ADD (a) .

@param a The applicable action.
@return The new state.
"
      end

      operation 356610 "result"
	public return_type class_ref 170242 // State
	nparams 1
	  param inout name "actions" explicit_type "List<ActionSchema>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the state obtained by the application of a list of applicable actions to
the current state. This method does not change the original state and in fact returns
a new state representing the changed state.

@param actions
@return
"
      end

      operation 356738 "isApplicable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "a" type class_ref 169602 // ActionSchema
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the action is applicable in a state.
<p>
We say that action a is applicable in state s if the preconditions are satisfied by s.

@param a an action
@return a boolean stating if the action is applicable.
"
      end

      operation 356866 "getFluents"
	public return_type class_ref 148738 // Literal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 356994 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 357122 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 170370 "PlanningProblemFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A problem factory to generate planning problems.

@author samagra
"
      operation 354818 "airCargoTransportProblem"
	class_operation public return_type class_ref 169986 // Problem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates air cargo problem. Artificial Intelligence A Modern Approach (3rd Edition):Figure 10.1 page 369.<br>
<p>
Init(At(C1, SFO) ∧ At(C2, JFK) ∧ At(P1, SFO) ∧ At(P2, JFK)
  ∧ Cargo(C1) ∧ Cargo(C2) ∧ Plane(P1) ∧ Plane(P2)
  ∧ Airport(JFK) ∧ Airport(SFO))
Goal(At(C1, JFK) ∧ At(C2, SFO))
Action(Load(c, p, a),
 PRECOND: At(c, a) ∧ At(p, a) ∧ Cargo(c) ∧ Plane(p) ∧ Airport(a)
 EFFECT: ¬ At(c, a) ∧ In(c, p))
Action(Unload(c, p, a),
 PRECOND: In(c, p) ∧ At(p, a) ∧ Cargo(c) ∧ Plane(p) ∧ Airport(a)
 EFFECT: At(c, a) ∧ ¬ In(c, p))
Action(Fly(p, from, to),
 PRECOND: At(p, from) ∧ Plane(p) ∧ Airport(from) ∧ Airport(to)
 EFFECT: ¬ At(p, from) ∧ At(p, to))

@return A PDDL description of an air cargo transportation planning problem.
"
      end

      operation 354946 "spareTireProblem"
	class_operation public return_type class_ref 169986 // Problem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates spare tire problem. Artificial Intelligence A Modern Approach (3rd Edition): Figure 10.2 page 370.<br>
<p>
Init(Tire(Flat) ∧ Tire(Spare) ∧ At(Flat, Axle) ∧ At(Spare, Trunk))
Goal(At(Spare, Axle))
Action(Remove(obj, loc),
 PRECOND: At(obj, loc)
 EFFECT: ¬ At(obj, loc) ∧ At(obj, Ground))
Action(PutOn(t, Axle),
 PRECOND: Tire(t) ∧ At(t, Ground) ∧ ¬ At(Flat, Axle)
 EFFECT: ¬ At(t, Ground) ∧ At(t, Axle))
Action(LeaveOvernight,
 PRECOND:
 EFFECT: ¬ At(Spare, Ground) ∧ ¬ At(Spare, Axle) ∧ ¬ At(Spare, Trunk)
     ∧ ¬ At(Flat, Ground) ∧ ¬ At(Flat, Axle) ∧ ¬ At(Flat, Trunk))

@return The spare tire problem.
"
      end

      operation 355074 "goHomeToSFOProblem"
	class_operation public return_type class_ref 169986 // Problem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates go to SanFrancisco airport . Artificial Intelligence A Modern Approach (3rd Edition): Figure 11.4 page 407.<br>
<p>
Refinement(Go(Home, SFO),
STEPS : [Drive(Home, SFOLongTermParking),
Shuttle(SFOLongTermParking, SFO)] )
Refinement(Go(Home, SFO),
STEPS : [Taxi (Home, SFO)] )

@return The San Francisco Airport problem.
"
      end

      operation 355202 "getHlaAct"
	class_operation public return_type class_ref 170498 // HighLevelAction
	nparams 1
	  param inout name "problem" type class_ref 169986 // Problem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the Act HLA for a problem.

@param problem
@return The Act HLA.
"
      end
    end

    class 170626 "Utils"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utils for parsing planning problems.

@author samagra
"
      operation 357250 "parse"
	class_operation public return_type class_ref 148738 // Literal
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 133122 "planning"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 160130 "ActionSchema"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.kb.data.Literal;
import aima.core.logic.fol.parsing.ast.Constant;
import aima.core.logic.fol.parsing.ast.Predicate;
import aima.core.logic.fol.parsing.ast.Term;
import aima.core.logic.fol.parsing.ast.Variable;
import java.util.ArrayList;
import java.util.List;
${definition}"
      associated_elems
	class_ref 169602 // ActionSchema
      end
    end

    artifact 160258 "Graph"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
${definition}"
      associated_elems
	class_ref 169730 // Graph
      end
    end

    artifact 160386 "GraphPlanAlgorithm"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.kb.data.Literal;
import java.util.*;
${definition}"
      associated_elems
	class_ref 170114 // GraphPlanAlgorithm
      end
    end

    artifact 160514 "Level"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.kb.data.Literal;
import java.util.*;
${definition}"
      associated_elems
	class_ref 169858 // Level
      end
    end

    artifact 160642 "PlanningProblemFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.parsing.ast.Constant;
import aima.core.logic.fol.parsing.ast.Variable;
import aima.core.logic.planning.hierarchicalsearch.HighLevelAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
${definition}"
      associated_elems
	class_ref 170370 // PlanningProblemFactory
      end
    end

    artifact 160770 "Problem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.kb.data.Literal;
import aima.core.logic.fol.parsing.ast.Constant;
import aima.core.logic.fol.parsing.ast.Term;
import aima.core.util.math.permute.PermutationGenerator;
import java.util.*;
${definition}"
      associated_elems
	class_ref 169986 // Problem
      end
    end

    artifact 160898 "State"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.kb.data.Literal;
import java.util.ArrayList;
import java.util.List;
${definition}"
      associated_elems
	class_ref 170242 // State
      end
    end

    artifact 161026 "Utils"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import aima.core.logic.fol.kb.data.Literal;
import aima.core.logic.fol.parsing.ast.Constant;
import aima.core.logic.fol.parsing.ast.Predicate;
import aima.core.logic.fol.parsing.ast.Term;
import aima.core.logic.fol.parsing.ast.Variable;
import java.util.ArrayList;
import java.util.List;
${definition}"
      associated_elems
	class_ref 170626 // Utils
      end
    end
  end

  package_ref 135938 // hierarchicalsearch
end
