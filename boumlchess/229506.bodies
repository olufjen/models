class TicTacToeMinimax
!!!684930.java!!!	TicTacToeMinimax(inout algo : Minimax::Algorithm)
        super(algo);
        this.grid = new int[GRID_SIZE][GRID_SIZE];
        newGame();
!!!685058.java!!!	TicTacToeMinimax()
		super();
	    this.grid = new int[GRID_SIZE][GRID_SIZE];
	    newGame();
		// TODO Auto-generated constructor stub
!!!685186.java!!!	newGame() : void
        for (int i = 0; i < GRID_SIZE; i++) {
            for (int j = 0; j < GRID_SIZE; j++) {
                grid[i][j] = FREE;
            }
        }
        // X start to play
        currentPlayer = PLAYER_X;
        turn = 0;
!!!685314.java!!!	isOver() : boolean
        return hasWon(PLAYER_O) || hasWon(PLAYER_X) || turn == 9;
!!!685442.java!!!	hasWon(in player : int) : boolean
        return 
            (player == grid[0][1] && player == grid[0][2] && player == grid[0][0])
            ||
            (player == grid[1][1] && player == grid[1][2] && player == grid[1][0])
            ||
            (player == grid[2][1] && player == grid[2][2] && player == grid[2][0])
            ||
            (player == grid[1][0] && player == grid[2][0] && player == grid[0][0])
            ||
            (player == grid[1][1] && player == grid[2][1] && player == grid[0][1])
            ||
            (player == grid[1][2] && player == grid[2][2] && player == grid[0][2])
            ||
            (player == grid[1][1] && player == grid[2][2] && player == grid[0][0])
            ||
            (player == grid[1][1] && player == grid[2][0] && player == grid[0][2]);
!!!685570.java!!!	makeMove(inout move : TicTacToeMove) : void
        grid[move.getX()][move.getY()] = currentPlayer;
        turn++;
        next();
!!!685698.java!!!	unmakeMove(inout move : TicTacToeMove) : void
        grid[move.getX()][move.getY()] = FREE;
        turn--;
        previous();
!!!685826.java!!!	getPossibleMoves() : TicTacToeMove
        List<TicTacToeMove> moves = new ArrayList<>(9);
        for (int i = 0; i < GRID_SIZE; i++) {
            for (int j = 0; j < GRID_SIZE; j++) {
                if (grid[i][j] == FREE) {
                    moves.add(new TicTacToeMove(i, j, currentPlayer));
                }
            }
        }
        // moves can be sorted to optimize alpha-beta pruning
        // {1,1} is always the best move when available
        return moves;
!!!685954.java!!!	evaluate() : double
        int eval = 0;
        if (hasWon(currentPlayer)) {
            // 2 for the win
            eval = 2;
        } else if (hasWon(3 - currentPlayer)) {
            // -2 for loosing
            eval = -2;
        } else if (grid[1][1] == currentPlayer) {
            // 1 for {1,1}
            eval = 1;
        } else if (grid[1][1] == 3 - currentPlayer) {
            // -1 for opponent {1,1}
            eval = -1;
        }
        return eval;
!!!686082.java!!!	maxEvaluateValue() : double
        // evaluate return either -2, -1, 0, 1 or 2
        return 3;
!!!686210.java!!!	next() : void
        currentPlayer = 3 - currentPlayer;
!!!686338.java!!!	previous() : void
        currentPlayer = 3 - currentPlayer;
!!!686466.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        sb.append(grid[0][0] == FREE ? "F" : (grid[0][0] == PLAYER_O ? "O" : "X"));
        sb.append(grid[1][0] == FREE ? "F" : (grid[1][0] == PLAYER_O ? "O" : "X"));
        sb.append(grid[2][0] == FREE ? "F" : (grid[2][0] == PLAYER_O ? "O" : "X"));
        sb.append("\n");
        sb.append(grid[0][1] == FREE ? "F" : (grid[0][1] == PLAYER_O ? "O" : "X"));
        sb.append(grid[1][1] == FREE ? "F" : (grid[1][1] == PLAYER_O ? "O" : "X"));
        sb.append(grid[2][1] == FREE ? "F" : (grid[2][1] == PLAYER_O ? "O" : "X"));
        sb.append("\n");
        sb.append(grid[0][2] == FREE ? "F" : (grid[0][2] == PLAYER_O ? "O" : "X"));
        sb.append(grid[1][2] == FREE ? "F" : (grid[1][2] == PLAYER_O ? "O" : "X"));
        sb.append(grid[2][2] == FREE ? "F" : (grid[2][2] == PLAYER_O ? "O" : "X"));
        sb.append("\n");
        return sb.toString();
