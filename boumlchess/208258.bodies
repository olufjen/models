class NQueensSearchDemo
!!!559746.java!!!	main(inout args : String [[]]) : void
		NQueensSearchDemo demo = new NQueensSearchDemo();
		// prog.setBoardSize(32);
		demo.addProgressTracker(demo::printProgress);

		System.out.println("NQueens depth-first search experiment (boardSize=" + demo.boardSize + ") -->");
		demo.initExperiment(Config.EMPTY);
		demo.startExperiment(new DepthFirstSearch<>(new TreeSearch<>()));
		demo.printResult();

		System.out.println("NQueens hill climbing search experiment (boardSize=" + demo.boardSize + ") -->");
		demo.initExperiment(Config.QUEENS_IN_FIRST_ROW);
		demo.startHillClimbingExperiment();
		demo.printResult();

		System.out.println("NQueens simulated annealing experiment (boardSize=" + demo.boardSize + ", maxIterations="
				+ demo.maxIterations + ") -->");
		demo.initExperiment(Config.QUEENS_IN_FIRST_ROW);
		demo.startSimulatedAnnealingExperiment();
		demo.printResult();

		System.out.println("NQueens genetic algorithm experiment (boardSize=" + demo.boardSize + ", popSize="
				+ demo.populationSize + ", mutProb=" + demo.mutationProbability + ") -->");
		demo.initExperiment(Config.EMPTY);
		demo.startGenAlgoExperiment(false);
		demo.printResult();
!!!559874.java!!!	setBoardSize(in size : int) : void
		boardSize = size;
		board = new NQueensBoard(boardSize);
!!!560002.java!!!	addProgressTracker(inout tracer : NQueensSearchDemo::ProgressTracker) : void
		progressTracers.add(tracer);
!!!560130.java!!!	initExperiment(inout config : NQueensBoard::Config) : void
		board = new NQueensBoard(boardSize, config);
		genAlgo = null;
		search = null;
!!!560258.java!!!	startExperiment(inout search : SearchForActions) : void

		search.addNodeListener(n -> notifyProgressTrackers(n.getState(), search.getMetrics()));

		Problem<NQueensBoard, QueenAction> problem;
		if (board.getNumberOfQueensOnBoard() == 0)
			problem = new GeneralProblem<>(board, NQueensFunctions::getIFActions,
					NQueensFunctions::getResult, NQueensFunctions::testGoal);
		else
			problem = new GeneralProblem<>(board, NQueensFunctions::getCSFActions,
					NQueensFunctions::getResult, NQueensFunctions::testGoal);
		Optional<List<QueenAction>> actions = search.findActions(problem);
		if (actions.isPresent())
			for (QueenAction action : actions.get())
				board = NQueensFunctions.getResult(board, action);

		notifyProgressTrackers(board, search.getMetrics());
!!!560386.java!!!	startHillClimbingExperiment() : void
		// board = new NQueensBoard(boardSize, Config.QUEEN_IN_EVERY_COL);
		Problem<NQueensBoard, QueenAction> problem = new GeneralProblem<>(board, NQueensFunctions::getCSFActions,
				NQueensFunctions::getResult, NQueensFunctions::testGoal);
		search = new HillClimbingSearch<>(NQueensFunctions.createAttackingPairsHeuristicFunction());
		search.addNodeListener(n -> notifyProgressTrackers(n.getState(), search.getMetrics()));
		search.findActions(problem);

		board = (NQueensBoard) ((HillClimbingSearch) search).getLastSearchState();
		notifyProgressTrackers(board, search.getMetrics());
!!!560514.java!!!	startSimulatedAnnealingExperiment() : void
		Problem<NQueensBoard, QueenAction> problem = new GeneralProblem<>(board, NQueensFunctions::getCSFActions,
				NQueensFunctions::getResult, NQueensFunctions::testGoal);
		Scheduler scheduler = new Scheduler(k, lambda, maxIterations);
		search = new SimulatedAnnealingSearch<>(NQueensFunctions.createAttackingPairsHeuristicFunction(), scheduler);
		search.addNodeListener(n -> notifyProgressTrackers(n.getState(), search.getMetrics()));
		search.findActions(problem);

		board = (NQueensBoard) ((SimulatedAnnealingSearch) search).getLastSearchState();
		notifyProgressTrackers(board, search.getMetrics());
!!!560642.java!!!	startGenAlgoExperiment(inout randomConfig : boolean) : void
		Collection<Integer> alphabet = NQueensGenAlgoUtil.getFiniteAlphabetForBoardOfSize(boardSize);
		FitnessFunction<Integer> fitnessFn = NQueensGenAlgoUtil.getFitnessFunction();

		genAlgo = new GeneticAlgorithm<Integer>(boardSize, alphabet, mutationProbability, random) {
			protected void updateMetrics(Collection<Individual<Integer>> pop, int itCount, long time) {
				super.updateMetrics(pop, itCount, time);
				double avg = 0.0;
				double max = Double.NEGATIVE_INFINITY;
				for (Individual<Integer> ind : pop) {
					double fval = fitnessFn.apply(ind);
					avg += fval;
					max = Math.max(max, fval);
				}
				avg /= pop.size();
				metrics.set("fitMax", max);
				metrics.set("fitAvg", avg);
			}
		};
		genAlgo.addProgressTracer((it, pop) -> notifyProgressTrackers(pop, fitnessFn));

		List<Individual<Integer>> population = new ArrayList<>();
		List<Integer> rep = new ArrayList<>();
		for (int i = 0; i < boardSize; i++)
			rep.add(0);
		for (int i = 0; i < populationSize; i++)
			if (randomConfig)
				population.add(NQueensGenAlgoUtil.generateRandomIndividual(boardSize));
			else
				population.add(new Individual<>(rep));

		Individual<Integer> result = genAlgo.geneticAlgorithm(population, fitnessFn, maxIterations);

		board = NQueensGenAlgoUtil.getBoardForIndividual(result);
!!!560770.java!!!	getBoard() : NQueensBoard
		return board;
!!!560898.java!!!	printProgress(inout board : NQueensBoard, inout metrics : Metrics) : void
		System.out.println(board.getNumberOfAttackingPairs() + " attacking pairs " + metrics);
!!!561026.java!!!	printResult() : void
		if (board != null) {
			System.out.println("Final State:\n" + board);
			System.out.println("Attacking pairs: " + board.getNumberOfAttackingPairs());
		}
		if (genAlgo != null)
			System.out.println("Metrics: " + genAlgo.getMetrics());
		if (search != null)
			System.out.println("Metrics: " + search.getMetrics());
		System.out.println("Experiment finished.\n");
!!!561154.java!!!	notifyProgressTrackers(inout population : Collection<Individual<Integer>>, inout fitnessFn : FitnessFunction) : void
		Individual<Integer> best = genAlgo.retrieveBestIndividual(population, fitnessFn);
		notifyProgressTrackers(NQueensGenAlgoUtil.getBoardForIndividual(best), genAlgo.getMetrics());
!!!561282.java!!!	notifyProgressTrackers(inout board : NQueensBoard, inout metrics : Metrics) : void
		for (ProgressTracker tracker : progressTracers)
			tracker.trackProgress(board, metrics);
